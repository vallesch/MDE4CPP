#include "uml/impl/UmlPackageImpl.hpp"

#include <cassert>

#include "abstractDataTypes/SubsetUnion.hpp"
//metametamodel classes
#include "ecore/EAnnotation.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EDataType.hpp"
#include "ecore/EEnum.hpp"
#include "ecore/EEnumLiteral.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EParameter.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStringToStringMapEntry.hpp"

// metametamodel factory
#include "ecore/EcoreFactory.hpp"

//depending model packages
#include "ecore/EcorePackage.hpp"
#include "types/TypesPackage.hpp"

using namespace uml;

void UmlPackageImpl::initializePackageContents()
{
	if (isInitialized)
	{
		return;
	}
	isInitialized = true;

	// Initialize package
	setName(eNAME);
	setNsPrefix(eNS_PREFIX);
	setNsURI(eNS_URI);
	
	// Add supertypes to classes
	m_abstraction_EClass->getESuperTypes()->push_back(getDependency_EClass());
	m_acceptCallAction_EClass->getESuperTypes()->push_back(getAcceptEventAction_EClass());
	m_acceptEventAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_action_EClass->getESuperTypes()->push_back(getExecutableNode_EClass());
	m_actionExecutionSpecification_EClass->getESuperTypes()->push_back(getExecutionSpecification_EClass());
	m_actionInputPin_EClass->getESuperTypes()->push_back(getInputPin_EClass());
	m_activity_EClass->getESuperTypes()->push_back(getBehavior_EClass());
	m_activityEdge_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_activityFinalNode_EClass->getESuperTypes()->push_back(getFinalNode_EClass());
	m_activityGroup_EClass->getESuperTypes()->push_back(getActivityContent_EClass());
	m_activityGroup_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_activityNode_EClass->getESuperTypes()->push_back(getActivityContent_EClass());
	m_activityNode_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_activityParameterNode_EClass->getESuperTypes()->push_back(getObjectNode_EClass());
	m_activityPartition_EClass->getESuperTypes()->push_back(getActivityGroup_EClass());
	m_actor_EClass->getESuperTypes()->push_back(getBehavioredClassifier_EClass());
	m_addStructuralFeatureValueAction_EClass->getESuperTypes()->push_back(getWriteStructuralFeatureAction_EClass());
	m_addVariableValueAction_EClass->getESuperTypes()->push_back(getWriteVariableAction_EClass());
	m_anyReceiveEvent_EClass->getESuperTypes()->push_back(getMessageEvent_EClass());
	m_artifact_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_artifact_EClass->getESuperTypes()->push_back(getDeployedArtifact_EClass());
	m_association_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_association_EClass->getESuperTypes()->push_back(getRelationship_EClass());
	m_associationClass_EClass->getESuperTypes()->push_back(getAssociation_EClass());
	m_associationClass_EClass->getESuperTypes()->push_back(getClass_EClass());
	m_behavior_EClass->getESuperTypes()->push_back(getClass_EClass());
	m_behaviorExecutionSpecification_EClass->getESuperTypes()->push_back(getExecutionSpecification_EClass());
	m_behavioralFeature_EClass->getESuperTypes()->push_back(getFeature_EClass());
	m_behavioralFeature_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_behavioredClassifier_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_broadcastSignalAction_EClass->getESuperTypes()->push_back(getInvocationAction_EClass());
	m_callAction_EClass->getESuperTypes()->push_back(getInvocationAction_EClass());
	m_callBehaviorAction_EClass->getESuperTypes()->push_back(getCallAction_EClass());
	m_callEvent_EClass->getESuperTypes()->push_back(getMessageEvent_EClass());
	m_callOperationAction_EClass->getESuperTypes()->push_back(getCallAction_EClass());
	m_centralBufferNode_EClass->getESuperTypes()->push_back(getObjectNode_EClass());
	m_changeEvent_EClass->getESuperTypes()->push_back(getEvent_EClass());
	m_class_EClass->getESuperTypes()->push_back(getBehavioredClassifier_EClass());
	m_class_EClass->getESuperTypes()->push_back(getEncapsulatedClassifier_EClass());
	m_classifier_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_classifier_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_classifier_EClass->getESuperTypes()->push_back(getTemplateableElement_EClass());
	m_classifier_EClass->getESuperTypes()->push_back(getType_EClass());
	m_classifierTemplateParameter_EClass->getESuperTypes()->push_back(getTemplateParameter_EClass());
	m_clause_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_clearAssociationAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_clearStructuralFeatureAction_EClass->getESuperTypes()->push_back(getStructuralFeatureAction_EClass());
	m_clearVariableAction_EClass->getESuperTypes()->push_back(getVariableAction_EClass());
	m_collaboration_EClass->getESuperTypes()->push_back(getBehavioredClassifier_EClass());
	m_collaboration_EClass->getESuperTypes()->push_back(getStructuredClassifier_EClass());
	m_collaborationUse_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_combinedFragment_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_comment_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_communicationPath_EClass->getESuperTypes()->push_back(getAssociation_EClass());
	m_component_EClass->getESuperTypes()->push_back(getClass_EClass());
	m_componentRealization_EClass->getESuperTypes()->push_back(getRealization_EClass());
	m_conditionalNode_EClass->getESuperTypes()->push_back(getStructuredActivityNode_EClass());
	m_connectableElement_EClass->getESuperTypes()->push_back(getParameterableElement_EClass());
	m_connectableElement_EClass->getESuperTypes()->push_back(getTypedElement_EClass());
	m_connectableElementTemplateParameter_EClass->getESuperTypes()->push_back(getTemplateParameter_EClass());
	m_connectionPointReference_EClass->getESuperTypes()->push_back(getVertex_EClass());
	m_connector_EClass->getESuperTypes()->push_back(getFeature_EClass());
	m_connectorEnd_EClass->getESuperTypes()->push_back(getMultiplicityElement_EClass());
	m_considerIgnoreFragment_EClass->getESuperTypes()->push_back(getCombinedFragment_EClass());
	m_constraint_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_continuation_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_controlFlow_EClass->getESuperTypes()->push_back(getActivityEdge_EClass());
	m_controlNode_EClass->getESuperTypes()->push_back(getActivityNode_EClass());
	m_createLinkAction_EClass->getESuperTypes()->push_back(getWriteLinkAction_EClass());
	m_createLinkObjectAction_EClass->getESuperTypes()->push_back(getCreateLinkAction_EClass());
	m_createObjectAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_dataStoreNode_EClass->getESuperTypes()->push_back(getCentralBufferNode_EClass());
	m_dataType_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_decisionNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_dependency_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_dependency_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_deployedArtifact_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_deployment_EClass->getESuperTypes()->push_back(getDependency_EClass());
	m_deploymentSpecification_EClass->getESuperTypes()->push_back(getArtifact_EClass());
	m_deploymentTarget_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_destroyLinkAction_EClass->getESuperTypes()->push_back(getWriteLinkAction_EClass());
	m_destroyObjectAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_destructionOccurrenceSpecification_EClass->getESuperTypes()->push_back(getMessageOccurrenceSpecification_EClass());
	m_device_EClass->getESuperTypes()->push_back(getNode_EClass());
	m_directedRelationship_EClass->getESuperTypes()->push_back(getRelationship_EClass());
	m_duration_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_durationConstraint_EClass->getESuperTypes()->push_back(getIntervalConstraint_EClass());
	m_durationInterval_EClass->getESuperTypes()->push_back(getInterval_EClass());
	m_durationObservation_EClass->getESuperTypes()->push_back(getObservation_EClass());
	m_element_EClass->getESuperTypes()->push_back(ecore::EcorePackage::eInstance()->getEModelElement_EClass());
	m_element_EClass->getESuperTypes()->push_back(getObject_EClass());
	m_elementImport_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_encapsulatedClassifier_EClass->getESuperTypes()->push_back(getStructuredClassifier_EClass());
	m_enumeration_EClass->getESuperTypes()->push_back(getDataType_EClass());
	m_enumerationLiteral_EClass->getESuperTypes()->push_back(getInstanceSpecification_EClass());
	m_event_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_exceptionHandler_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_executableNode_EClass->getESuperTypes()->push_back(getActivityNode_EClass());
	m_executionEnvironment_EClass->getESuperTypes()->push_back(getNode_EClass());
	m_executionOccurrenceSpecification_EClass->getESuperTypes()->push_back(getOccurrenceSpecification_EClass());
	m_executionSpecification_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_expansionNode_EClass->getESuperTypes()->push_back(getObjectNode_EClass());
	m_expansionRegion_EClass->getESuperTypes()->push_back(getStructuredActivityNode_EClass());
	m_expression_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_extend_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_extend_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_extension_EClass->getESuperTypes()->push_back(getAssociation_EClass());
	m_extensionEnd_EClass->getESuperTypes()->push_back(getProperty_EClass());
	m_extensionPoint_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_factory_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_feature_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_finalNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_finalState_EClass->getESuperTypes()->push_back(getState_EClass());
	m_flowFinalNode_EClass->getESuperTypes()->push_back(getFinalNode_EClass());
	m_forkNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_functionBehavior_EClass->getESuperTypes()->push_back(getOpaqueBehavior_EClass());
	m_gate_EClass->getESuperTypes()->push_back(getMessageEnd_EClass());
	m_generalOrdering_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_generalization_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_generalizationSet_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_image_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_include_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_include_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_informationFlow_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_informationFlow_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_informationItem_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_initialNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_inputPin_EClass->getESuperTypes()->push_back(getPin_EClass());
	m_instanceSpecification_EClass->getESuperTypes()->push_back(getDeployedArtifact_EClass());
	m_instanceSpecification_EClass->getESuperTypes()->push_back(getDeploymentTarget_EClass());
	m_instanceSpecification_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_instanceValue_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_interaction_EClass->getESuperTypes()->push_back(getBehavior_EClass());
	m_interaction_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_interactionConstraint_EClass->getESuperTypes()->push_back(getConstraint_EClass());
	m_interactionFragment_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_interactionOperand_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_interactionOperand_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_interactionUse_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_interface_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_interfaceRealization_EClass->getESuperTypes()->push_back(getRealization_EClass());
	m_interruptibleActivityRegion_EClass->getESuperTypes()->push_back(getActivityGroup_EClass());
	m_interval_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_intervalConstraint_EClass->getESuperTypes()->push_back(getConstraint_EClass());
	m_invocationAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_joinNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_lifeline_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_linkAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_linkEndCreationData_EClass->getESuperTypes()->push_back(getLinkEndData_EClass());
	m_linkEndData_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_linkEndDestructionData_EClass->getESuperTypes()->push_back(getLinkEndData_EClass());
	m_literalBoolean_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_literalInteger_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_literalNull_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_literalReal_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_literalSpecification_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_literalString_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_literalUnlimitedNatural_EClass->getESuperTypes()->push_back(getLiteralSpecification_EClass());
	m_loopNode_EClass->getESuperTypes()->push_back(getStructuredActivityNode_EClass());
	m_manifestation_EClass->getESuperTypes()->push_back(getAbstraction_EClass());
	m_mergeNode_EClass->getESuperTypes()->push_back(getControlNode_EClass());
	m_message_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_messageEnd_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_messageEvent_EClass->getESuperTypes()->push_back(getEvent_EClass());
	m_messageOccurrenceSpecification_EClass->getESuperTypes()->push_back(getMessageEnd_EClass());
	m_messageOccurrenceSpecification_EClass->getESuperTypes()->push_back(getOccurrenceSpecification_EClass());
	m_model_EClass->getESuperTypes()->push_back(getPackage_EClass());
	m_multiplicityElement_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_namedElement_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_namespace_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_node_EClass->getESuperTypes()->push_back(getClass_EClass());
	m_node_EClass->getESuperTypes()->push_back(getDeploymentTarget_EClass());
	m_objectFlow_EClass->getESuperTypes()->push_back(getActivityEdge_EClass());
	m_objectNode_EClass->getESuperTypes()->push_back(getActivityNode_EClass());
	m_objectNode_EClass->getESuperTypes()->push_back(getTypedElement_EClass());
	m_observation_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_occurrenceSpecification_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_opaqueAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_opaqueBehavior_EClass->getESuperTypes()->push_back(getBehavior_EClass());
	m_opaqueExpression_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_operation_EClass->getESuperTypes()->push_back(getBehavioralFeature_EClass());
	m_operation_EClass->getESuperTypes()->push_back(getParameterableElement_EClass());
	m_operation_EClass->getESuperTypes()->push_back(getTemplateableElement_EClass());
	m_operationTemplateParameter_EClass->getESuperTypes()->push_back(getTemplateParameter_EClass());
	m_outputPin_EClass->getESuperTypes()->push_back(getPin_EClass());
	m_package_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_package_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_package_EClass->getESuperTypes()->push_back(getTemplateableElement_EClass());
	m_packageImport_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_packageMerge_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_packageableElement_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_packageableElement_EClass->getESuperTypes()->push_back(getParameterableElement_EClass());
	m_parameter_EClass->getESuperTypes()->push_back(getConnectableElement_EClass());
	m_parameter_EClass->getESuperTypes()->push_back(getMultiplicityElement_EClass());
	m_parameterSet_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_parameterableElement_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_partDecomposition_EClass->getESuperTypes()->push_back(getInteractionUse_EClass());
	m_pin_EClass->getESuperTypes()->push_back(getMultiplicityElement_EClass());
	m_pin_EClass->getESuperTypes()->push_back(getObjectNode_EClass());
	m_port_EClass->getESuperTypes()->push_back(getProperty_EClass());
	m_primitiveType_EClass->getESuperTypes()->push_back(getDataType_EClass());
	m_profile_EClass->getESuperTypes()->push_back(getPackage_EClass());
	m_profileApplication_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_property_EClass->getESuperTypes()->push_back(getConnectableElement_EClass());
	m_property_EClass->getESuperTypes()->push_back(getDeploymentTarget_EClass());
	m_property_EClass->getESuperTypes()->push_back(getStructuralFeature_EClass());
	m_protocolConformance_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_protocolStateMachine_EClass->getESuperTypes()->push_back(getStateMachine_EClass());
	m_protocolTransition_EClass->getESuperTypes()->push_back(getTransition_EClass());
	m_pseudostate_EClass->getESuperTypes()->push_back(getVertex_EClass());
	m_qualifierValue_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_raiseExceptionAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readExtentAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readIsClassifiedObjectAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readLinkAction_EClass->getESuperTypes()->push_back(getLinkAction_EClass());
	m_readLinkObjectEndAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readLinkObjectEndQualifierAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readSelfAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_readStructuralFeatureAction_EClass->getESuperTypes()->push_back(getStructuralFeatureAction_EClass());
	m_readVariableAction_EClass->getESuperTypes()->push_back(getVariableAction_EClass());
	m_realization_EClass->getESuperTypes()->push_back(getAbstraction_EClass());
	m_reception_EClass->getESuperTypes()->push_back(getBehavioralFeature_EClass());
	m_reclassifyObjectAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_redefinableElement_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_redefinableTemplateSignature_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_redefinableTemplateSignature_EClass->getESuperTypes()->push_back(getTemplateSignature_EClass());
	m_reduceAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_region_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_region_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_relationship_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_removeStructuralFeatureValueAction_EClass->getESuperTypes()->push_back(getWriteStructuralFeatureAction_EClass());
	m_removeVariableValueAction_EClass->getESuperTypes()->push_back(getWriteVariableAction_EClass());
	m_replyAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_sendObjectAction_EClass->getESuperTypes()->push_back(getInvocationAction_EClass());
	m_sendSignalAction_EClass->getESuperTypes()->push_back(getInvocationAction_EClass());
	m_sequenceNode_EClass->getESuperTypes()->push_back(getStructuredActivityNode_EClass());
	m_signal_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_signalEvent_EClass->getESuperTypes()->push_back(getMessageEvent_EClass());
	m_slot_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_startClassifierBehaviorAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_startObjectBehaviorAction_EClass->getESuperTypes()->push_back(getCallAction_EClass());
	m_state_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_state_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_state_EClass->getESuperTypes()->push_back(getVertex_EClass());
	m_stateInvariant_EClass->getESuperTypes()->push_back(getInteractionFragment_EClass());
	m_stateMachine_EClass->getESuperTypes()->push_back(getBehavior_EClass());
	m_stereotype_EClass->getESuperTypes()->push_back(getClass_EClass());
	m_stringExpression_EClass->getESuperTypes()->push_back(getExpression_EClass());
	m_stringExpression_EClass->getESuperTypes()->push_back(getTemplateableElement_EClass());
	m_structuralFeature_EClass->getESuperTypes()->push_back(getFeature_EClass());
	m_structuralFeature_EClass->getESuperTypes()->push_back(getMultiplicityElement_EClass());
	m_structuralFeature_EClass->getESuperTypes()->push_back(getTypedElement_EClass());
	m_structuralFeatureAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_structuredActivityNode_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_structuredActivityNode_EClass->getESuperTypes()->push_back(getActivityGroup_EClass());
	m_structuredActivityNode_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_structuredClassifier_EClass->getESuperTypes()->push_back(getClassifier_EClass());
	m_substitution_EClass->getESuperTypes()->push_back(getRealization_EClass());
	m_templateBinding_EClass->getESuperTypes()->push_back(getDirectedRelationship_EClass());
	m_templateParameter_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_templateParameterSubstitution_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_templateSignature_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_templateableElement_EClass->getESuperTypes()->push_back(getElement_EClass());
	m_testIdentityAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_timeConstraint_EClass->getESuperTypes()->push_back(getIntervalConstraint_EClass());
	m_timeEvent_EClass->getESuperTypes()->push_back(getEvent_EClass());
	m_timeExpression_EClass->getESuperTypes()->push_back(getValueSpecification_EClass());
	m_timeInterval_EClass->getESuperTypes()->push_back(getInterval_EClass());
	m_timeObservation_EClass->getESuperTypes()->push_back(getObservation_EClass());
	m_transition_EClass->getESuperTypes()->push_back(getNamespace_EClass());
	m_transition_EClass->getESuperTypes()->push_back(getRedefinableElement_EClass());
	m_trigger_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_type_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_typedElement_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_unmarshallAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_usage_EClass->getESuperTypes()->push_back(getDependency_EClass());
	m_useCase_EClass->getESuperTypes()->push_back(getBehavioredClassifier_EClass());
	m_valuePin_EClass->getESuperTypes()->push_back(getInputPin_EClass());
	m_valueSpecification_EClass->getESuperTypes()->push_back(getPackageableElement_EClass());
	m_valueSpecification_EClass->getESuperTypes()->push_back(getTypedElement_EClass());
	m_valueSpecificationAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_variable_EClass->getESuperTypes()->push_back(getConnectableElement_EClass());
	m_variable_EClass->getESuperTypes()->push_back(getMultiplicityElement_EClass());
	m_variableAction_EClass->getESuperTypes()->push_back(getAction_EClass());
	m_vertex_EClass->getESuperTypes()->push_back(getNamedElement_EClass());
	m_writeLinkAction_EClass->getESuperTypes()->push_back(getLinkAction_EClass());
	m_writeStructuralFeatureAction_EClass->getESuperTypes()->push_back(getStructuralFeatureAction_EClass());
	m_writeVariableAction_EClass->getESuperTypes()->push_back(getVariableAction_EClass());
	

 	// Initialize classes and features; add operations and parameters
	initializeAbstractionContent();
	initializeAcceptCallActionContent();
	initializeAcceptEventActionContent();
	initializeActionContent();
	initializeActionExecutionSpecificationContent();
	initializeActionInputPinContent();
	initializeActivityContent();
	initializeActivityContentContent();
	initializeActivityEdgeContent();
	initializeActivityFinalNodeContent();
	initializeActivityGroupContent();
	initializeActivityNodeContent();
	initializeActivityParameterNodeContent();
	initializeActivityPartitionContent();
	initializeActorContent();
	initializeAddStructuralFeatureValueActionContent();
	initializeAddVariableValueActionContent();
	initializeAnyReceiveEventContent();
	initializeArtifactContent();
	initializeAssociationContent();
	initializeAssociationClassContent();
	initializeBehaviorContent();
	initializeBehaviorExecutionSpecificationContent();
	initializeBehavioralFeatureContent();
	initializeBehavioredClassifierContent();
	initializeBroadcastSignalActionContent();
	initializeCallActionContent();
	initializeCallBehaviorActionContent();
	initializeCallEventContent();
	initializeCallOperationActionContent();
	initializeCentralBufferNodeContent();
	initializeChangeEventContent();
	initializeClassContent();
	initializeClassifierContent();
	initializeClassifierTemplateParameterContent();
	initializeClauseContent();
	initializeClearAssociationActionContent();
	initializeClearStructuralFeatureActionContent();
	initializeClearVariableActionContent();
	initializeCollaborationContent();
	initializeCollaborationUseContent();
	initializeCombinedFragmentContent();
	initializeCommentContent();
	initializeCommunicationPathContent();
	initializeComponentContent();
	initializeComponentRealizationContent();
	initializeConditionalNodeContent();
	initializeConnectableElementContent();
	initializeConnectableElementTemplateParameterContent();
	initializeConnectionPointReferenceContent();
	initializeConnectorContent();
	initializeConnectorEndContent();
	initializeConsiderIgnoreFragmentContent();
	initializeConstraintContent();
	initializeContinuationContent();
	initializeControlFlowContent();
	initializeControlNodeContent();
	initializeCreateLinkActionContent();
	initializeCreateLinkObjectActionContent();
	initializeCreateObjectActionContent();
	initializeDataStoreNodeContent();
	initializeDataTypeContent();
	initializeDecisionNodeContent();
	initializeDependencyContent();
	initializeDeployedArtifactContent();
	initializeDeploymentContent();
	initializeDeploymentSpecificationContent();
	initializeDeploymentTargetContent();
	initializeDestroyLinkActionContent();
	initializeDestroyObjectActionContent();
	initializeDestructionOccurrenceSpecificationContent();
	initializeDeviceContent();
	initializeDirectedRelationshipContent();
	initializeDurationContent();
	initializeDurationConstraintContent();
	initializeDurationIntervalContent();
	initializeDurationObservationContent();
	initializeElementContent();
	initializeElementImportContent();
	initializeEncapsulatedClassifierContent();
	initializeEnumerationContent();
	initializeEnumerationLiteralContent();
	initializeEventContent();
	initializeExceptionHandlerContent();
	initializeExecutableNodeContent();
	initializeExecutionEnvironmentContent();
	initializeExecutionOccurrenceSpecificationContent();
	initializeExecutionSpecificationContent();
	initializeExpansionNodeContent();
	initializeExpansionRegionContent();
	initializeExpressionContent();
	initializeExtendContent();
	initializeExtensionContent();
	initializeExtensionEndContent();
	initializeExtensionPointContent();
	initializeFactoryContent();
	initializeFeatureContent();
	initializeFinalNodeContent();
	initializeFinalStateContent();
	initializeFlowFinalNodeContent();
	initializeForkNodeContent();
	initializeFunctionBehaviorContent();
	initializeGateContent();
	initializeGeneralOrderingContent();
	initializeGeneralizationContent();
	initializeGeneralizationSetContent();
	initializeImageContent();
	initializeIncludeContent();
	initializeInformationFlowContent();
	initializeInformationItemContent();
	initializeInitialNodeContent();
	initializeInputPinContent();
	initializeInstanceSpecificationContent();
	initializeInstanceValueContent();
	initializeInteractionContent();
	initializeInteractionConstraintContent();
	initializeInteractionFragmentContent();
	initializeInteractionOperandContent();
	initializeInteractionUseContent();
	initializeInterfaceContent();
	initializeInterfaceRealizationContent();
	initializeInterruptibleActivityRegionContent();
	initializeIntervalContent();
	initializeIntervalConstraintContent();
	initializeInvocationActionContent();
	initializeJoinNodeContent();
	initializeLifelineContent();
	initializeLinkActionContent();
	initializeLinkEndCreationDataContent();
	initializeLinkEndDataContent();
	initializeLinkEndDestructionDataContent();
	initializeLiteralBooleanContent();
	initializeLiteralIntegerContent();
	initializeLiteralNullContent();
	initializeLiteralRealContent();
	initializeLiteralSpecificationContent();
	initializeLiteralStringContent();
	initializeLiteralUnlimitedNaturalContent();
	initializeLoopNodeContent();
	initializeManifestationContent();
	initializeMergeNodeContent();
	initializeMessageContent();
	initializeMessageEndContent();
	initializeMessageEventContent();
	initializeMessageOccurrenceSpecificationContent();
	initializeModelContent();
	initializeMultiplicityElementContent();
	initializeNamedElementContent();
	initializeNamespaceContent();
	initializeNodeContent();
	initializeObjectContent();
	initializeObjectFlowContent();
	initializeObjectNodeContent();
	initializeObservationContent();
	initializeOccurrenceSpecificationContent();
	initializeOpaqueActionContent();
	initializeOpaqueBehaviorContent();
	initializeOpaqueExpressionContent();
	initializeOperationContent();
	initializeOperationTemplateParameterContent();
	initializeOutputPinContent();
	initializePackageContent();
	initializePackageImportContent();
	initializePackageMergeContent();
	initializePackageableElementContent();
	initializeParameterContent();
	initializeParameterSetContent();
	initializeParameterableElementContent();
	initializePartDecompositionContent();
	initializePinContent();
	initializePortContent();
	initializePrimitiveTypeContent();
	initializeProfileContent();
	initializeProfileApplicationContent();
	initializePropertyContent();
	initializeProtocolConformanceContent();
	initializeProtocolStateMachineContent();
	initializeProtocolTransitionContent();
	initializePseudostateContent();
	initializeQualifierValueContent();
	initializeRaiseExceptionActionContent();
	initializeReadExtentActionContent();
	initializeReadIsClassifiedObjectActionContent();
	initializeReadLinkActionContent();
	initializeReadLinkObjectEndActionContent();
	initializeReadLinkObjectEndQualifierActionContent();
	initializeReadSelfActionContent();
	initializeReadStructuralFeatureActionContent();
	initializeReadVariableActionContent();
	initializeRealizationContent();
	initializeReceptionContent();
	initializeReclassifyObjectActionContent();
	initializeRedefinableElementContent();
	initializeRedefinableTemplateSignatureContent();
	initializeReduceActionContent();
	initializeRegionContent();
	initializeRelationshipContent();
	initializeRemoveStructuralFeatureValueActionContent();
	initializeRemoveVariableValueActionContent();
	initializeReplyActionContent();
	initializeSendObjectActionContent();
	initializeSendSignalActionContent();
	initializeSequenceNodeContent();
	initializeSignalContent();
	initializeSignalEventContent();
	initializeSlotContent();
	initializeStartClassifierBehaviorActionContent();
	initializeStartObjectBehaviorActionContent();
	initializeStateContent();
	initializeStateInvariantContent();
	initializeStateMachineContent();
	initializeStereotypeContent();
	initializeStringExpressionContent();
	initializeStructuralFeatureContent();
	initializeStructuralFeatureActionContent();
	initializeStructuredActivityNodeContent();
	initializeStructuredClassifierContent();
	initializeSubstitutionContent();
	initializeTemplateBindingContent();
	initializeTemplateParameterContent();
	initializeTemplateParameterSubstitutionContent();
	initializeTemplateSignatureContent();
	initializeTemplateableElementContent();
	initializeTestIdentityActionContent();
	initializeTimeConstraintContent();
	initializeTimeEventContent();
	initializeTimeExpressionContent();
	initializeTimeIntervalContent();
	initializeTimeObservationContent();
	initializeTransitionContent();
	initializeTriggerContent();
	initializeTypeContent();
	initializeTypedElementContent();
	initializeUnmarshallActionContent();
	initializeUsageContent();
	initializeUseCaseContent();
	initializeValuePinContent();
	initializeValueSpecificationContent();
	initializeValueSpecificationActionContent();
	initializeVariableContent();
	initializeVariableActionContent();
	initializeVertexContent();
	initializeWriteLinkActionContent();
	initializeWriteStructuralFeatureActionContent();
	initializeWriteVariableActionContent();

	initializePackageEDataTypes();
}

void UmlPackageImpl::initializeAbstractionContent()
{
	m_abstraction_EClass->setName("Abstraction");
	m_abstraction_EClass->setAbstract(false);
	m_abstraction_EClass->setInterface(false);
	
	
	m_abstraction_EReference_mapping->setName("mapping");
	m_abstraction_EReference_mapping->setEType(getOpaqueExpression_EClass());
	m_abstraction_EReference_mapping->setLowerBound(0);
	m_abstraction_EReference_mapping->setUpperBound(1);
	m_abstraction_EReference_mapping->setTransient(false);
	m_abstraction_EReference_mapping->setVolatile(false);
	m_abstraction_EReference_mapping->setChangeable(true);
	m_abstraction_EReference_mapping->setUnsettable(false);
	m_abstraction_EReference_mapping->setUnique(true);
	m_abstraction_EReference_mapping->setDerived(false);
	m_abstraction_EReference_mapping->setOrdered(false);
	m_abstraction_EReference_mapping->setContainment(true);
	m_abstraction_EReference_mapping->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_abstraction_EReference_mapping->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_abstraction_EReference_mapping->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeAcceptCallActionContent()
{
	m_acceptCallAction_EClass->setName("AcceptCallAction");
	m_acceptCallAction_EClass->setAbstract(false);
	m_acceptCallAction_EClass->setInterface(false);
	
	
	m_acceptCallAction_EReference_returnInformation->setName("returnInformation");
	m_acceptCallAction_EReference_returnInformation->setEType(getOutputPin_EClass());
	m_acceptCallAction_EReference_returnInformation->setLowerBound(1);
	m_acceptCallAction_EReference_returnInformation->setUpperBound(1);
	m_acceptCallAction_EReference_returnInformation->setTransient(false);
	m_acceptCallAction_EReference_returnInformation->setVolatile(false);
	m_acceptCallAction_EReference_returnInformation->setChangeable(true);
	m_acceptCallAction_EReference_returnInformation->setUnsettable(false);
	m_acceptCallAction_EReference_returnInformation->setUnique(true);
	m_acceptCallAction_EReference_returnInformation->setDerived(false);
	m_acceptCallAction_EReference_returnInformation->setOrdered(false);
	m_acceptCallAction_EReference_returnInformation->setContainment(true);
	m_acceptCallAction_EReference_returnInformation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_acceptCallAction_EReference_returnInformation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_acceptCallAction_EReference_returnInformation->setEOpposite(otherEnd);
	    }
	}
	
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setName("result_pins");
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setUnique(true);
	m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_result_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setName("trigger_call_event");
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setUnique(true);
	m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_trigger_call_event_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setName("unmarshall");
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setUnique(true);
	m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptCallAction_EOperation_unmarshall_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAcceptEventActionContent()
{
	m_acceptEventAction_EClass->setName("AcceptEventAction");
	m_acceptEventAction_EClass->setAbstract(false);
	m_acceptEventAction_EClass->setInterface(false);
	
	m_acceptEventAction_EAttribute_isUnmarshall = getAcceptEventAction_EAttribute_isUnmarshall();
	m_acceptEventAction_EAttribute_isUnmarshall->setName("isUnmarshall");
	m_acceptEventAction_EAttribute_isUnmarshall->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_acceptEventAction_EAttribute_isUnmarshall->setLowerBound(1);
	m_acceptEventAction_EAttribute_isUnmarshall->setUpperBound(1);
	m_acceptEventAction_EAttribute_isUnmarshall->setTransient(false);
	m_acceptEventAction_EAttribute_isUnmarshall->setVolatile(false);
	m_acceptEventAction_EAttribute_isUnmarshall->setChangeable(true);
	m_acceptEventAction_EAttribute_isUnmarshall->setUnsettable(false);
	m_acceptEventAction_EAttribute_isUnmarshall->setUnique(true);
	m_acceptEventAction_EAttribute_isUnmarshall->setDerived(false);
	m_acceptEventAction_EAttribute_isUnmarshall->setOrdered(false);
	m_acceptEventAction_EAttribute_isUnmarshall->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_acceptEventAction_EAttribute_isUnmarshall->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_acceptEventAction_EReference_result->setName("result");
	m_acceptEventAction_EReference_result->setEType(getOutputPin_EClass());
	m_acceptEventAction_EReference_result->setLowerBound(0);
	m_acceptEventAction_EReference_result->setUpperBound(-1);
	m_acceptEventAction_EReference_result->setTransient(false);
	m_acceptEventAction_EReference_result->setVolatile(false);
	m_acceptEventAction_EReference_result->setChangeable(true);
	m_acceptEventAction_EReference_result->setUnsettable(false);
	m_acceptEventAction_EReference_result->setUnique(true);
	m_acceptEventAction_EReference_result->setDerived(false);
	m_acceptEventAction_EReference_result->setOrdered(true);
	m_acceptEventAction_EReference_result->setContainment(true);
	m_acceptEventAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_acceptEventAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_acceptEventAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_acceptEventAction_EReference_trigger->setName("trigger");
	m_acceptEventAction_EReference_trigger->setEType(getTrigger_EClass());
	m_acceptEventAction_EReference_trigger->setLowerBound(1);
	m_acceptEventAction_EReference_trigger->setUpperBound(-1);
	m_acceptEventAction_EReference_trigger->setTransient(false);
	m_acceptEventAction_EReference_trigger->setVolatile(false);
	m_acceptEventAction_EReference_trigger->setChangeable(true);
	m_acceptEventAction_EReference_trigger->setUnsettable(false);
	m_acceptEventAction_EReference_trigger->setUnique(true);
	m_acceptEventAction_EReference_trigger->setDerived(false);
	m_acceptEventAction_EReference_trigger->setOrdered(false);
	m_acceptEventAction_EReference_trigger->setContainment(true);
	m_acceptEventAction_EReference_trigger->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_acceptEventAction_EReference_trigger->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_acceptEventAction_EReference_trigger->setEOpposite(otherEnd);
	    }
	}
	
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setName("conforming_type");
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setUnique(true);
	m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_conforming_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setName("no_input_pins");
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setUnique(true);
	m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_no_input_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setName("no_output_pins");
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_no_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setName("one_output_pin");
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setUnique(true);
	m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_one_output_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setName("unmarshall_signal_events");
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setLowerBound(0);
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setUpperBound(1);
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setUnique(true);
	m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_acceptEventAction_EOperation_unmarshall_signal_events_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActionContent()
{
	m_action_EClass->setName("Action");
	m_action_EClass->setAbstract(true);
	m_action_EClass->setInterface(false);
	
	m_action_EAttribute_isLocallyReentrant = getAction_EAttribute_isLocallyReentrant();
	m_action_EAttribute_isLocallyReentrant->setName("isLocallyReentrant");
	m_action_EAttribute_isLocallyReentrant->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_action_EAttribute_isLocallyReentrant->setLowerBound(1);
	m_action_EAttribute_isLocallyReentrant->setUpperBound(1);
	m_action_EAttribute_isLocallyReentrant->setTransient(false);
	m_action_EAttribute_isLocallyReentrant->setVolatile(false);
	m_action_EAttribute_isLocallyReentrant->setChangeable(true);
	m_action_EAttribute_isLocallyReentrant->setUnsettable(false);
	m_action_EAttribute_isLocallyReentrant->setUnique(true);
	m_action_EAttribute_isLocallyReentrant->setDerived(false);
	m_action_EAttribute_isLocallyReentrant->setOrdered(false);
	m_action_EAttribute_isLocallyReentrant->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_action_EAttribute_isLocallyReentrant->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_action_EReference_context->setName("context");
	m_action_EReference_context->setEType(getClassifier_EClass());
	m_action_EReference_context->setLowerBound(0);
	m_action_EReference_context->setUpperBound(1);
	m_action_EReference_context->setTransient(true);
	m_action_EReference_context->setVolatile(true);
	m_action_EReference_context->setChangeable(false);
	m_action_EReference_context->setUnsettable(false);
	m_action_EReference_context->setUnique(true);
	m_action_EReference_context->setDerived(true);
	m_action_EReference_context->setOrdered(false);
	m_action_EReference_context->setContainment(false);
	m_action_EReference_context->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_action_EReference_context->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_action_EReference_context->setEOpposite(otherEnd);
	    }
	}
	m_action_EReference_input->setName("input");
	m_action_EReference_input->setEType(getInputPin_EClass());
	m_action_EReference_input->setLowerBound(0);
	m_action_EReference_input->setUpperBound(-1);
	m_action_EReference_input->setTransient(true);
	m_action_EReference_input->setVolatile(true);
	m_action_EReference_input->setChangeable(false);
	m_action_EReference_input->setUnsettable(false);
	m_action_EReference_input->setUnique(true);
	m_action_EReference_input->setDerived(true);
	m_action_EReference_input->setOrdered(true);
	m_action_EReference_input->setContainment(false);
	m_action_EReference_input->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_action_EReference_input->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_action_EReference_input->setEOpposite(otherEnd);
	    }
	}
	m_action_EReference_localPostcondition->setName("localPostcondition");
	m_action_EReference_localPostcondition->setEType(getConstraint_EClass());
	m_action_EReference_localPostcondition->setLowerBound(0);
	m_action_EReference_localPostcondition->setUpperBound(-1);
	m_action_EReference_localPostcondition->setTransient(false);
	m_action_EReference_localPostcondition->setVolatile(false);
	m_action_EReference_localPostcondition->setChangeable(true);
	m_action_EReference_localPostcondition->setUnsettable(false);
	m_action_EReference_localPostcondition->setUnique(true);
	m_action_EReference_localPostcondition->setDerived(false);
	m_action_EReference_localPostcondition->setOrdered(false);
	m_action_EReference_localPostcondition->setContainment(true);
	m_action_EReference_localPostcondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_action_EReference_localPostcondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_action_EReference_localPostcondition->setEOpposite(otherEnd);
	    }
	}
	m_action_EReference_localPrecondition->setName("localPrecondition");
	m_action_EReference_localPrecondition->setEType(getConstraint_EClass());
	m_action_EReference_localPrecondition->setLowerBound(0);
	m_action_EReference_localPrecondition->setUpperBound(-1);
	m_action_EReference_localPrecondition->setTransient(false);
	m_action_EReference_localPrecondition->setVolatile(false);
	m_action_EReference_localPrecondition->setChangeable(true);
	m_action_EReference_localPrecondition->setUnsettable(false);
	m_action_EReference_localPrecondition->setUnique(true);
	m_action_EReference_localPrecondition->setDerived(false);
	m_action_EReference_localPrecondition->setOrdered(false);
	m_action_EReference_localPrecondition->setContainment(true);
	m_action_EReference_localPrecondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_action_EReference_localPrecondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_action_EReference_localPrecondition->setEOpposite(otherEnd);
	    }
	}
	m_action_EReference_output->setName("output");
	m_action_EReference_output->setEType(getOutputPin_EClass());
	m_action_EReference_output->setLowerBound(0);
	m_action_EReference_output->setUpperBound(-1);
	m_action_EReference_output->setTransient(true);
	m_action_EReference_output->setVolatile(true);
	m_action_EReference_output->setChangeable(false);
	m_action_EReference_output->setUnsettable(false);
	m_action_EReference_output->setUnique(true);
	m_action_EReference_output->setDerived(true);
	m_action_EReference_output->setOrdered(true);
	m_action_EReference_output->setContainment(false);
	m_action_EReference_output->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_action_EReference_output->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_action_EReference_output->setEOpposite(otherEnd);
	    }
	}
	
	m_action_EOperation_allActions->setEType(getAction_EClass());
	m_action_EOperation_allActions->setName("allActions");
	m_action_EOperation_allActions->setLowerBound(0);
	m_action_EOperation_allActions->setUpperBound(-1);
	m_action_EOperation_allActions->setUnique(true);
	m_action_EOperation_allActions->setOrdered(false);
	
	
	m_action_EOperation_allOwnedNodes->setEType(getActivityNode_EClass());
	m_action_EOperation_allOwnedNodes->setName("allOwnedNodes");
	m_action_EOperation_allOwnedNodes->setLowerBound(0);
	m_action_EOperation_allOwnedNodes->setUpperBound(-1);
	m_action_EOperation_allOwnedNodes->setUnique(true);
	m_action_EOperation_allOwnedNodes->setOrdered(false);
	
	
	m_action_EOperation_containingBehavior->setEType(getBehavior_EClass());
	m_action_EOperation_containingBehavior->setName("containingBehavior");
	m_action_EOperation_containingBehavior->setLowerBound(0);
	m_action_EOperation_containingBehavior->setUpperBound(1);
	m_action_EOperation_containingBehavior->setUnique(true);
	m_action_EOperation_containingBehavior->setOrdered(false);
	
	
	m_action_EOperation_getContext->setEType(getClassifier_EClass());
	m_action_EOperation_getContext->setName("getContext");
	m_action_EOperation_getContext->setLowerBound(0);
	m_action_EOperation_getContext->setUpperBound(1);
	m_action_EOperation_getContext->setUnique(true);
	m_action_EOperation_getContext->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeActionExecutionSpecificationContent()
{
	m_actionExecutionSpecification_EClass->setName("ActionExecutionSpecification");
	m_actionExecutionSpecification_EClass->setAbstract(false);
	m_actionExecutionSpecification_EClass->setInterface(false);
	
	
	m_actionExecutionSpecification_EReference_action->setName("action");
	m_actionExecutionSpecification_EReference_action->setEType(getAction_EClass());
	m_actionExecutionSpecification_EReference_action->setLowerBound(1);
	m_actionExecutionSpecification_EReference_action->setUpperBound(1);
	m_actionExecutionSpecification_EReference_action->setTransient(false);
	m_actionExecutionSpecification_EReference_action->setVolatile(false);
	m_actionExecutionSpecification_EReference_action->setChangeable(true);
	m_actionExecutionSpecification_EReference_action->setUnsettable(false);
	m_actionExecutionSpecification_EReference_action->setUnique(true);
	m_actionExecutionSpecification_EReference_action->setDerived(false);
	m_actionExecutionSpecification_EReference_action->setOrdered(false);
	m_actionExecutionSpecification_EReference_action->setContainment(false);
	m_actionExecutionSpecification_EReference_action->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_actionExecutionSpecification_EReference_action->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_actionExecutionSpecification_EReference_action->setEOpposite(otherEnd);
	    }
	}
	
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setName("action_referenced");
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setLowerBound(0);
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setUpperBound(1);
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setUnique(true);
	m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionExecutionSpecification_EOperation_action_referenced_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActionInputPinContent()
{
	m_actionInputPin_EClass->setName("ActionInputPin");
	m_actionInputPin_EClass->setAbstract(false);
	m_actionInputPin_EClass->setInterface(false);
	
	
	m_actionInputPin_EReference_fromAction->setName("fromAction");
	m_actionInputPin_EReference_fromAction->setEType(getAction_EClass());
	m_actionInputPin_EReference_fromAction->setLowerBound(1);
	m_actionInputPin_EReference_fromAction->setUpperBound(1);
	m_actionInputPin_EReference_fromAction->setTransient(false);
	m_actionInputPin_EReference_fromAction->setVolatile(false);
	m_actionInputPin_EReference_fromAction->setChangeable(true);
	m_actionInputPin_EReference_fromAction->setUnsettable(false);
	m_actionInputPin_EReference_fromAction->setUnique(true);
	m_actionInputPin_EReference_fromAction->setDerived(false);
	m_actionInputPin_EReference_fromAction->setOrdered(false);
	m_actionInputPin_EReference_fromAction->setContainment(true);
	m_actionInputPin_EReference_fromAction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_actionInputPin_EReference_fromAction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_actionInputPin_EReference_fromAction->setEOpposite(otherEnd);
	    }
	}
	
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setName("input_pin");
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setUnique(true);
	m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_input_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setName("no_control_or_object_flow");
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setLowerBound(0);
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setUpperBound(1);
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setUnique(true);
	m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_no_control_or_object_flow_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setName("one_output_pin");
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setUnique(true);
	m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actionInputPin_EOperation_one_output_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActivityContent()
{
	m_activity_EClass->setName("Activity");
	m_activity_EClass->setAbstract(false);
	m_activity_EClass->setInterface(false);
	
	m_activity_EAttribute_isReadOnly = getActivity_EAttribute_isReadOnly();
	m_activity_EAttribute_isReadOnly->setName("isReadOnly");
	m_activity_EAttribute_isReadOnly->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_activity_EAttribute_isReadOnly->setLowerBound(1);
	m_activity_EAttribute_isReadOnly->setUpperBound(1);
	m_activity_EAttribute_isReadOnly->setTransient(false);
	m_activity_EAttribute_isReadOnly->setVolatile(false);
	m_activity_EAttribute_isReadOnly->setChangeable(true);
	m_activity_EAttribute_isReadOnly->setUnsettable(false);
	m_activity_EAttribute_isReadOnly->setUnique(true);
	m_activity_EAttribute_isReadOnly->setDerived(false);
	m_activity_EAttribute_isReadOnly->setOrdered(false);
	m_activity_EAttribute_isReadOnly->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_activity_EAttribute_isReadOnly->setDefaultValueLiteral(defaultValue);
		}
	}
	m_activity_EAttribute_isSingleExecution = getActivity_EAttribute_isSingleExecution();
	m_activity_EAttribute_isSingleExecution->setName("isSingleExecution");
	m_activity_EAttribute_isSingleExecution->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_activity_EAttribute_isSingleExecution->setLowerBound(1);
	m_activity_EAttribute_isSingleExecution->setUpperBound(1);
	m_activity_EAttribute_isSingleExecution->setTransient(false);
	m_activity_EAttribute_isSingleExecution->setVolatile(false);
	m_activity_EAttribute_isSingleExecution->setChangeable(true);
	m_activity_EAttribute_isSingleExecution->setUnsettable(false);
	m_activity_EAttribute_isSingleExecution->setUnique(true);
	m_activity_EAttribute_isSingleExecution->setDerived(false);
	m_activity_EAttribute_isSingleExecution->setOrdered(false);
	m_activity_EAttribute_isSingleExecution->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_activity_EAttribute_isSingleExecution->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_activity_EReference_edge->setName("edge");
	m_activity_EReference_edge->setEType(getActivityEdge_EClass());
	m_activity_EReference_edge->setLowerBound(0);
	m_activity_EReference_edge->setUpperBound(-1);
	m_activity_EReference_edge->setTransient(false);
	m_activity_EReference_edge->setVolatile(false);
	m_activity_EReference_edge->setChangeable(true);
	m_activity_EReference_edge->setUnsettable(false);
	m_activity_EReference_edge->setUnique(true);
	m_activity_EReference_edge->setDerived(false);
	m_activity_EReference_edge->setOrdered(false);
	m_activity_EReference_edge->setContainment(true);
	m_activity_EReference_edge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_edge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_activity();
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_edge->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_group->setName("group");
	m_activity_EReference_group->setEType(getActivityGroup_EClass());
	m_activity_EReference_group->setLowerBound(0);
	m_activity_EReference_group->setUpperBound(-1);
	m_activity_EReference_group->setTransient(true);
	m_activity_EReference_group->setVolatile(true);
	m_activity_EReference_group->setChangeable(true);
	m_activity_EReference_group->setUnsettable(false);
	m_activity_EReference_group->setUnique(true);
	m_activity_EReference_group->setDerived(true);
	m_activity_EReference_group->setOrdered(false);
	m_activity_EReference_group->setContainment(true);
	m_activity_EReference_group->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_group->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityGroup_EReference_inActivity();
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_group->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_node->setName("node");
	m_activity_EReference_node->setEType(getActivityNode_EClass());
	m_activity_EReference_node->setLowerBound(0);
	m_activity_EReference_node->setUpperBound(-1);
	m_activity_EReference_node->setTransient(true);
	m_activity_EReference_node->setVolatile(true);
	m_activity_EReference_node->setChangeable(true);
	m_activity_EReference_node->setUnsettable(false);
	m_activity_EReference_node->setUnique(true);
	m_activity_EReference_node->setDerived(true);
	m_activity_EReference_node->setOrdered(false);
	m_activity_EReference_node->setContainment(true);
	m_activity_EReference_node->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_node->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_activity();
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_node->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_ownedGroup->setName("ownedGroup");
	m_activity_EReference_ownedGroup->setEType(getActivityGroup_EClass());
	m_activity_EReference_ownedGroup->setLowerBound(0);
	m_activity_EReference_ownedGroup->setUpperBound(-1);
	m_activity_EReference_ownedGroup->setTransient(false);
	m_activity_EReference_ownedGroup->setVolatile(false);
	m_activity_EReference_ownedGroup->setChangeable(true);
	m_activity_EReference_ownedGroup->setUnsettable(false);
	m_activity_EReference_ownedGroup->setUnique(true);
	m_activity_EReference_ownedGroup->setDerived(false);
	m_activity_EReference_ownedGroup->setOrdered(false);
	m_activity_EReference_ownedGroup->setContainment(true);
	m_activity_EReference_ownedGroup->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_ownedGroup->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_ownedGroup->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_ownedNode->setName("ownedNode");
	m_activity_EReference_ownedNode->setEType(getActivityNode_EClass());
	m_activity_EReference_ownedNode->setLowerBound(0);
	m_activity_EReference_ownedNode->setUpperBound(-1);
	m_activity_EReference_ownedNode->setTransient(false);
	m_activity_EReference_ownedNode->setVolatile(false);
	m_activity_EReference_ownedNode->setChangeable(true);
	m_activity_EReference_ownedNode->setUnsettable(false);
	m_activity_EReference_ownedNode->setUnique(true);
	m_activity_EReference_ownedNode->setDerived(false);
	m_activity_EReference_ownedNode->setOrdered(false);
	m_activity_EReference_ownedNode->setContainment(true);
	m_activity_EReference_ownedNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_ownedNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_ownedNode->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_partition->setName("partition");
	m_activity_EReference_partition->setEType(getActivityPartition_EClass());
	m_activity_EReference_partition->setLowerBound(0);
	m_activity_EReference_partition->setUpperBound(-1);
	m_activity_EReference_partition->setTransient(false);
	m_activity_EReference_partition->setVolatile(false);
	m_activity_EReference_partition->setChangeable(true);
	m_activity_EReference_partition->setUnsettable(false);
	m_activity_EReference_partition->setUnique(true);
	m_activity_EReference_partition->setDerived(false);
	m_activity_EReference_partition->setOrdered(false);
	m_activity_EReference_partition->setContainment(false);
	m_activity_EReference_partition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_partition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_partition->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_structuredNode->setName("structuredNode");
	m_activity_EReference_structuredNode->setEType(getStructuredActivityNode_EClass());
	m_activity_EReference_structuredNode->setLowerBound(0);
	m_activity_EReference_structuredNode->setUpperBound(-1);
	m_activity_EReference_structuredNode->setTransient(false);
	m_activity_EReference_structuredNode->setVolatile(false);
	m_activity_EReference_structuredNode->setChangeable(true);
	m_activity_EReference_structuredNode->setUnsettable(false);
	m_activity_EReference_structuredNode->setUnique(true);
	m_activity_EReference_structuredNode->setDerived(false);
	m_activity_EReference_structuredNode->setOrdered(false);
	m_activity_EReference_structuredNode->setContainment(true);
	m_activity_EReference_structuredNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_structuredNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_structuredNode->setEOpposite(otherEnd);
	    }
	}
	m_activity_EReference_variable->setName("variable");
	m_activity_EReference_variable->setEType(getVariable_EClass());
	m_activity_EReference_variable->setLowerBound(0);
	m_activity_EReference_variable->setUpperBound(-1);
	m_activity_EReference_variable->setTransient(false);
	m_activity_EReference_variable->setVolatile(false);
	m_activity_EReference_variable->setChangeable(true);
	m_activity_EReference_variable->setUnsettable(false);
	m_activity_EReference_variable->setUnique(true);
	m_activity_EReference_variable->setDerived(false);
	m_activity_EReference_variable->setOrdered(false);
	m_activity_EReference_variable->setContainment(true);
	m_activity_EReference_variable->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activity_EReference_variable->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getVariable_EReference_activityScope();
		if (otherEnd != nullptr)
	    {
	   		m_activity_EReference_variable->setEOpposite(otherEnd);
	    }
	}
	
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setName("maximum_one_parameter_node");
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setLowerBound(0);
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setUpperBound(1);
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setUnique(true);
	m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activity_EOperation_maximum_one_parameter_node_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setName("maximum_two_parameter_nodes");
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setLowerBound(0);
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setUpperBound(1);
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setUnique(true);
	m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activity_EOperation_maximum_two_parameter_nodes_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActivityContentContent()
{
	m_activityContent_EClass->setName("ActivityContent");
	m_activityContent_EClass->setAbstract(true);
	m_activityContent_EClass->setInterface(true);
	
	
	
	m_activityContent_EOperation_containingActivity->setEType(getActivity_EClass());
	m_activityContent_EOperation_containingActivity->setName("containingActivity");
	m_activityContent_EOperation_containingActivity->setLowerBound(0);
	m_activityContent_EOperation_containingActivity->setUpperBound(1);
	m_activityContent_EOperation_containingActivity->setUnique(true);
	m_activityContent_EOperation_containingActivity->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeActivityEdgeContent()
{
	m_activityEdge_EClass->setName("ActivityEdge");
	m_activityEdge_EClass->setAbstract(true);
	m_activityEdge_EClass->setInterface(false);
	
	
	m_activityEdge_EReference_activity->setName("activity");
	m_activityEdge_EReference_activity->setEType(getActivity_EClass());
	m_activityEdge_EReference_activity->setLowerBound(0);
	m_activityEdge_EReference_activity->setUpperBound(1);
	m_activityEdge_EReference_activity->setTransient(false);
	m_activityEdge_EReference_activity->setVolatile(false);
	m_activityEdge_EReference_activity->setChangeable(true);
	m_activityEdge_EReference_activity->setUnsettable(false);
	m_activityEdge_EReference_activity->setUnique(true);
	m_activityEdge_EReference_activity->setDerived(false);
	m_activityEdge_EReference_activity->setOrdered(false);
	m_activityEdge_EReference_activity->setContainment(false);
	m_activityEdge_EReference_activity->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_activity->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivity_EReference_edge();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_activity->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_guard->setName("guard");
	m_activityEdge_EReference_guard->setEType(getValueSpecification_EClass());
	m_activityEdge_EReference_guard->setLowerBound(0);
	m_activityEdge_EReference_guard->setUpperBound(1);
	m_activityEdge_EReference_guard->setTransient(false);
	m_activityEdge_EReference_guard->setVolatile(false);
	m_activityEdge_EReference_guard->setChangeable(true);
	m_activityEdge_EReference_guard->setUnsettable(false);
	m_activityEdge_EReference_guard->setUnique(true);
	m_activityEdge_EReference_guard->setDerived(false);
	m_activityEdge_EReference_guard->setOrdered(false);
	m_activityEdge_EReference_guard->setContainment(true);
	m_activityEdge_EReference_guard->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_guard->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_guard->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_inGroup->setName("inGroup");
	m_activityEdge_EReference_inGroup->setEType(getActivityGroup_EClass());
	m_activityEdge_EReference_inGroup->setLowerBound(0);
	m_activityEdge_EReference_inGroup->setUpperBound(-1);
	m_activityEdge_EReference_inGroup->setTransient(true);
	m_activityEdge_EReference_inGroup->setVolatile(true);
	m_activityEdge_EReference_inGroup->setChangeable(false);
	m_activityEdge_EReference_inGroup->setUnsettable(false);
	m_activityEdge_EReference_inGroup->setUnique(true);
	m_activityEdge_EReference_inGroup->setDerived(true);
	m_activityEdge_EReference_inGroup->setOrdered(false);
	m_activityEdge_EReference_inGroup->setContainment(false);
	m_activityEdge_EReference_inGroup->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_inGroup->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityGroup_EReference_containedEdge();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_inGroup->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_inPartition->setName("inPartition");
	m_activityEdge_EReference_inPartition->setEType(getActivityPartition_EClass());
	m_activityEdge_EReference_inPartition->setLowerBound(0);
	m_activityEdge_EReference_inPartition->setUpperBound(-1);
	m_activityEdge_EReference_inPartition->setTransient(false);
	m_activityEdge_EReference_inPartition->setVolatile(false);
	m_activityEdge_EReference_inPartition->setChangeable(true);
	m_activityEdge_EReference_inPartition->setUnsettable(false);
	m_activityEdge_EReference_inPartition->setUnique(true);
	m_activityEdge_EReference_inPartition->setDerived(false);
	m_activityEdge_EReference_inPartition->setOrdered(false);
	m_activityEdge_EReference_inPartition->setContainment(false);
	m_activityEdge_EReference_inPartition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_inPartition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityPartition_EReference_edge();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_inPartition->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_inStructuredNode->setName("inStructuredNode");
	m_activityEdge_EReference_inStructuredNode->setEType(getStructuredActivityNode_EClass());
	m_activityEdge_EReference_inStructuredNode->setLowerBound(0);
	m_activityEdge_EReference_inStructuredNode->setUpperBound(1);
	m_activityEdge_EReference_inStructuredNode->setTransient(false);
	m_activityEdge_EReference_inStructuredNode->setVolatile(false);
	m_activityEdge_EReference_inStructuredNode->setChangeable(true);
	m_activityEdge_EReference_inStructuredNode->setUnsettable(false);
	m_activityEdge_EReference_inStructuredNode->setUnique(true);
	m_activityEdge_EReference_inStructuredNode->setDerived(false);
	m_activityEdge_EReference_inStructuredNode->setOrdered(false);
	m_activityEdge_EReference_inStructuredNode->setContainment(false);
	m_activityEdge_EReference_inStructuredNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_inStructuredNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStructuredActivityNode_EReference_edge();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_inStructuredNode->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_interrupts->setName("interrupts");
	m_activityEdge_EReference_interrupts->setEType(getInterruptibleActivityRegion_EClass());
	m_activityEdge_EReference_interrupts->setLowerBound(0);
	m_activityEdge_EReference_interrupts->setUpperBound(1);
	m_activityEdge_EReference_interrupts->setTransient(false);
	m_activityEdge_EReference_interrupts->setVolatile(false);
	m_activityEdge_EReference_interrupts->setChangeable(true);
	m_activityEdge_EReference_interrupts->setUnsettable(false);
	m_activityEdge_EReference_interrupts->setUnique(true);
	m_activityEdge_EReference_interrupts->setDerived(false);
	m_activityEdge_EReference_interrupts->setOrdered(false);
	m_activityEdge_EReference_interrupts->setContainment(false);
	m_activityEdge_EReference_interrupts->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_interrupts->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInterruptibleActivityRegion_EReference_interruptingEdge();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_interrupts->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_redefinedEdge->setName("redefinedEdge");
	m_activityEdge_EReference_redefinedEdge->setEType(getActivityEdge_EClass());
	m_activityEdge_EReference_redefinedEdge->setLowerBound(0);
	m_activityEdge_EReference_redefinedEdge->setUpperBound(-1);
	m_activityEdge_EReference_redefinedEdge->setTransient(false);
	m_activityEdge_EReference_redefinedEdge->setVolatile(false);
	m_activityEdge_EReference_redefinedEdge->setChangeable(true);
	m_activityEdge_EReference_redefinedEdge->setUnsettable(false);
	m_activityEdge_EReference_redefinedEdge->setUnique(true);
	m_activityEdge_EReference_redefinedEdge->setDerived(false);
	m_activityEdge_EReference_redefinedEdge->setOrdered(false);
	m_activityEdge_EReference_redefinedEdge->setContainment(false);
	m_activityEdge_EReference_redefinedEdge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_redefinedEdge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_redefinedEdge->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_source->setName("source");
	m_activityEdge_EReference_source->setEType(getActivityNode_EClass());
	m_activityEdge_EReference_source->setLowerBound(1);
	m_activityEdge_EReference_source->setUpperBound(1);
	m_activityEdge_EReference_source->setTransient(false);
	m_activityEdge_EReference_source->setVolatile(false);
	m_activityEdge_EReference_source->setChangeable(true);
	m_activityEdge_EReference_source->setUnsettable(false);
	m_activityEdge_EReference_source->setUnique(true);
	m_activityEdge_EReference_source->setDerived(false);
	m_activityEdge_EReference_source->setOrdered(false);
	m_activityEdge_EReference_source->setContainment(false);
	m_activityEdge_EReference_source->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_source->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_outgoing();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_source->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_target->setName("target");
	m_activityEdge_EReference_target->setEType(getActivityNode_EClass());
	m_activityEdge_EReference_target->setLowerBound(1);
	m_activityEdge_EReference_target->setUpperBound(1);
	m_activityEdge_EReference_target->setTransient(false);
	m_activityEdge_EReference_target->setVolatile(false);
	m_activityEdge_EReference_target->setChangeable(true);
	m_activityEdge_EReference_target->setUnsettable(false);
	m_activityEdge_EReference_target->setUnique(true);
	m_activityEdge_EReference_target->setDerived(false);
	m_activityEdge_EReference_target->setOrdered(false);
	m_activityEdge_EReference_target->setContainment(false);
	m_activityEdge_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_incoming();
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_target->setEOpposite(otherEnd);
	    }
	}
	m_activityEdge_EReference_weight->setName("weight");
	m_activityEdge_EReference_weight->setEType(getValueSpecification_EClass());
	m_activityEdge_EReference_weight->setLowerBound(0);
	m_activityEdge_EReference_weight->setUpperBound(1);
	m_activityEdge_EReference_weight->setTransient(false);
	m_activityEdge_EReference_weight->setVolatile(false);
	m_activityEdge_EReference_weight->setChangeable(true);
	m_activityEdge_EReference_weight->setUnsettable(false);
	m_activityEdge_EReference_weight->setUnique(true);
	m_activityEdge_EReference_weight->setDerived(false);
	m_activityEdge_EReference_weight->setOrdered(false);
	m_activityEdge_EReference_weight->setContainment(true);
	m_activityEdge_EReference_weight->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityEdge_EReference_weight->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityEdge_EReference_weight->setEOpposite(otherEnd);
	    }
	}
	
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setName("source_and_target");
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setUnique(true);
	m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityEdge_EOperation_source_and_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActivityFinalNodeContent()
{
	m_activityFinalNode_EClass->setName("ActivityFinalNode");
	m_activityFinalNode_EClass->setAbstract(false);
	m_activityFinalNode_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeActivityGroupContent()
{
	m_activityGroup_EClass->setName("ActivityGroup");
	m_activityGroup_EClass->setAbstract(true);
	m_activityGroup_EClass->setInterface(false);
	
	
	m_activityGroup_EReference_containedEdge->setName("containedEdge");
	m_activityGroup_EReference_containedEdge->setEType(getActivityEdge_EClass());
	m_activityGroup_EReference_containedEdge->setLowerBound(0);
	m_activityGroup_EReference_containedEdge->setUpperBound(-1);
	m_activityGroup_EReference_containedEdge->setTransient(true);
	m_activityGroup_EReference_containedEdge->setVolatile(true);
	m_activityGroup_EReference_containedEdge->setChangeable(false);
	m_activityGroup_EReference_containedEdge->setUnsettable(false);
	m_activityGroup_EReference_containedEdge->setUnique(true);
	m_activityGroup_EReference_containedEdge->setDerived(true);
	m_activityGroup_EReference_containedEdge->setOrdered(false);
	m_activityGroup_EReference_containedEdge->setContainment(false);
	m_activityGroup_EReference_containedEdge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityGroup_EReference_containedEdge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_inGroup();
		if (otherEnd != nullptr)
	    {
	   		m_activityGroup_EReference_containedEdge->setEOpposite(otherEnd);
	    }
	}
	m_activityGroup_EReference_containedNode->setName("containedNode");
	m_activityGroup_EReference_containedNode->setEType(getActivityNode_EClass());
	m_activityGroup_EReference_containedNode->setLowerBound(0);
	m_activityGroup_EReference_containedNode->setUpperBound(-1);
	m_activityGroup_EReference_containedNode->setTransient(true);
	m_activityGroup_EReference_containedNode->setVolatile(true);
	m_activityGroup_EReference_containedNode->setChangeable(false);
	m_activityGroup_EReference_containedNode->setUnsettable(false);
	m_activityGroup_EReference_containedNode->setUnique(true);
	m_activityGroup_EReference_containedNode->setDerived(true);
	m_activityGroup_EReference_containedNode->setOrdered(false);
	m_activityGroup_EReference_containedNode->setContainment(false);
	m_activityGroup_EReference_containedNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityGroup_EReference_containedNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_inGroup();
		if (otherEnd != nullptr)
	    {
	   		m_activityGroup_EReference_containedNode->setEOpposite(otherEnd);
	    }
	}
	m_activityGroup_EReference_inActivity->setName("inActivity");
	m_activityGroup_EReference_inActivity->setEType(getActivity_EClass());
	m_activityGroup_EReference_inActivity->setLowerBound(0);
	m_activityGroup_EReference_inActivity->setUpperBound(1);
	m_activityGroup_EReference_inActivity->setTransient(true);
	m_activityGroup_EReference_inActivity->setVolatile(true);
	m_activityGroup_EReference_inActivity->setChangeable(true);
	m_activityGroup_EReference_inActivity->setUnsettable(false);
	m_activityGroup_EReference_inActivity->setUnique(true);
	m_activityGroup_EReference_inActivity->setDerived(true);
	m_activityGroup_EReference_inActivity->setOrdered(false);
	m_activityGroup_EReference_inActivity->setContainment(false);
	m_activityGroup_EReference_inActivity->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityGroup_EReference_inActivity->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivity_EReference_group();
		if (otherEnd != nullptr)
	    {
	   		m_activityGroup_EReference_inActivity->setEOpposite(otherEnd);
	    }
	}
	m_activityGroup_EReference_subgroup->setName("subgroup");
	m_activityGroup_EReference_subgroup->setEType(getActivityGroup_EClass());
	m_activityGroup_EReference_subgroup->setLowerBound(0);
	m_activityGroup_EReference_subgroup->setUpperBound(-1);
	m_activityGroup_EReference_subgroup->setTransient(true);
	m_activityGroup_EReference_subgroup->setVolatile(true);
	m_activityGroup_EReference_subgroup->setChangeable(false);
	m_activityGroup_EReference_subgroup->setUnsettable(false);
	m_activityGroup_EReference_subgroup->setUnique(true);
	m_activityGroup_EReference_subgroup->setDerived(true);
	m_activityGroup_EReference_subgroup->setOrdered(false);
	m_activityGroup_EReference_subgroup->setContainment(true);
	m_activityGroup_EReference_subgroup->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityGroup_EReference_subgroup->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityGroup_EReference_superGroup();
		if (otherEnd != nullptr)
	    {
	   		m_activityGroup_EReference_subgroup->setEOpposite(otherEnd);
	    }
	}
	m_activityGroup_EReference_superGroup->setName("superGroup");
	m_activityGroup_EReference_superGroup->setEType(getActivityGroup_EClass());
	m_activityGroup_EReference_superGroup->setLowerBound(0);
	m_activityGroup_EReference_superGroup->setUpperBound(1);
	m_activityGroup_EReference_superGroup->setTransient(true);
	m_activityGroup_EReference_superGroup->setVolatile(true);
	m_activityGroup_EReference_superGroup->setChangeable(false);
	m_activityGroup_EReference_superGroup->setUnsettable(false);
	m_activityGroup_EReference_superGroup->setUnique(true);
	m_activityGroup_EReference_superGroup->setDerived(true);
	m_activityGroup_EReference_superGroup->setOrdered(false);
	m_activityGroup_EReference_superGroup->setContainment(false);
	m_activityGroup_EReference_superGroup->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityGroup_EReference_superGroup->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityGroup_EReference_subgroup();
		if (otherEnd != nullptr)
	    {
	   		m_activityGroup_EReference_superGroup->setEOpposite(otherEnd);
	    }
	}
	
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setName("nodes_and_edges");
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setUnique(true);
	m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityGroup_EOperation_nodes_and_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setName("not_contained");
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setUnique(true);
	m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityGroup_EOperation_not_contained_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActivityNodeContent()
{
	m_activityNode_EClass->setName("ActivityNode");
	m_activityNode_EClass->setAbstract(true);
	m_activityNode_EClass->setInterface(false);
	
	
	m_activityNode_EReference_activity->setName("activity");
	m_activityNode_EReference_activity->setEType(getActivity_EClass());
	m_activityNode_EReference_activity->setLowerBound(0);
	m_activityNode_EReference_activity->setUpperBound(1);
	m_activityNode_EReference_activity->setTransient(true);
	m_activityNode_EReference_activity->setVolatile(true);
	m_activityNode_EReference_activity->setChangeable(true);
	m_activityNode_EReference_activity->setUnsettable(false);
	m_activityNode_EReference_activity->setUnique(true);
	m_activityNode_EReference_activity->setDerived(true);
	m_activityNode_EReference_activity->setOrdered(false);
	m_activityNode_EReference_activity->setContainment(false);
	m_activityNode_EReference_activity->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_activity->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivity_EReference_node();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_activity->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_inGroup->setName("inGroup");
	m_activityNode_EReference_inGroup->setEType(getActivityGroup_EClass());
	m_activityNode_EReference_inGroup->setLowerBound(0);
	m_activityNode_EReference_inGroup->setUpperBound(-1);
	m_activityNode_EReference_inGroup->setTransient(true);
	m_activityNode_EReference_inGroup->setVolatile(true);
	m_activityNode_EReference_inGroup->setChangeable(false);
	m_activityNode_EReference_inGroup->setUnsettable(false);
	m_activityNode_EReference_inGroup->setUnique(true);
	m_activityNode_EReference_inGroup->setDerived(true);
	m_activityNode_EReference_inGroup->setOrdered(false);
	m_activityNode_EReference_inGroup->setContainment(false);
	m_activityNode_EReference_inGroup->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_inGroup->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityGroup_EReference_containedNode();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_inGroup->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_inInterruptibleRegion->setName("inInterruptibleRegion");
	m_activityNode_EReference_inInterruptibleRegion->setEType(getInterruptibleActivityRegion_EClass());
	m_activityNode_EReference_inInterruptibleRegion->setLowerBound(0);
	m_activityNode_EReference_inInterruptibleRegion->setUpperBound(-1);
	m_activityNode_EReference_inInterruptibleRegion->setTransient(false);
	m_activityNode_EReference_inInterruptibleRegion->setVolatile(false);
	m_activityNode_EReference_inInterruptibleRegion->setChangeable(true);
	m_activityNode_EReference_inInterruptibleRegion->setUnsettable(false);
	m_activityNode_EReference_inInterruptibleRegion->setUnique(true);
	m_activityNode_EReference_inInterruptibleRegion->setDerived(false);
	m_activityNode_EReference_inInterruptibleRegion->setOrdered(false);
	m_activityNode_EReference_inInterruptibleRegion->setContainment(false);
	m_activityNode_EReference_inInterruptibleRegion->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_inInterruptibleRegion->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInterruptibleActivityRegion_EReference_node();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_inInterruptibleRegion->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_inPartition->setName("inPartition");
	m_activityNode_EReference_inPartition->setEType(getActivityPartition_EClass());
	m_activityNode_EReference_inPartition->setLowerBound(0);
	m_activityNode_EReference_inPartition->setUpperBound(-1);
	m_activityNode_EReference_inPartition->setTransient(false);
	m_activityNode_EReference_inPartition->setVolatile(false);
	m_activityNode_EReference_inPartition->setChangeable(true);
	m_activityNode_EReference_inPartition->setUnsettable(false);
	m_activityNode_EReference_inPartition->setUnique(true);
	m_activityNode_EReference_inPartition->setDerived(false);
	m_activityNode_EReference_inPartition->setOrdered(false);
	m_activityNode_EReference_inPartition->setContainment(false);
	m_activityNode_EReference_inPartition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_inPartition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityPartition_EReference_node();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_inPartition->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_inStructuredNode->setName("inStructuredNode");
	m_activityNode_EReference_inStructuredNode->setEType(getStructuredActivityNode_EClass());
	m_activityNode_EReference_inStructuredNode->setLowerBound(0);
	m_activityNode_EReference_inStructuredNode->setUpperBound(1);
	m_activityNode_EReference_inStructuredNode->setTransient(false);
	m_activityNode_EReference_inStructuredNode->setVolatile(false);
	m_activityNode_EReference_inStructuredNode->setChangeable(true);
	m_activityNode_EReference_inStructuredNode->setUnsettable(false);
	m_activityNode_EReference_inStructuredNode->setUnique(true);
	m_activityNode_EReference_inStructuredNode->setDerived(false);
	m_activityNode_EReference_inStructuredNode->setOrdered(false);
	m_activityNode_EReference_inStructuredNode->setContainment(false);
	m_activityNode_EReference_inStructuredNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_inStructuredNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStructuredActivityNode_EReference_node();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_inStructuredNode->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_incoming->setName("incoming");
	m_activityNode_EReference_incoming->setEType(getActivityEdge_EClass());
	m_activityNode_EReference_incoming->setLowerBound(0);
	m_activityNode_EReference_incoming->setUpperBound(-1);
	m_activityNode_EReference_incoming->setTransient(false);
	m_activityNode_EReference_incoming->setVolatile(false);
	m_activityNode_EReference_incoming->setChangeable(true);
	m_activityNode_EReference_incoming->setUnsettable(false);
	m_activityNode_EReference_incoming->setUnique(true);
	m_activityNode_EReference_incoming->setDerived(false);
	m_activityNode_EReference_incoming->setOrdered(false);
	m_activityNode_EReference_incoming->setContainment(false);
	m_activityNode_EReference_incoming->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_incoming->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_target();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_incoming->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_outgoing->setName("outgoing");
	m_activityNode_EReference_outgoing->setEType(getActivityEdge_EClass());
	m_activityNode_EReference_outgoing->setLowerBound(0);
	m_activityNode_EReference_outgoing->setUpperBound(-1);
	m_activityNode_EReference_outgoing->setTransient(false);
	m_activityNode_EReference_outgoing->setVolatile(false);
	m_activityNode_EReference_outgoing->setChangeable(true);
	m_activityNode_EReference_outgoing->setUnsettable(false);
	m_activityNode_EReference_outgoing->setUnique(true);
	m_activityNode_EReference_outgoing->setDerived(false);
	m_activityNode_EReference_outgoing->setOrdered(false);
	m_activityNode_EReference_outgoing->setContainment(false);
	m_activityNode_EReference_outgoing->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_outgoing->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_source();
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_outgoing->setEOpposite(otherEnd);
	    }
	}
	m_activityNode_EReference_redefinedNode->setName("redefinedNode");
	m_activityNode_EReference_redefinedNode->setEType(getActivityNode_EClass());
	m_activityNode_EReference_redefinedNode->setLowerBound(0);
	m_activityNode_EReference_redefinedNode->setUpperBound(-1);
	m_activityNode_EReference_redefinedNode->setTransient(false);
	m_activityNode_EReference_redefinedNode->setVolatile(false);
	m_activityNode_EReference_redefinedNode->setChangeable(true);
	m_activityNode_EReference_redefinedNode->setUnsettable(false);
	m_activityNode_EReference_redefinedNode->setUnique(true);
	m_activityNode_EReference_redefinedNode->setDerived(false);
	m_activityNode_EReference_redefinedNode->setOrdered(false);
	m_activityNode_EReference_redefinedNode->setContainment(false);
	m_activityNode_EReference_redefinedNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityNode_EReference_redefinedNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityNode_EReference_redefinedNode->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeActivityParameterNodeContent()
{
	m_activityParameterNode_EClass->setName("ActivityParameterNode");
	m_activityParameterNode_EClass->setAbstract(false);
	m_activityParameterNode_EClass->setInterface(false);
	
	
	m_activityParameterNode_EReference_parameter->setName("parameter");
	m_activityParameterNode_EReference_parameter->setEType(getParameter_EClass());
	m_activityParameterNode_EReference_parameter->setLowerBound(1);
	m_activityParameterNode_EReference_parameter->setUpperBound(1);
	m_activityParameterNode_EReference_parameter->setTransient(false);
	m_activityParameterNode_EReference_parameter->setVolatile(false);
	m_activityParameterNode_EReference_parameter->setChangeable(true);
	m_activityParameterNode_EReference_parameter->setUnsettable(false);
	m_activityParameterNode_EReference_parameter->setUnique(true);
	m_activityParameterNode_EReference_parameter->setDerived(false);
	m_activityParameterNode_EReference_parameter->setOrdered(false);
	m_activityParameterNode_EReference_parameter->setContainment(false);
	m_activityParameterNode_EReference_parameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityParameterNode_EReference_parameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityParameterNode_EReference_parameter->setEOpposite(otherEnd);
	    }
	}
	
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setName("has_parameters");
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_has_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setName("no_edges");
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setUnique(true);
	m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setName("no_incoming_edges");
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUnique(true);
	m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setName("no_outgoing_edges");
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setUnique(true);
	m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setName("same_type");
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setUnique(true);
	m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityParameterNode_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActivityPartitionContent()
{
	m_activityPartition_EClass->setName("ActivityPartition");
	m_activityPartition_EClass->setAbstract(false);
	m_activityPartition_EClass->setInterface(false);
	
	m_activityPartition_EAttribute_isDimension = getActivityPartition_EAttribute_isDimension();
	m_activityPartition_EAttribute_isDimension->setName("isDimension");
	m_activityPartition_EAttribute_isDimension->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_activityPartition_EAttribute_isDimension->setLowerBound(1);
	m_activityPartition_EAttribute_isDimension->setUpperBound(1);
	m_activityPartition_EAttribute_isDimension->setTransient(false);
	m_activityPartition_EAttribute_isDimension->setVolatile(false);
	m_activityPartition_EAttribute_isDimension->setChangeable(true);
	m_activityPartition_EAttribute_isDimension->setUnsettable(false);
	m_activityPartition_EAttribute_isDimension->setUnique(true);
	m_activityPartition_EAttribute_isDimension->setDerived(false);
	m_activityPartition_EAttribute_isDimension->setOrdered(false);
	m_activityPartition_EAttribute_isDimension->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_activityPartition_EAttribute_isDimension->setDefaultValueLiteral(defaultValue);
		}
	}
	m_activityPartition_EAttribute_isExternal = getActivityPartition_EAttribute_isExternal();
	m_activityPartition_EAttribute_isExternal->setName("isExternal");
	m_activityPartition_EAttribute_isExternal->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_activityPartition_EAttribute_isExternal->setLowerBound(1);
	m_activityPartition_EAttribute_isExternal->setUpperBound(1);
	m_activityPartition_EAttribute_isExternal->setTransient(false);
	m_activityPartition_EAttribute_isExternal->setVolatile(false);
	m_activityPartition_EAttribute_isExternal->setChangeable(true);
	m_activityPartition_EAttribute_isExternal->setUnsettable(false);
	m_activityPartition_EAttribute_isExternal->setUnique(true);
	m_activityPartition_EAttribute_isExternal->setDerived(false);
	m_activityPartition_EAttribute_isExternal->setOrdered(false);
	m_activityPartition_EAttribute_isExternal->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_activityPartition_EAttribute_isExternal->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_activityPartition_EReference_edge->setName("edge");
	m_activityPartition_EReference_edge->setEType(getActivityEdge_EClass());
	m_activityPartition_EReference_edge->setLowerBound(0);
	m_activityPartition_EReference_edge->setUpperBound(-1);
	m_activityPartition_EReference_edge->setTransient(false);
	m_activityPartition_EReference_edge->setVolatile(false);
	m_activityPartition_EReference_edge->setChangeable(true);
	m_activityPartition_EReference_edge->setUnsettable(false);
	m_activityPartition_EReference_edge->setUnique(true);
	m_activityPartition_EReference_edge->setDerived(false);
	m_activityPartition_EReference_edge->setOrdered(false);
	m_activityPartition_EReference_edge->setContainment(false);
	m_activityPartition_EReference_edge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityPartition_EReference_edge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_inPartition();
		if (otherEnd != nullptr)
	    {
	   		m_activityPartition_EReference_edge->setEOpposite(otherEnd);
	    }
	}
	m_activityPartition_EReference_node->setName("node");
	m_activityPartition_EReference_node->setEType(getActivityNode_EClass());
	m_activityPartition_EReference_node->setLowerBound(0);
	m_activityPartition_EReference_node->setUpperBound(-1);
	m_activityPartition_EReference_node->setTransient(false);
	m_activityPartition_EReference_node->setVolatile(false);
	m_activityPartition_EReference_node->setChangeable(true);
	m_activityPartition_EReference_node->setUnsettable(false);
	m_activityPartition_EReference_node->setUnique(true);
	m_activityPartition_EReference_node->setDerived(false);
	m_activityPartition_EReference_node->setOrdered(false);
	m_activityPartition_EReference_node->setContainment(false);
	m_activityPartition_EReference_node->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityPartition_EReference_node->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_inPartition();
		if (otherEnd != nullptr)
	    {
	   		m_activityPartition_EReference_node->setEOpposite(otherEnd);
	    }
	}
	m_activityPartition_EReference_represents->setName("represents");
	m_activityPartition_EReference_represents->setEType(getElement_EClass());
	m_activityPartition_EReference_represents->setLowerBound(0);
	m_activityPartition_EReference_represents->setUpperBound(1);
	m_activityPartition_EReference_represents->setTransient(false);
	m_activityPartition_EReference_represents->setVolatile(false);
	m_activityPartition_EReference_represents->setChangeable(true);
	m_activityPartition_EReference_represents->setUnsettable(false);
	m_activityPartition_EReference_represents->setUnique(true);
	m_activityPartition_EReference_represents->setDerived(false);
	m_activityPartition_EReference_represents->setOrdered(false);
	m_activityPartition_EReference_represents->setContainment(false);
	m_activityPartition_EReference_represents->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityPartition_EReference_represents->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_activityPartition_EReference_represents->setEOpposite(otherEnd);
	    }
	}
	m_activityPartition_EReference_subpartition->setName("subpartition");
	m_activityPartition_EReference_subpartition->setEType(getActivityPartition_EClass());
	m_activityPartition_EReference_subpartition->setLowerBound(0);
	m_activityPartition_EReference_subpartition->setUpperBound(-1);
	m_activityPartition_EReference_subpartition->setTransient(false);
	m_activityPartition_EReference_subpartition->setVolatile(false);
	m_activityPartition_EReference_subpartition->setChangeable(true);
	m_activityPartition_EReference_subpartition->setUnsettable(false);
	m_activityPartition_EReference_subpartition->setUnique(true);
	m_activityPartition_EReference_subpartition->setDerived(false);
	m_activityPartition_EReference_subpartition->setOrdered(false);
	m_activityPartition_EReference_subpartition->setContainment(true);
	m_activityPartition_EReference_subpartition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityPartition_EReference_subpartition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityPartition_EReference_superPartition();
		if (otherEnd != nullptr)
	    {
	   		m_activityPartition_EReference_subpartition->setEOpposite(otherEnd);
	    }
	}
	m_activityPartition_EReference_superPartition->setName("superPartition");
	m_activityPartition_EReference_superPartition->setEType(getActivityPartition_EClass());
	m_activityPartition_EReference_superPartition->setLowerBound(0);
	m_activityPartition_EReference_superPartition->setUpperBound(1);
	m_activityPartition_EReference_superPartition->setTransient(false);
	m_activityPartition_EReference_superPartition->setVolatile(false);
	m_activityPartition_EReference_superPartition->setChangeable(true);
	m_activityPartition_EReference_superPartition->setUnsettable(false);
	m_activityPartition_EReference_superPartition->setUnique(true);
	m_activityPartition_EReference_superPartition->setDerived(false);
	m_activityPartition_EReference_superPartition->setOrdered(false);
	m_activityPartition_EReference_superPartition->setContainment(false);
	m_activityPartition_EReference_superPartition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_activityPartition_EReference_superPartition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityPartition_EReference_subpartition();
		if (otherEnd != nullptr)
	    {
	   		m_activityPartition_EReference_superPartition->setEOpposite(otherEnd);
	    }
	}
	
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setName("dimension_not_contained");
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setUnique(true);
	m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_dimension_not_contained_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setName("represents_classifier");
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setName("represents_property");
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setUnique(true);
	m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_property_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setName("represents_property_and_is_contained");
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setLowerBound(0);
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setUpperBound(1);
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setUnique(true);
	m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_activityPartition_EOperation_represents_property_and_is_contained_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeActorContent()
{
	m_actor_EClass->setName("Actor");
	m_actor_EClass->setAbstract(false);
	m_actor_EClass->setInterface(false);
	
	
	
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setName("associations");
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setLowerBound(0);
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setUpperBound(1);
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setUnique(true);
	m_actor_EOperation_associations_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actor_EOperation_associations_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actor_EOperation_associations_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setName("must_have_name");
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setUnique(true);
	m_actor_EOperation_must_have_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actor_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_actor_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAddStructuralFeatureValueActionContent()
{
	m_addStructuralFeatureValueAction_EClass->setName("AddStructuralFeatureValueAction");
	m_addStructuralFeatureValueAction_EClass->setAbstract(false);
	m_addStructuralFeatureValueAction_EClass->setInterface(false);
	
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll = getAddStructuralFeatureValueAction_EAttribute_isReplaceAll();
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setName("isReplaceAll");
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setLowerBound(1);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setUpperBound(1);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setTransient(false);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setVolatile(false);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setChangeable(true);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setUnsettable(false);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setUnique(true);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setDerived(false);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setOrdered(false);
	m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_addStructuralFeatureValueAction_EAttribute_isReplaceAll->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_addStructuralFeatureValueAction_EReference_insertAt->setName("insertAt");
	m_addStructuralFeatureValueAction_EReference_insertAt->setEType(getInputPin_EClass());
	m_addStructuralFeatureValueAction_EReference_insertAt->setLowerBound(0);
	m_addStructuralFeatureValueAction_EReference_insertAt->setUpperBound(1);
	m_addStructuralFeatureValueAction_EReference_insertAt->setTransient(false);
	m_addStructuralFeatureValueAction_EReference_insertAt->setVolatile(false);
	m_addStructuralFeatureValueAction_EReference_insertAt->setChangeable(true);
	m_addStructuralFeatureValueAction_EReference_insertAt->setUnsettable(false);
	m_addStructuralFeatureValueAction_EReference_insertAt->setUnique(true);
	m_addStructuralFeatureValueAction_EReference_insertAt->setDerived(false);
	m_addStructuralFeatureValueAction_EReference_insertAt->setOrdered(false);
	m_addStructuralFeatureValueAction_EReference_insertAt->setContainment(true);
	m_addStructuralFeatureValueAction_EReference_insertAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_addStructuralFeatureValueAction_EReference_insertAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_addStructuralFeatureValueAction_EReference_insertAt->setEOpposite(otherEnd);
	    }
	}
	
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setName("insertAt_pin");
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUnique(true);
	m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addStructuralFeatureValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setName("required_value");
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setUnique(true);
	m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addStructuralFeatureValueAction_EOperation_required_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAddVariableValueActionContent()
{
	m_addVariableValueAction_EClass->setName("AddVariableValueAction");
	m_addVariableValueAction_EClass->setAbstract(false);
	m_addVariableValueAction_EClass->setInterface(false);
	
	m_addVariableValueAction_EAttribute_isReplaceAll = getAddVariableValueAction_EAttribute_isReplaceAll();
	m_addVariableValueAction_EAttribute_isReplaceAll->setName("isReplaceAll");
	m_addVariableValueAction_EAttribute_isReplaceAll->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_addVariableValueAction_EAttribute_isReplaceAll->setLowerBound(1);
	m_addVariableValueAction_EAttribute_isReplaceAll->setUpperBound(1);
	m_addVariableValueAction_EAttribute_isReplaceAll->setTransient(false);
	m_addVariableValueAction_EAttribute_isReplaceAll->setVolatile(false);
	m_addVariableValueAction_EAttribute_isReplaceAll->setChangeable(true);
	m_addVariableValueAction_EAttribute_isReplaceAll->setUnsettable(false);
	m_addVariableValueAction_EAttribute_isReplaceAll->setUnique(true);
	m_addVariableValueAction_EAttribute_isReplaceAll->setDerived(false);
	m_addVariableValueAction_EAttribute_isReplaceAll->setOrdered(false);
	m_addVariableValueAction_EAttribute_isReplaceAll->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_addVariableValueAction_EAttribute_isReplaceAll->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_addVariableValueAction_EReference_insertAt->setName("insertAt");
	m_addVariableValueAction_EReference_insertAt->setEType(getInputPin_EClass());
	m_addVariableValueAction_EReference_insertAt->setLowerBound(0);
	m_addVariableValueAction_EReference_insertAt->setUpperBound(1);
	m_addVariableValueAction_EReference_insertAt->setTransient(false);
	m_addVariableValueAction_EReference_insertAt->setVolatile(false);
	m_addVariableValueAction_EReference_insertAt->setChangeable(true);
	m_addVariableValueAction_EReference_insertAt->setUnsettable(false);
	m_addVariableValueAction_EReference_insertAt->setUnique(true);
	m_addVariableValueAction_EReference_insertAt->setDerived(false);
	m_addVariableValueAction_EReference_insertAt->setOrdered(false);
	m_addVariableValueAction_EReference_insertAt->setContainment(true);
	m_addVariableValueAction_EReference_insertAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_addVariableValueAction_EReference_insertAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_addVariableValueAction_EReference_insertAt->setEOpposite(otherEnd);
	    }
	}
	
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setName("insertAt_pin");
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUnique(true);
	m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addVariableValueAction_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setName("required_value");
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setUnique(true);
	m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_addVariableValueAction_EOperation_required_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAnyReceiveEventContent()
{
	m_anyReceiveEvent_EClass->setName("AnyReceiveEvent");
	m_anyReceiveEvent_EClass->setAbstract(false);
	m_anyReceiveEvent_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeArtifactContent()
{
	m_artifact_EClass->setName("Artifact");
	m_artifact_EClass->setAbstract(false);
	m_artifact_EClass->setInterface(false);
	
	m_artifact_EAttribute_fileName = getArtifact_EAttribute_fileName();
	m_artifact_EAttribute_fileName->setName("fileName");
	m_artifact_EAttribute_fileName->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_artifact_EAttribute_fileName->setLowerBound(0);
	m_artifact_EAttribute_fileName->setUpperBound(1);
	m_artifact_EAttribute_fileName->setTransient(false);
	m_artifact_EAttribute_fileName->setVolatile(false);
	m_artifact_EAttribute_fileName->setChangeable(true);
	m_artifact_EAttribute_fileName->setUnsettable(true);
	m_artifact_EAttribute_fileName->setUnique(true);
	m_artifact_EAttribute_fileName->setDerived(false);
	m_artifact_EAttribute_fileName->setOrdered(false);
	m_artifact_EAttribute_fileName->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_artifact_EAttribute_fileName->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_artifact_EReference_manifestation->setName("manifestation");
	m_artifact_EReference_manifestation->setEType(getManifestation_EClass());
	m_artifact_EReference_manifestation->setLowerBound(0);
	m_artifact_EReference_manifestation->setUpperBound(-1);
	m_artifact_EReference_manifestation->setTransient(false);
	m_artifact_EReference_manifestation->setVolatile(false);
	m_artifact_EReference_manifestation->setChangeable(true);
	m_artifact_EReference_manifestation->setUnsettable(false);
	m_artifact_EReference_manifestation->setUnique(true);
	m_artifact_EReference_manifestation->setDerived(false);
	m_artifact_EReference_manifestation->setOrdered(false);
	m_artifact_EReference_manifestation->setContainment(true);
	m_artifact_EReference_manifestation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_artifact_EReference_manifestation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_artifact_EReference_manifestation->setEOpposite(otherEnd);
	    }
	}
	m_artifact_EReference_nestedArtifact->setName("nestedArtifact");
	m_artifact_EReference_nestedArtifact->setEType(getArtifact_EClass());
	m_artifact_EReference_nestedArtifact->setLowerBound(0);
	m_artifact_EReference_nestedArtifact->setUpperBound(-1);
	m_artifact_EReference_nestedArtifact->setTransient(false);
	m_artifact_EReference_nestedArtifact->setVolatile(false);
	m_artifact_EReference_nestedArtifact->setChangeable(true);
	m_artifact_EReference_nestedArtifact->setUnsettable(false);
	m_artifact_EReference_nestedArtifact->setUnique(true);
	m_artifact_EReference_nestedArtifact->setDerived(false);
	m_artifact_EReference_nestedArtifact->setOrdered(false);
	m_artifact_EReference_nestedArtifact->setContainment(true);
	m_artifact_EReference_nestedArtifact->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_artifact_EReference_nestedArtifact->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_artifact_EReference_nestedArtifact->setEOpposite(otherEnd);
	    }
	}
	m_artifact_EReference_ownedAttribute->setName("ownedAttribute");
	m_artifact_EReference_ownedAttribute->setEType(getProperty_EClass());
	m_artifact_EReference_ownedAttribute->setLowerBound(0);
	m_artifact_EReference_ownedAttribute->setUpperBound(-1);
	m_artifact_EReference_ownedAttribute->setTransient(false);
	m_artifact_EReference_ownedAttribute->setVolatile(false);
	m_artifact_EReference_ownedAttribute->setChangeable(true);
	m_artifact_EReference_ownedAttribute->setUnsettable(false);
	m_artifact_EReference_ownedAttribute->setUnique(true);
	m_artifact_EReference_ownedAttribute->setDerived(false);
	m_artifact_EReference_ownedAttribute->setOrdered(true);
	m_artifact_EReference_ownedAttribute->setContainment(true);
	m_artifact_EReference_ownedAttribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_artifact_EReference_ownedAttribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_artifact_EReference_ownedAttribute->setEOpposite(otherEnd);
	    }
	}
	m_artifact_EReference_ownedOperation->setName("ownedOperation");
	m_artifact_EReference_ownedOperation->setEType(getOperation_EClass());
	m_artifact_EReference_ownedOperation->setLowerBound(0);
	m_artifact_EReference_ownedOperation->setUpperBound(-1);
	m_artifact_EReference_ownedOperation->setTransient(false);
	m_artifact_EReference_ownedOperation->setVolatile(false);
	m_artifact_EReference_ownedOperation->setChangeable(true);
	m_artifact_EReference_ownedOperation->setUnsettable(false);
	m_artifact_EReference_ownedOperation->setUnique(true);
	m_artifact_EReference_ownedOperation->setDerived(false);
	m_artifact_EReference_ownedOperation->setOrdered(true);
	m_artifact_EReference_ownedOperation->setContainment(true);
	m_artifact_EReference_ownedOperation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_artifact_EReference_ownedOperation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_artifact_EReference_ownedOperation->setEOpposite(otherEnd);
	    }
	}
	
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setEType(getProperty_EClass());
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setName("createOwnedAttribute");
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setLowerBound(1);
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUpperBound(1);
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUnique(true);
	m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_artifact_EOperation_createOwnedOperation_String_Type->setEType(getOperation_EClass());
	m_artifact_EOperation_createOwnedOperation_String_Type->setName("createOwnedOperation");
	m_artifact_EOperation_createOwnedOperation_String_Type->setLowerBound(1);
	m_artifact_EOperation_createOwnedOperation_String_Type->setUpperBound(1);
	m_artifact_EOperation_createOwnedOperation_String_Type->setUnique(true);
	m_artifact_EOperation_createOwnedOperation_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedOperation_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_artifact_EOperation_createOwnedOperation_String_Type);
		parameter->setName("returnType");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAssociationContent()
{
	m_association_EClass->setName("Association");
	m_association_EClass->setAbstract(false);
	m_association_EClass->setInterface(false);
	
	m_association_EAttribute_isDerived = getAssociation_EAttribute_isDerived();
	m_association_EAttribute_isDerived->setName("isDerived");
	m_association_EAttribute_isDerived->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_association_EAttribute_isDerived->setLowerBound(1);
	m_association_EAttribute_isDerived->setUpperBound(1);
	m_association_EAttribute_isDerived->setTransient(false);
	m_association_EAttribute_isDerived->setVolatile(false);
	m_association_EAttribute_isDerived->setChangeable(true);
	m_association_EAttribute_isDerived->setUnsettable(false);
	m_association_EAttribute_isDerived->setUnique(true);
	m_association_EAttribute_isDerived->setDerived(false);
	m_association_EAttribute_isDerived->setOrdered(false);
	m_association_EAttribute_isDerived->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_association_EAttribute_isDerived->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_association_EReference_endType->setName("endType");
	m_association_EReference_endType->setEType(getType_EClass());
	m_association_EReference_endType->setLowerBound(1);
	m_association_EReference_endType->setUpperBound(-1);
	m_association_EReference_endType->setTransient(true);
	m_association_EReference_endType->setVolatile(true);
	m_association_EReference_endType->setChangeable(false);
	m_association_EReference_endType->setUnsettable(false);
	m_association_EReference_endType->setUnique(true);
	m_association_EReference_endType->setDerived(true);
	m_association_EReference_endType->setOrdered(false);
	m_association_EReference_endType->setContainment(false);
	m_association_EReference_endType->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_association_EReference_endType->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_association_EReference_endType->setEOpposite(otherEnd);
	    }
	}
	m_association_EReference_memberEnd->setName("memberEnd");
	m_association_EReference_memberEnd->setEType(getProperty_EClass());
	m_association_EReference_memberEnd->setLowerBound(2);
	m_association_EReference_memberEnd->setUpperBound(-1);
	m_association_EReference_memberEnd->setTransient(false);
	m_association_EReference_memberEnd->setVolatile(false);
	m_association_EReference_memberEnd->setChangeable(true);
	m_association_EReference_memberEnd->setUnsettable(false);
	m_association_EReference_memberEnd->setUnique(true);
	m_association_EReference_memberEnd->setDerived(false);
	m_association_EReference_memberEnd->setOrdered(true);
	m_association_EReference_memberEnd->setContainment(false);
	m_association_EReference_memberEnd->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_association_EReference_memberEnd->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_association();
		if (otherEnd != nullptr)
	    {
	   		m_association_EReference_memberEnd->setEOpposite(otherEnd);
	    }
	}
	m_association_EReference_navigableOwnedEnd->setName("navigableOwnedEnd");
	m_association_EReference_navigableOwnedEnd->setEType(getProperty_EClass());
	m_association_EReference_navigableOwnedEnd->setLowerBound(0);
	m_association_EReference_navigableOwnedEnd->setUpperBound(-1);
	m_association_EReference_navigableOwnedEnd->setTransient(false);
	m_association_EReference_navigableOwnedEnd->setVolatile(false);
	m_association_EReference_navigableOwnedEnd->setChangeable(true);
	m_association_EReference_navigableOwnedEnd->setUnsettable(false);
	m_association_EReference_navigableOwnedEnd->setUnique(true);
	m_association_EReference_navigableOwnedEnd->setDerived(false);
	m_association_EReference_navigableOwnedEnd->setOrdered(false);
	m_association_EReference_navigableOwnedEnd->setContainment(false);
	m_association_EReference_navigableOwnedEnd->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_association_EReference_navigableOwnedEnd->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_association_EReference_navigableOwnedEnd->setEOpposite(otherEnd);
	    }
	}
	m_association_EReference_ownedEnd->setName("ownedEnd");
	m_association_EReference_ownedEnd->setEType(getProperty_EClass());
	m_association_EReference_ownedEnd->setLowerBound(0);
	m_association_EReference_ownedEnd->setUpperBound(-1);
	m_association_EReference_ownedEnd->setTransient(false);
	m_association_EReference_ownedEnd->setVolatile(false);
	m_association_EReference_ownedEnd->setChangeable(true);
	m_association_EReference_ownedEnd->setUnsettable(false);
	m_association_EReference_ownedEnd->setUnique(true);
	m_association_EReference_ownedEnd->setDerived(false);
	m_association_EReference_ownedEnd->setOrdered(true);
	m_association_EReference_ownedEnd->setContainment(true);
	m_association_EReference_ownedEnd->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_association_EReference_ownedEnd->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_owningAssociation();
		if (otherEnd != nullptr)
	    {
	   		m_association_EReference_ownedEnd->setEOpposite(otherEnd);
	    }
	}
	
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setName("association_ends");
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setLowerBound(0);
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setUpperBound(1);
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setUnique(true);
	m_association_EOperation_association_ends_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_association_ends_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_association_ends_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setName("binary_associations");
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setLowerBound(0);
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setUpperBound(1);
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setUnique(true);
	m_association_EOperation_binary_associations_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_binary_associations_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_binary_associations_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setName("ends_must_be_typed");
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setLowerBound(0);
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setUpperBound(1);
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setUnique(true);
	m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_ends_must_be_typed_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_association_EOperation_getEndTypes->setEType(getType_EClass());
	m_association_EOperation_getEndTypes->setName("getEndTypes");
	m_association_EOperation_getEndTypes->setLowerBound(1);
	m_association_EOperation_getEndTypes->setUpperBound(-1);
	m_association_EOperation_getEndTypes->setUnique(true);
	m_association_EOperation_getEndTypes->setOrdered(false);
	
	
	m_association_EOperation_isBinary->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_association_EOperation_isBinary->setName("isBinary");
	m_association_EOperation_isBinary->setLowerBound(1);
	m_association_EOperation_isBinary->setUpperBound(1);
	m_association_EOperation_isBinary->setUnique(true);
	m_association_EOperation_isBinary->setOrdered(false);
	
	
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setName("specialized_end_number");
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setLowerBound(0);
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setUpperBound(1);
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setUnique(true);
	m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_specialized_end_number_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setName("specialized_end_types");
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setLowerBound(0);
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setUpperBound(1);
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setUnique(true);
	m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_association_EOperation_specialized_end_types_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeAssociationClassContent()
{
	m_associationClass_EClass->setName("AssociationClass");
	m_associationClass_EClass->setAbstract(false);
	m_associationClass_EClass->setInterface(false);
	
	
	
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setName("cannot_be_defined");
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setLowerBound(0);
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setUpperBound(1);
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setUnique(true);
	m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_associationClass_EOperation_cannot_be_defined_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setName("disjoint_attributes_ends");
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setLowerBound(0);
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setUpperBound(1);
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setUnique(true);
	m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_associationClass_EOperation_disjoint_attributes_ends_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeBehaviorContent()
{
	m_behavior_EClass->setName("Behavior");
	m_behavior_EClass->setAbstract(true);
	m_behavior_EClass->setInterface(false);
	
	m_behavior_EAttribute_isReentrant = getBehavior_EAttribute_isReentrant();
	m_behavior_EAttribute_isReentrant->setName("isReentrant");
	m_behavior_EAttribute_isReentrant->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_behavior_EAttribute_isReentrant->setLowerBound(0);
	m_behavior_EAttribute_isReentrant->setUpperBound(1);
	m_behavior_EAttribute_isReentrant->setTransient(false);
	m_behavior_EAttribute_isReentrant->setVolatile(false);
	m_behavior_EAttribute_isReentrant->setChangeable(true);
	m_behavior_EAttribute_isReentrant->setUnsettable(true);
	m_behavior_EAttribute_isReentrant->setUnique(true);
	m_behavior_EAttribute_isReentrant->setDerived(false);
	m_behavior_EAttribute_isReentrant->setOrdered(false);
	m_behavior_EAttribute_isReentrant->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_behavior_EAttribute_isReentrant->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_behavior_EReference_behavioredClassifier->setName("behavioredClassifier");
	m_behavior_EReference_behavioredClassifier->setEType(getBehavioredClassifier_EClass());
	m_behavior_EReference_behavioredClassifier->setLowerBound(0);
	m_behavior_EReference_behavioredClassifier->setUpperBound(1);
	m_behavior_EReference_behavioredClassifier->setTransient(false);
	m_behavior_EReference_behavioredClassifier->setVolatile(false);
	m_behavior_EReference_behavioredClassifier->setChangeable(true);
	m_behavior_EReference_behavioredClassifier->setUnsettable(true);
	m_behavior_EReference_behavioredClassifier->setUnique(true);
	m_behavior_EReference_behavioredClassifier->setDerived(false);
	m_behavior_EReference_behavioredClassifier->setOrdered(true);
	m_behavior_EReference_behavioredClassifier->setContainment(false);
	m_behavior_EReference_behavioredClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_behavioredClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavioredClassifier_EReference_ownedBehavior();
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_behavioredClassifier->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_context->setName("context");
	m_behavior_EReference_context->setEType(getBehavioredClassifier_EClass());
	m_behavior_EReference_context->setLowerBound(0);
	m_behavior_EReference_context->setUpperBound(1);
	m_behavior_EReference_context->setTransient(true);
	m_behavior_EReference_context->setVolatile(true);
	m_behavior_EReference_context->setChangeable(true);
	m_behavior_EReference_context->setUnsettable(false);
	m_behavior_EReference_context->setUnique(true);
	m_behavior_EReference_context->setDerived(true);
	m_behavior_EReference_context->setOrdered(false);
	m_behavior_EReference_context->setContainment(false);
	m_behavior_EReference_context->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_context->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_context->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_ownedParameter->setName("ownedParameter");
	m_behavior_EReference_ownedParameter->setEType(getParameter_EClass());
	m_behavior_EReference_ownedParameter->setLowerBound(0);
	m_behavior_EReference_ownedParameter->setUpperBound(-1);
	m_behavior_EReference_ownedParameter->setTransient(false);
	m_behavior_EReference_ownedParameter->setVolatile(false);
	m_behavior_EReference_ownedParameter->setChangeable(true);
	m_behavior_EReference_ownedParameter->setUnsettable(false);
	m_behavior_EReference_ownedParameter->setUnique(true);
	m_behavior_EReference_ownedParameter->setDerived(false);
	m_behavior_EReference_ownedParameter->setOrdered(true);
	m_behavior_EReference_ownedParameter->setContainment(true);
	m_behavior_EReference_ownedParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_ownedParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameter_EReference_behavior();
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_ownedParameter->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_ownedParameterSet->setName("ownedParameterSet");
	m_behavior_EReference_ownedParameterSet->setEType(getParameterSet_EClass());
	m_behavior_EReference_ownedParameterSet->setLowerBound(0);
	m_behavior_EReference_ownedParameterSet->setUpperBound(-1);
	m_behavior_EReference_ownedParameterSet->setTransient(false);
	m_behavior_EReference_ownedParameterSet->setVolatile(false);
	m_behavior_EReference_ownedParameterSet->setChangeable(true);
	m_behavior_EReference_ownedParameterSet->setUnsettable(false);
	m_behavior_EReference_ownedParameterSet->setUnique(true);
	m_behavior_EReference_ownedParameterSet->setDerived(false);
	m_behavior_EReference_ownedParameterSet->setOrdered(false);
	m_behavior_EReference_ownedParameterSet->setContainment(true);
	m_behavior_EReference_ownedParameterSet->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_ownedParameterSet->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_ownedParameterSet->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_postcondition->setName("postcondition");
	m_behavior_EReference_postcondition->setEType(getConstraint_EClass());
	m_behavior_EReference_postcondition->setLowerBound(0);
	m_behavior_EReference_postcondition->setUpperBound(-1);
	m_behavior_EReference_postcondition->setTransient(false);
	m_behavior_EReference_postcondition->setVolatile(false);
	m_behavior_EReference_postcondition->setChangeable(true);
	m_behavior_EReference_postcondition->setUnsettable(false);
	m_behavior_EReference_postcondition->setUnique(true);
	m_behavior_EReference_postcondition->setDerived(false);
	m_behavior_EReference_postcondition->setOrdered(false);
	m_behavior_EReference_postcondition->setContainment(false);
	m_behavior_EReference_postcondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_postcondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_postcondition->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_precondition->setName("precondition");
	m_behavior_EReference_precondition->setEType(getConstraint_EClass());
	m_behavior_EReference_precondition->setLowerBound(0);
	m_behavior_EReference_precondition->setUpperBound(-1);
	m_behavior_EReference_precondition->setTransient(false);
	m_behavior_EReference_precondition->setVolatile(false);
	m_behavior_EReference_precondition->setChangeable(true);
	m_behavior_EReference_precondition->setUnsettable(false);
	m_behavior_EReference_precondition->setUnique(true);
	m_behavior_EReference_precondition->setDerived(false);
	m_behavior_EReference_precondition->setOrdered(false);
	m_behavior_EReference_precondition->setContainment(false);
	m_behavior_EReference_precondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_precondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_precondition->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_redefinedBehavior->setName("redefinedBehavior");
	m_behavior_EReference_redefinedBehavior->setEType(getBehavior_EClass());
	m_behavior_EReference_redefinedBehavior->setLowerBound(0);
	m_behavior_EReference_redefinedBehavior->setUpperBound(-1);
	m_behavior_EReference_redefinedBehavior->setTransient(false);
	m_behavior_EReference_redefinedBehavior->setVolatile(false);
	m_behavior_EReference_redefinedBehavior->setChangeable(true);
	m_behavior_EReference_redefinedBehavior->setUnsettable(false);
	m_behavior_EReference_redefinedBehavior->setUnique(true);
	m_behavior_EReference_redefinedBehavior->setDerived(false);
	m_behavior_EReference_redefinedBehavior->setOrdered(false);
	m_behavior_EReference_redefinedBehavior->setContainment(false);
	m_behavior_EReference_redefinedBehavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_redefinedBehavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_redefinedBehavior->setEOpposite(otherEnd);
	    }
	}
	m_behavior_EReference_specification->setName("specification");
	m_behavior_EReference_specification->setEType(getBehavioralFeature_EClass());
	m_behavior_EReference_specification->setLowerBound(0);
	m_behavior_EReference_specification->setUpperBound(1);
	m_behavior_EReference_specification->setTransient(false);
	m_behavior_EReference_specification->setVolatile(false);
	m_behavior_EReference_specification->setChangeable(true);
	m_behavior_EReference_specification->setUnsettable(false);
	m_behavior_EReference_specification->setUnique(true);
	m_behavior_EReference_specification->setDerived(false);
	m_behavior_EReference_specification->setOrdered(false);
	m_behavior_EReference_specification->setContainment(false);
	m_behavior_EReference_specification->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavior_EReference_specification->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavioralFeature_EReference_method();
		if (otherEnd != nullptr)
	    {
	   		m_behavior_EReference_specification->setEOpposite(otherEnd);
	    }
	}
	
	m_behavior_EOperation_behavioredClassifier_Element->setEType(getBehavioredClassifier_EClass());
	m_behavior_EOperation_behavioredClassifier_Element->setName("behavioredClassifier");
	m_behavior_EOperation_behavioredClassifier_Element->setLowerBound(0);
	m_behavior_EOperation_behavioredClassifier_Element->setUpperBound(1);
	m_behavior_EOperation_behavioredClassifier_Element->setUnique(true);
	m_behavior_EOperation_behavioredClassifier_Element->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_behavioredClassifier_Element);
		parameter->setName("from");
		parameter->setEType(getElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setName("feature_of_context_classifier");
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_feature_of_context_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavior_EOperation_getContext->setEType(getBehavioredClassifier_EClass());
	m_behavior_EOperation_getContext->setName("getContext");
	m_behavior_EOperation_getContext->setLowerBound(0);
	m_behavior_EOperation_getContext->setUpperBound(1);
	m_behavior_EOperation_getContext->setUnique(true);
	m_behavior_EOperation_getContext->setOrdered(false);
	
	
	m_behavior_EOperation_inputParameters->setEType(getParameter_EClass());
	m_behavior_EOperation_inputParameters->setName("inputParameters");
	m_behavior_EOperation_inputParameters->setLowerBound(0);
	m_behavior_EOperation_inputParameters->setUpperBound(-1);
	m_behavior_EOperation_inputParameters->setUnique(true);
	m_behavior_EOperation_inputParameters->setOrdered(true);
	
	
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setName("most_one_behavior");
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_most_one_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavior_EOperation_outputParameters->setEType(getParameter_EClass());
	m_behavior_EOperation_outputParameters->setName("outputParameters");
	m_behavior_EOperation_outputParameters->setLowerBound(0);
	m_behavior_EOperation_outputParameters->setUpperBound(-1);
	m_behavior_EOperation_outputParameters->setUnique(true);
	m_behavior_EOperation_outputParameters->setOrdered(true);
	
	
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setName("parameters_match");
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setLowerBound(0);
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setUpperBound(1);
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setUnique(true);
	m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavior_EOperation_parameters_match_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeBehaviorExecutionSpecificationContent()
{
	m_behaviorExecutionSpecification_EClass->setName("BehaviorExecutionSpecification");
	m_behaviorExecutionSpecification_EClass->setAbstract(false);
	m_behaviorExecutionSpecification_EClass->setInterface(false);
	
	
	m_behaviorExecutionSpecification_EReference_behavior->setName("behavior");
	m_behaviorExecutionSpecification_EReference_behavior->setEType(getBehavior_EClass());
	m_behaviorExecutionSpecification_EReference_behavior->setLowerBound(0);
	m_behaviorExecutionSpecification_EReference_behavior->setUpperBound(1);
	m_behaviorExecutionSpecification_EReference_behavior->setTransient(false);
	m_behaviorExecutionSpecification_EReference_behavior->setVolatile(false);
	m_behaviorExecutionSpecification_EReference_behavior->setChangeable(true);
	m_behaviorExecutionSpecification_EReference_behavior->setUnsettable(false);
	m_behaviorExecutionSpecification_EReference_behavior->setUnique(true);
	m_behaviorExecutionSpecification_EReference_behavior->setDerived(false);
	m_behaviorExecutionSpecification_EReference_behavior->setOrdered(false);
	m_behaviorExecutionSpecification_EReference_behavior->setContainment(false);
	m_behaviorExecutionSpecification_EReference_behavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behaviorExecutionSpecification_EReference_behavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behaviorExecutionSpecification_EReference_behavior->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeBehavioralFeatureContent()
{
	m_behavioralFeature_EClass->setName("BehavioralFeature");
	m_behavioralFeature_EClass->setAbstract(true);
	m_behavioralFeature_EClass->setInterface(false);
	
	m_behavioralFeature_EAttribute_concurrency = getBehavioralFeature_EAttribute_concurrency();
	m_behavioralFeature_EAttribute_concurrency->setName("concurrency");
	m_behavioralFeature_EAttribute_concurrency->setEType(getCallConcurrencyKind_EEnum());
	m_behavioralFeature_EAttribute_concurrency->setLowerBound(1);
	m_behavioralFeature_EAttribute_concurrency->setUpperBound(1);
	m_behavioralFeature_EAttribute_concurrency->setTransient(false);
	m_behavioralFeature_EAttribute_concurrency->setVolatile(false);
	m_behavioralFeature_EAttribute_concurrency->setChangeable(true);
	m_behavioralFeature_EAttribute_concurrency->setUnsettable(false);
	m_behavioralFeature_EAttribute_concurrency->setUnique(true);
	m_behavioralFeature_EAttribute_concurrency->setDerived(false);
	m_behavioralFeature_EAttribute_concurrency->setOrdered(false);
	m_behavioralFeature_EAttribute_concurrency->setID(false);
	{
		std::string defaultValue = "sequential";
		if (!defaultValue.empty())
		{
		   m_behavioralFeature_EAttribute_concurrency->setDefaultValueLiteral(defaultValue);
		}
	}
	m_behavioralFeature_EAttribute_isAbstract = getBehavioralFeature_EAttribute_isAbstract();
	m_behavioralFeature_EAttribute_isAbstract->setName("isAbstract");
	m_behavioralFeature_EAttribute_isAbstract->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_behavioralFeature_EAttribute_isAbstract->setLowerBound(1);
	m_behavioralFeature_EAttribute_isAbstract->setUpperBound(1);
	m_behavioralFeature_EAttribute_isAbstract->setTransient(false);
	m_behavioralFeature_EAttribute_isAbstract->setVolatile(false);
	m_behavioralFeature_EAttribute_isAbstract->setChangeable(true);
	m_behavioralFeature_EAttribute_isAbstract->setUnsettable(false);
	m_behavioralFeature_EAttribute_isAbstract->setUnique(true);
	m_behavioralFeature_EAttribute_isAbstract->setDerived(false);
	m_behavioralFeature_EAttribute_isAbstract->setOrdered(false);
	m_behavioralFeature_EAttribute_isAbstract->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_behavioralFeature_EAttribute_isAbstract->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_behavioralFeature_EReference_method->setName("method");
	m_behavioralFeature_EReference_method->setEType(getBehavior_EClass());
	m_behavioralFeature_EReference_method->setLowerBound(0);
	m_behavioralFeature_EReference_method->setUpperBound(-1);
	m_behavioralFeature_EReference_method->setTransient(false);
	m_behavioralFeature_EReference_method->setVolatile(false);
	m_behavioralFeature_EReference_method->setChangeable(true);
	m_behavioralFeature_EReference_method->setUnsettable(false);
	m_behavioralFeature_EReference_method->setUnique(true);
	m_behavioralFeature_EReference_method->setDerived(false);
	m_behavioralFeature_EReference_method->setOrdered(false);
	m_behavioralFeature_EReference_method->setContainment(false);
	m_behavioralFeature_EReference_method->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioralFeature_EReference_method->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavior_EReference_specification();
		if (otherEnd != nullptr)
	    {
	   		m_behavioralFeature_EReference_method->setEOpposite(otherEnd);
	    }
	}
	m_behavioralFeature_EReference_ownedParameter->setName("ownedParameter");
	m_behavioralFeature_EReference_ownedParameter->setEType(getParameter_EClass());
	m_behavioralFeature_EReference_ownedParameter->setLowerBound(0);
	m_behavioralFeature_EReference_ownedParameter->setUpperBound(-1);
	m_behavioralFeature_EReference_ownedParameter->setTransient(false);
	m_behavioralFeature_EReference_ownedParameter->setVolatile(false);
	m_behavioralFeature_EReference_ownedParameter->setChangeable(true);
	m_behavioralFeature_EReference_ownedParameter->setUnsettable(false);
	m_behavioralFeature_EReference_ownedParameter->setUnique(true);
	m_behavioralFeature_EReference_ownedParameter->setDerived(false);
	m_behavioralFeature_EReference_ownedParameter->setOrdered(true);
	m_behavioralFeature_EReference_ownedParameter->setContainment(true);
	m_behavioralFeature_EReference_ownedParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioralFeature_EReference_ownedParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameter_EReference_operation();
		if (otherEnd != nullptr)
	    {
	   		m_behavioralFeature_EReference_ownedParameter->setEOpposite(otherEnd);
	    }
	}
	m_behavioralFeature_EReference_ownedParameterSet->setName("ownedParameterSet");
	m_behavioralFeature_EReference_ownedParameterSet->setEType(getParameterSet_EClass());
	m_behavioralFeature_EReference_ownedParameterSet->setLowerBound(0);
	m_behavioralFeature_EReference_ownedParameterSet->setUpperBound(-1);
	m_behavioralFeature_EReference_ownedParameterSet->setTransient(false);
	m_behavioralFeature_EReference_ownedParameterSet->setVolatile(false);
	m_behavioralFeature_EReference_ownedParameterSet->setChangeable(true);
	m_behavioralFeature_EReference_ownedParameterSet->setUnsettable(false);
	m_behavioralFeature_EReference_ownedParameterSet->setUnique(true);
	m_behavioralFeature_EReference_ownedParameterSet->setDerived(false);
	m_behavioralFeature_EReference_ownedParameterSet->setOrdered(false);
	m_behavioralFeature_EReference_ownedParameterSet->setContainment(true);
	m_behavioralFeature_EReference_ownedParameterSet->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioralFeature_EReference_ownedParameterSet->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavioralFeature_EReference_ownedParameterSet->setEOpposite(otherEnd);
	    }
	}
	m_behavioralFeature_EReference_raisedException->setName("raisedException");
	m_behavioralFeature_EReference_raisedException->setEType(getType_EClass());
	m_behavioralFeature_EReference_raisedException->setLowerBound(0);
	m_behavioralFeature_EReference_raisedException->setUpperBound(-1);
	m_behavioralFeature_EReference_raisedException->setTransient(false);
	m_behavioralFeature_EReference_raisedException->setVolatile(false);
	m_behavioralFeature_EReference_raisedException->setChangeable(true);
	m_behavioralFeature_EReference_raisedException->setUnsettable(false);
	m_behavioralFeature_EReference_raisedException->setUnique(true);
	m_behavioralFeature_EReference_raisedException->setDerived(false);
	m_behavioralFeature_EReference_raisedException->setOrdered(false);
	m_behavioralFeature_EReference_raisedException->setContainment(false);
	m_behavioralFeature_EReference_raisedException->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioralFeature_EReference_raisedException->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavioralFeature_EReference_raisedException->setEOpposite(otherEnd);
	    }
	}
	
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setName("abstract_no_method");
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setLowerBound(0);
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setUpperBound(1);
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setUnique(true);
	m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioralFeature_EOperation_abstract_no_method_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setEType(getParameter_EClass());
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setName("createReturnResult");
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setLowerBound(1);
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setUpperBound(1);
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setUnique(true);
	m_behavioralFeature_EOperation_createReturnResult_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioralFeature_EOperation_createReturnResult_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioralFeature_EOperation_createReturnResult_String_Type);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavioralFeature_EOperation_inputParameters->setEType(getParameter_EClass());
	m_behavioralFeature_EOperation_inputParameters->setName("inputParameters");
	m_behavioralFeature_EOperation_inputParameters->setLowerBound(0);
	m_behavioralFeature_EOperation_inputParameters->setUpperBound(-1);
	m_behavioralFeature_EOperation_inputParameters->setUnique(true);
	m_behavioralFeature_EOperation_inputParameters->setOrdered(true);
	
	
	m_behavioralFeature_EOperation_outputParameters->setEType(getParameter_EClass());
	m_behavioralFeature_EOperation_outputParameters->setName("outputParameters");
	m_behavioralFeature_EOperation_outputParameters->setLowerBound(0);
	m_behavioralFeature_EOperation_outputParameters->setUpperBound(-1);
	m_behavioralFeature_EOperation_outputParameters->setUnique(true);
	m_behavioralFeature_EOperation_outputParameters->setOrdered(true);
	
	
	
}

void UmlPackageImpl::initializeBehavioredClassifierContent()
{
	m_behavioredClassifier_EClass->setName("BehavioredClassifier");
	m_behavioredClassifier_EClass->setAbstract(true);
	m_behavioredClassifier_EClass->setInterface(false);
	
	
	m_behavioredClassifier_EReference_classifierBehavior->setName("classifierBehavior");
	m_behavioredClassifier_EReference_classifierBehavior->setEType(getBehavior_EClass());
	m_behavioredClassifier_EReference_classifierBehavior->setLowerBound(0);
	m_behavioredClassifier_EReference_classifierBehavior->setUpperBound(1);
	m_behavioredClassifier_EReference_classifierBehavior->setTransient(false);
	m_behavioredClassifier_EReference_classifierBehavior->setVolatile(false);
	m_behavioredClassifier_EReference_classifierBehavior->setChangeable(true);
	m_behavioredClassifier_EReference_classifierBehavior->setUnsettable(false);
	m_behavioredClassifier_EReference_classifierBehavior->setUnique(true);
	m_behavioredClassifier_EReference_classifierBehavior->setDerived(false);
	m_behavioredClassifier_EReference_classifierBehavior->setOrdered(false);
	m_behavioredClassifier_EReference_classifierBehavior->setContainment(false);
	m_behavioredClassifier_EReference_classifierBehavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioredClassifier_EReference_classifierBehavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_behavioredClassifier_EReference_classifierBehavior->setEOpposite(otherEnd);
	    }
	}
	m_behavioredClassifier_EReference_interfaceRealization->setName("interfaceRealization");
	m_behavioredClassifier_EReference_interfaceRealization->setEType(getInterfaceRealization_EClass());
	m_behavioredClassifier_EReference_interfaceRealization->setLowerBound(0);
	m_behavioredClassifier_EReference_interfaceRealization->setUpperBound(-1);
	m_behavioredClassifier_EReference_interfaceRealization->setTransient(false);
	m_behavioredClassifier_EReference_interfaceRealization->setVolatile(false);
	m_behavioredClassifier_EReference_interfaceRealization->setChangeable(true);
	m_behavioredClassifier_EReference_interfaceRealization->setUnsettable(false);
	m_behavioredClassifier_EReference_interfaceRealization->setUnique(true);
	m_behavioredClassifier_EReference_interfaceRealization->setDerived(false);
	m_behavioredClassifier_EReference_interfaceRealization->setOrdered(false);
	m_behavioredClassifier_EReference_interfaceRealization->setContainment(true);
	m_behavioredClassifier_EReference_interfaceRealization->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioredClassifier_EReference_interfaceRealization->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInterfaceRealization_EReference_implementingClassifier();
		if (otherEnd != nullptr)
	    {
	   		m_behavioredClassifier_EReference_interfaceRealization->setEOpposite(otherEnd);
	    }
	}
	m_behavioredClassifier_EReference_ownedBehavior->setName("ownedBehavior");
	m_behavioredClassifier_EReference_ownedBehavior->setEType(getBehavior_EClass());
	m_behavioredClassifier_EReference_ownedBehavior->setLowerBound(0);
	m_behavioredClassifier_EReference_ownedBehavior->setUpperBound(-1);
	m_behavioredClassifier_EReference_ownedBehavior->setTransient(false);
	m_behavioredClassifier_EReference_ownedBehavior->setVolatile(false);
	m_behavioredClassifier_EReference_ownedBehavior->setChangeable(true);
	m_behavioredClassifier_EReference_ownedBehavior->setUnsettable(false);
	m_behavioredClassifier_EReference_ownedBehavior->setUnique(true);
	m_behavioredClassifier_EReference_ownedBehavior->setDerived(false);
	m_behavioredClassifier_EReference_ownedBehavior->setOrdered(false);
	m_behavioredClassifier_EReference_ownedBehavior->setContainment(true);
	m_behavioredClassifier_EReference_ownedBehavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_behavioredClassifier_EReference_ownedBehavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavior_EReference_behavioredClassifier();
		if (otherEnd != nullptr)
	    {
	   		m_behavioredClassifier_EReference_ownedBehavior->setEOpposite(otherEnd);
	    }
	}
	
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setName("class_behavior");
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_behavioredClassifier_EOperation_class_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setEType(getInterface_EClass());
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setName("getAllImplementedInterfaces");
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setLowerBound(0);
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setUpperBound(-1);
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setUnique(true);
	m_behavioredClassifier_EOperation_getAllImplementedInterfaces->setOrdered(false);
	
	
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setEType(getInterface_EClass());
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setName("getImplementedInterfaces");
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setLowerBound(0);
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setUpperBound(-1);
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setUnique(true);
	m_behavioredClassifier_EOperation_getImplementedInterfaces->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeBroadcastSignalActionContent()
{
	m_broadcastSignalAction_EClass->setName("BroadcastSignalAction");
	m_broadcastSignalAction_EClass->setAbstract(false);
	m_broadcastSignalAction_EClass->setInterface(false);
	
	
	m_broadcastSignalAction_EReference_signal->setName("signal");
	m_broadcastSignalAction_EReference_signal->setEType(getSignal_EClass());
	m_broadcastSignalAction_EReference_signal->setLowerBound(1);
	m_broadcastSignalAction_EReference_signal->setUpperBound(1);
	m_broadcastSignalAction_EReference_signal->setTransient(false);
	m_broadcastSignalAction_EReference_signal->setVolatile(false);
	m_broadcastSignalAction_EReference_signal->setChangeable(true);
	m_broadcastSignalAction_EReference_signal->setUnsettable(false);
	m_broadcastSignalAction_EReference_signal->setUnique(true);
	m_broadcastSignalAction_EReference_signal->setDerived(false);
	m_broadcastSignalAction_EReference_signal->setOrdered(false);
	m_broadcastSignalAction_EReference_signal->setContainment(false);
	m_broadcastSignalAction_EReference_signal->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_broadcastSignalAction_EReference_signal->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_broadcastSignalAction_EReference_signal->setEOpposite(otherEnd);
	    }
	}
	
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setName("no_onport");
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setLowerBound(0);
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setUpperBound(1);
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setUnique(true);
	m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setName("number_of_arguments");
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setLowerBound(0);
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setUpperBound(1);
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setUnique(true);
	m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_number_of_arguments_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setName("type_ordering_multiplicity");
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_broadcastSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCallActionContent()
{
	m_callAction_EClass->setName("CallAction");
	m_callAction_EClass->setAbstract(true);
	m_callAction_EClass->setInterface(false);
	
	m_callAction_EAttribute_isSynchronous = getCallAction_EAttribute_isSynchronous();
	m_callAction_EAttribute_isSynchronous->setName("isSynchronous");
	m_callAction_EAttribute_isSynchronous->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_callAction_EAttribute_isSynchronous->setLowerBound(1);
	m_callAction_EAttribute_isSynchronous->setUpperBound(1);
	m_callAction_EAttribute_isSynchronous->setTransient(false);
	m_callAction_EAttribute_isSynchronous->setVolatile(false);
	m_callAction_EAttribute_isSynchronous->setChangeable(true);
	m_callAction_EAttribute_isSynchronous->setUnsettable(false);
	m_callAction_EAttribute_isSynchronous->setUnique(true);
	m_callAction_EAttribute_isSynchronous->setDerived(false);
	m_callAction_EAttribute_isSynchronous->setOrdered(false);
	m_callAction_EAttribute_isSynchronous->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_callAction_EAttribute_isSynchronous->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_callAction_EReference_result->setName("result");
	m_callAction_EReference_result->setEType(getOutputPin_EClass());
	m_callAction_EReference_result->setLowerBound(0);
	m_callAction_EReference_result->setUpperBound(-1);
	m_callAction_EReference_result->setTransient(false);
	m_callAction_EReference_result->setVolatile(false);
	m_callAction_EReference_result->setChangeable(true);
	m_callAction_EReference_result->setUnsettable(false);
	m_callAction_EReference_result->setUnique(true);
	m_callAction_EReference_result->setDerived(false);
	m_callAction_EReference_result->setOrdered(true);
	m_callAction_EReference_result->setContainment(true);
	m_callAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_callAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOutputPin_EReference_callAction();
		if (otherEnd != nullptr)
	    {
	   		m_callAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setName("argument_pins");
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setUnique(true);
	m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_argument_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_callAction_EOperation_inputParameters->setEType(getParameter_EClass());
	m_callAction_EOperation_inputParameters->setName("inputParameters");
	m_callAction_EOperation_inputParameters->setLowerBound(0);
	m_callAction_EOperation_inputParameters->setUpperBound(-1);
	m_callAction_EOperation_inputParameters->setUnique(true);
	m_callAction_EOperation_inputParameters->setOrdered(true);
	
	
	m_callAction_EOperation_outputParameters->setEType(getParameter_EClass());
	m_callAction_EOperation_outputParameters->setName("outputParameters");
	m_callAction_EOperation_outputParameters->setLowerBound(0);
	m_callAction_EOperation_outputParameters->setUpperBound(-1);
	m_callAction_EOperation_outputParameters->setUnique(true);
	m_callAction_EOperation_outputParameters->setOrdered(true);
	
	
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setName("result_pins");
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setUnique(true);
	m_callAction_EOperation_result_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_result_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_result_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setName("synchronous_call");
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setLowerBound(0);
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setUpperBound(1);
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setUnique(true);
	m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callAction_EOperation_synchronous_call_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCallBehaviorActionContent()
{
	m_callBehaviorAction_EClass->setName("CallBehaviorAction");
	m_callBehaviorAction_EClass->setAbstract(false);
	m_callBehaviorAction_EClass->setInterface(false);
	
	
	m_callBehaviorAction_EReference_behavior->setName("behavior");
	m_callBehaviorAction_EReference_behavior->setEType(getBehavior_EClass());
	m_callBehaviorAction_EReference_behavior->setLowerBound(1);
	m_callBehaviorAction_EReference_behavior->setUpperBound(1);
	m_callBehaviorAction_EReference_behavior->setTransient(false);
	m_callBehaviorAction_EReference_behavior->setVolatile(false);
	m_callBehaviorAction_EReference_behavior->setChangeable(true);
	m_callBehaviorAction_EReference_behavior->setUnsettable(false);
	m_callBehaviorAction_EReference_behavior->setUnique(true);
	m_callBehaviorAction_EReference_behavior->setDerived(false);
	m_callBehaviorAction_EReference_behavior->setOrdered(false);
	m_callBehaviorAction_EReference_behavior->setContainment(false);
	m_callBehaviorAction_EReference_behavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_callBehaviorAction_EReference_behavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_callBehaviorAction_EReference_behavior->setEOpposite(otherEnd);
	    }
	}
	
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setName("no_onport");
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setLowerBound(0);
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setUpperBound(1);
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setUnique(true);
	m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCallEventContent()
{
	m_callEvent_EClass->setName("CallEvent");
	m_callEvent_EClass->setAbstract(false);
	m_callEvent_EClass->setInterface(false);
	
	
	m_callEvent_EReference_operation->setName("operation");
	m_callEvent_EReference_operation->setEType(getOperation_EClass());
	m_callEvent_EReference_operation->setLowerBound(1);
	m_callEvent_EReference_operation->setUpperBound(1);
	m_callEvent_EReference_operation->setTransient(false);
	m_callEvent_EReference_operation->setVolatile(false);
	m_callEvent_EReference_operation->setChangeable(true);
	m_callEvent_EReference_operation->setUnsettable(false);
	m_callEvent_EReference_operation->setUnique(true);
	m_callEvent_EReference_operation->setDerived(false);
	m_callEvent_EReference_operation->setOrdered(false);
	m_callEvent_EReference_operation->setContainment(false);
	m_callEvent_EReference_operation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_callEvent_EReference_operation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_callEvent_EReference_operation->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeCallOperationActionContent()
{
	m_callOperationAction_EClass->setName("CallOperationAction");
	m_callOperationAction_EClass->setAbstract(false);
	m_callOperationAction_EClass->setInterface(false);
	
	
	m_callOperationAction_EReference_operation->setName("operation");
	m_callOperationAction_EReference_operation->setEType(getOperation_EClass());
	m_callOperationAction_EReference_operation->setLowerBound(1);
	m_callOperationAction_EReference_operation->setUpperBound(1);
	m_callOperationAction_EReference_operation->setTransient(false);
	m_callOperationAction_EReference_operation->setVolatile(false);
	m_callOperationAction_EReference_operation->setChangeable(true);
	m_callOperationAction_EReference_operation->setUnsettable(false);
	m_callOperationAction_EReference_operation->setUnique(true);
	m_callOperationAction_EReference_operation->setDerived(false);
	m_callOperationAction_EReference_operation->setOrdered(false);
	m_callOperationAction_EReference_operation->setContainment(false);
	m_callOperationAction_EReference_operation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_callOperationAction_EReference_operation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_callOperationAction_EReference_operation->setEOpposite(otherEnd);
	    }
	}
	m_callOperationAction_EReference_target->setName("target");
	m_callOperationAction_EReference_target->setEType(getInputPin_EClass());
	m_callOperationAction_EReference_target->setLowerBound(1);
	m_callOperationAction_EReference_target->setUpperBound(1);
	m_callOperationAction_EReference_target->setTransient(false);
	m_callOperationAction_EReference_target->setVolatile(false);
	m_callOperationAction_EReference_target->setChangeable(true);
	m_callOperationAction_EReference_target->setUnsettable(false);
	m_callOperationAction_EReference_target->setUnique(true);
	m_callOperationAction_EReference_target->setDerived(false);
	m_callOperationAction_EReference_target->setOrdered(false);
	m_callOperationAction_EReference_target->setContainment(true);
	m_callOperationAction_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_callOperationAction_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInputPin_EReference_callOperationAction();
		if (otherEnd != nullptr)
	    {
	   		m_callOperationAction_EReference_target->setEOpposite(otherEnd);
	    }
	}
	
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setName("type_target_pin");
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUnique(true);
	m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_callOperationAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCentralBufferNodeContent()
{
	m_centralBufferNode_EClass->setName("CentralBufferNode");
	m_centralBufferNode_EClass->setAbstract(false);
	m_centralBufferNode_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeChangeEventContent()
{
	m_changeEvent_EClass->setName("ChangeEvent");
	m_changeEvent_EClass->setAbstract(false);
	m_changeEvent_EClass->setInterface(false);
	
	
	m_changeEvent_EReference_changeExpression->setName("changeExpression");
	m_changeEvent_EReference_changeExpression->setEType(getValueSpecification_EClass());
	m_changeEvent_EReference_changeExpression->setLowerBound(1);
	m_changeEvent_EReference_changeExpression->setUpperBound(1);
	m_changeEvent_EReference_changeExpression->setTransient(false);
	m_changeEvent_EReference_changeExpression->setVolatile(false);
	m_changeEvent_EReference_changeExpression->setChangeable(true);
	m_changeEvent_EReference_changeExpression->setUnsettable(false);
	m_changeEvent_EReference_changeExpression->setUnique(true);
	m_changeEvent_EReference_changeExpression->setDerived(false);
	m_changeEvent_EReference_changeExpression->setOrdered(false);
	m_changeEvent_EReference_changeExpression->setContainment(true);
	m_changeEvent_EReference_changeExpression->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_changeEvent_EReference_changeExpression->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_changeEvent_EReference_changeExpression->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeClassContent()
{
	m_class_EClass->setName("Class");
	m_class_EClass->setAbstract(false);
	m_class_EClass->setInterface(false);
	
	m_class_EAttribute_isActive = getClass_EAttribute_isActive();
	m_class_EAttribute_isActive->setName("isActive");
	m_class_EAttribute_isActive->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_class_EAttribute_isActive->setLowerBound(1);
	m_class_EAttribute_isActive->setUpperBound(1);
	m_class_EAttribute_isActive->setTransient(false);
	m_class_EAttribute_isActive->setVolatile(false);
	m_class_EAttribute_isActive->setChangeable(true);
	m_class_EAttribute_isActive->setUnsettable(false);
	m_class_EAttribute_isActive->setUnique(true);
	m_class_EAttribute_isActive->setDerived(false);
	m_class_EAttribute_isActive->setOrdered(false);
	m_class_EAttribute_isActive->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_class_EAttribute_isActive->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_class_EReference_extension->setName("extension");
	m_class_EReference_extension->setEType(getExtension_EClass());
	m_class_EReference_extension->setLowerBound(0);
	m_class_EReference_extension->setUpperBound(-1);
	m_class_EReference_extension->setTransient(true);
	m_class_EReference_extension->setVolatile(true);
	m_class_EReference_extension->setChangeable(false);
	m_class_EReference_extension->setUnsettable(false);
	m_class_EReference_extension->setUnique(true);
	m_class_EReference_extension->setDerived(true);
	m_class_EReference_extension->setOrdered(false);
	m_class_EReference_extension->setContainment(false);
	m_class_EReference_extension->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_class_EReference_extension->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExtension_EReference_metaclass();
		if (otherEnd != nullptr)
	    {
	   		m_class_EReference_extension->setEOpposite(otherEnd);
	    }
	}
	m_class_EReference_nestedClassifier->setName("nestedClassifier");
	m_class_EReference_nestedClassifier->setEType(getClassifier_EClass());
	m_class_EReference_nestedClassifier->setLowerBound(0);
	m_class_EReference_nestedClassifier->setUpperBound(-1);
	m_class_EReference_nestedClassifier->setTransient(false);
	m_class_EReference_nestedClassifier->setVolatile(false);
	m_class_EReference_nestedClassifier->setChangeable(true);
	m_class_EReference_nestedClassifier->setUnsettable(false);
	m_class_EReference_nestedClassifier->setUnique(true);
	m_class_EReference_nestedClassifier->setDerived(false);
	m_class_EReference_nestedClassifier->setOrdered(true);
	m_class_EReference_nestedClassifier->setContainment(true);
	m_class_EReference_nestedClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_class_EReference_nestedClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_class_EReference_nestedClassifier->setEOpposite(otherEnd);
	    }
	}
	m_class_EReference_ownedOperation->setName("ownedOperation");
	m_class_EReference_ownedOperation->setEType(getOperation_EClass());
	m_class_EReference_ownedOperation->setLowerBound(0);
	m_class_EReference_ownedOperation->setUpperBound(-1);
	m_class_EReference_ownedOperation->setTransient(false);
	m_class_EReference_ownedOperation->setVolatile(false);
	m_class_EReference_ownedOperation->setChangeable(true);
	m_class_EReference_ownedOperation->setUnsettable(false);
	m_class_EReference_ownedOperation->setUnique(true);
	m_class_EReference_ownedOperation->setDerived(false);
	m_class_EReference_ownedOperation->setOrdered(true);
	m_class_EReference_ownedOperation->setContainment(true);
	m_class_EReference_ownedOperation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_class_EReference_ownedOperation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOperation_EReference_class();
		if (otherEnd != nullptr)
	    {
	   		m_class_EReference_ownedOperation->setEOpposite(otherEnd);
	    }
	}
	m_class_EReference_ownedReception->setName("ownedReception");
	m_class_EReference_ownedReception->setEType(getReception_EClass());
	m_class_EReference_ownedReception->setLowerBound(0);
	m_class_EReference_ownedReception->setUpperBound(-1);
	m_class_EReference_ownedReception->setTransient(false);
	m_class_EReference_ownedReception->setVolatile(false);
	m_class_EReference_ownedReception->setChangeable(true);
	m_class_EReference_ownedReception->setUnsettable(false);
	m_class_EReference_ownedReception->setUnique(true);
	m_class_EReference_ownedReception->setDerived(false);
	m_class_EReference_ownedReception->setOrdered(false);
	m_class_EReference_ownedReception->setContainment(true);
	m_class_EReference_ownedReception->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_class_EReference_ownedReception->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_class_EReference_ownedReception->setEOpposite(otherEnd);
	    }
	}
	m_class_EReference_superClass->setName("superClass");
	m_class_EReference_superClass->setEType(getClass_EClass());
	m_class_EReference_superClass->setLowerBound(0);
	m_class_EReference_superClass->setUpperBound(-1);
	m_class_EReference_superClass->setTransient(true);
	m_class_EReference_superClass->setVolatile(true);
	m_class_EReference_superClass->setChangeable(true);
	m_class_EReference_superClass->setUnsettable(false);
	m_class_EReference_superClass->setUnique(true);
	m_class_EReference_superClass->setDerived(true);
	m_class_EReference_superClass->setOrdered(false);
	m_class_EReference_superClass->setContainment(false);
	m_class_EReference_superClass->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_class_EReference_superClass->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_class_EReference_superClass->setEOpposite(otherEnd);
	    }
	}
	
	m_class_EOperation_createOwnedOperation_String_Type->setEType(getOperation_EClass());
	m_class_EOperation_createOwnedOperation_String_Type->setName("createOwnedOperation");
	m_class_EOperation_createOwnedOperation_String_Type->setLowerBound(1);
	m_class_EOperation_createOwnedOperation_String_Type->setUpperBound(1);
	m_class_EOperation_createOwnedOperation_String_Type->setUnique(true);
	m_class_EOperation_createOwnedOperation_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_createOwnedOperation_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_createOwnedOperation_String_Type);
		parameter->setName("returnType");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_class_EOperation_getExtensions->setEType(getExtension_EClass());
	m_class_EOperation_getExtensions->setName("getExtensions");
	m_class_EOperation_getExtensions->setLowerBound(0);
	m_class_EOperation_getExtensions->setUpperBound(-1);
	m_class_EOperation_getExtensions->setUnique(true);
	m_class_EOperation_getExtensions->setOrdered(false);
	
	
	m_class_EOperation_getSuperClasses->setEType(getClass_EClass());
	m_class_EOperation_getSuperClasses->setName("getSuperClasses");
	m_class_EOperation_getSuperClasses->setLowerBound(0);
	m_class_EOperation_getSuperClasses->setUpperBound(-1);
	m_class_EOperation_getSuperClasses->setUnique(true);
	m_class_EOperation_getSuperClasses->setOrdered(false);
	
	
	m_class_EOperation_isMetaclass->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_class_EOperation_isMetaclass->setName("isMetaclass");
	m_class_EOperation_isMetaclass->setLowerBound(1);
	m_class_EOperation_isMetaclass->setUpperBound(1);
	m_class_EOperation_isMetaclass->setUnique(true);
	m_class_EOperation_isMetaclass->setOrdered(false);
	
	
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setName("passive_class");
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setLowerBound(0);
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setUpperBound(1);
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setUnique(true);
	m_class_EOperation_passive_class_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_passive_class_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_class_EOperation_passive_class_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClassifierContent()
{
	m_classifier_EClass->setName("Classifier");
	m_classifier_EClass->setAbstract(true);
	m_classifier_EClass->setInterface(false);
	
	m_classifier_EAttribute_isAbstract = getClassifier_EAttribute_isAbstract();
	m_classifier_EAttribute_isAbstract->setName("isAbstract");
	m_classifier_EAttribute_isAbstract->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifier_EAttribute_isAbstract->setLowerBound(1);
	m_classifier_EAttribute_isAbstract->setUpperBound(1);
	m_classifier_EAttribute_isAbstract->setTransient(false);
	m_classifier_EAttribute_isAbstract->setVolatile(false);
	m_classifier_EAttribute_isAbstract->setChangeable(true);
	m_classifier_EAttribute_isAbstract->setUnsettable(false);
	m_classifier_EAttribute_isAbstract->setUnique(true);
	m_classifier_EAttribute_isAbstract->setDerived(false);
	m_classifier_EAttribute_isAbstract->setOrdered(false);
	m_classifier_EAttribute_isAbstract->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_classifier_EAttribute_isAbstract->setDefaultValueLiteral(defaultValue);
		}
	}
	m_classifier_EAttribute_isFinalSpecialization = getClassifier_EAttribute_isFinalSpecialization();
	m_classifier_EAttribute_isFinalSpecialization->setName("isFinalSpecialization");
	m_classifier_EAttribute_isFinalSpecialization->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifier_EAttribute_isFinalSpecialization->setLowerBound(1);
	m_classifier_EAttribute_isFinalSpecialization->setUpperBound(1);
	m_classifier_EAttribute_isFinalSpecialization->setTransient(false);
	m_classifier_EAttribute_isFinalSpecialization->setVolatile(false);
	m_classifier_EAttribute_isFinalSpecialization->setChangeable(true);
	m_classifier_EAttribute_isFinalSpecialization->setUnsettable(false);
	m_classifier_EAttribute_isFinalSpecialization->setUnique(true);
	m_classifier_EAttribute_isFinalSpecialization->setDerived(false);
	m_classifier_EAttribute_isFinalSpecialization->setOrdered(false);
	m_classifier_EAttribute_isFinalSpecialization->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_classifier_EAttribute_isFinalSpecialization->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_classifier_EReference_attribute->setName("attribute");
	m_classifier_EReference_attribute->setEType(getProperty_EClass());
	m_classifier_EReference_attribute->setLowerBound(0);
	m_classifier_EReference_attribute->setUpperBound(-1);
	m_classifier_EReference_attribute->setTransient(true);
	m_classifier_EReference_attribute->setVolatile(true);
	m_classifier_EReference_attribute->setChangeable(false);
	m_classifier_EReference_attribute->setUnsettable(false);
	m_classifier_EReference_attribute->setUnique(true);
	m_classifier_EReference_attribute->setDerived(true);
	m_classifier_EReference_attribute->setOrdered(true);
	m_classifier_EReference_attribute->setContainment(false);
	m_classifier_EReference_attribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_attribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_attribute->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_collaborationUse->setName("collaborationUse");
	m_classifier_EReference_collaborationUse->setEType(getCollaborationUse_EClass());
	m_classifier_EReference_collaborationUse->setLowerBound(0);
	m_classifier_EReference_collaborationUse->setUpperBound(-1);
	m_classifier_EReference_collaborationUse->setTransient(false);
	m_classifier_EReference_collaborationUse->setVolatile(false);
	m_classifier_EReference_collaborationUse->setChangeable(true);
	m_classifier_EReference_collaborationUse->setUnsettable(false);
	m_classifier_EReference_collaborationUse->setUnique(true);
	m_classifier_EReference_collaborationUse->setDerived(false);
	m_classifier_EReference_collaborationUse->setOrdered(false);
	m_classifier_EReference_collaborationUse->setContainment(true);
	m_classifier_EReference_collaborationUse->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_collaborationUse->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_collaborationUse->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_feature->setName("feature");
	m_classifier_EReference_feature->setEType(getFeature_EClass());
	m_classifier_EReference_feature->setLowerBound(0);
	m_classifier_EReference_feature->setUpperBound(-1);
	m_classifier_EReference_feature->setTransient(true);
	m_classifier_EReference_feature->setVolatile(true);
	m_classifier_EReference_feature->setChangeable(false);
	m_classifier_EReference_feature->setUnsettable(false);
	m_classifier_EReference_feature->setUnique(true);
	m_classifier_EReference_feature->setDerived(true);
	m_classifier_EReference_feature->setOrdered(false);
	m_classifier_EReference_feature->setContainment(false);
	m_classifier_EReference_feature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_feature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getFeature_EReference_featuringClassifier();
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_feature->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_general->setName("general");
	m_classifier_EReference_general->setEType(getClassifier_EClass());
	m_classifier_EReference_general->setLowerBound(0);
	m_classifier_EReference_general->setUpperBound(-1);
	m_classifier_EReference_general->setTransient(true);
	m_classifier_EReference_general->setVolatile(true);
	m_classifier_EReference_general->setChangeable(true);
	m_classifier_EReference_general->setUnsettable(false);
	m_classifier_EReference_general->setUnique(true);
	m_classifier_EReference_general->setDerived(true);
	m_classifier_EReference_general->setOrdered(false);
	m_classifier_EReference_general->setContainment(false);
	m_classifier_EReference_general->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_general->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_general->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_generalization->setName("generalization");
	m_classifier_EReference_generalization->setEType(getGeneralization_EClass());
	m_classifier_EReference_generalization->setLowerBound(0);
	m_classifier_EReference_generalization->setUpperBound(-1);
	m_classifier_EReference_generalization->setTransient(false);
	m_classifier_EReference_generalization->setVolatile(false);
	m_classifier_EReference_generalization->setChangeable(true);
	m_classifier_EReference_generalization->setUnsettable(false);
	m_classifier_EReference_generalization->setUnique(true);
	m_classifier_EReference_generalization->setDerived(false);
	m_classifier_EReference_generalization->setOrdered(false);
	m_classifier_EReference_generalization->setContainment(true);
	m_classifier_EReference_generalization->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_generalization->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralization_EReference_specific();
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_generalization->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_inheritedMember->setName("inheritedMember");
	m_classifier_EReference_inheritedMember->setEType(getNamedElement_EClass());
	m_classifier_EReference_inheritedMember->setLowerBound(0);
	m_classifier_EReference_inheritedMember->setUpperBound(-1);
	m_classifier_EReference_inheritedMember->setTransient(true);
	m_classifier_EReference_inheritedMember->setVolatile(true);
	m_classifier_EReference_inheritedMember->setChangeable(false);
	m_classifier_EReference_inheritedMember->setUnsettable(false);
	m_classifier_EReference_inheritedMember->setUnique(true);
	m_classifier_EReference_inheritedMember->setDerived(true);
	m_classifier_EReference_inheritedMember->setOrdered(false);
	m_classifier_EReference_inheritedMember->setContainment(false);
	m_classifier_EReference_inheritedMember->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_inheritedMember->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_inheritedMember->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_ownedUseCase->setName("ownedUseCase");
	m_classifier_EReference_ownedUseCase->setEType(getUseCase_EClass());
	m_classifier_EReference_ownedUseCase->setLowerBound(0);
	m_classifier_EReference_ownedUseCase->setUpperBound(-1);
	m_classifier_EReference_ownedUseCase->setTransient(false);
	m_classifier_EReference_ownedUseCase->setVolatile(false);
	m_classifier_EReference_ownedUseCase->setChangeable(true);
	m_classifier_EReference_ownedUseCase->setUnsettable(false);
	m_classifier_EReference_ownedUseCase->setUnique(true);
	m_classifier_EReference_ownedUseCase->setDerived(false);
	m_classifier_EReference_ownedUseCase->setOrdered(false);
	m_classifier_EReference_ownedUseCase->setContainment(true);
	m_classifier_EReference_ownedUseCase->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_ownedUseCase->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_ownedUseCase->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_powertypeExtent->setName("powertypeExtent");
	m_classifier_EReference_powertypeExtent->setEType(getGeneralizationSet_EClass());
	m_classifier_EReference_powertypeExtent->setLowerBound(0);
	m_classifier_EReference_powertypeExtent->setUpperBound(-1);
	m_classifier_EReference_powertypeExtent->setTransient(false);
	m_classifier_EReference_powertypeExtent->setVolatile(false);
	m_classifier_EReference_powertypeExtent->setChangeable(true);
	m_classifier_EReference_powertypeExtent->setUnsettable(false);
	m_classifier_EReference_powertypeExtent->setUnique(true);
	m_classifier_EReference_powertypeExtent->setDerived(false);
	m_classifier_EReference_powertypeExtent->setOrdered(false);
	m_classifier_EReference_powertypeExtent->setContainment(false);
	m_classifier_EReference_powertypeExtent->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_powertypeExtent->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralizationSet_EReference_powertype();
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_powertypeExtent->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_redefinedClassifier->setName("redefinedClassifier");
	m_classifier_EReference_redefinedClassifier->setEType(getClassifier_EClass());
	m_classifier_EReference_redefinedClassifier->setLowerBound(0);
	m_classifier_EReference_redefinedClassifier->setUpperBound(-1);
	m_classifier_EReference_redefinedClassifier->setTransient(false);
	m_classifier_EReference_redefinedClassifier->setVolatile(false);
	m_classifier_EReference_redefinedClassifier->setChangeable(true);
	m_classifier_EReference_redefinedClassifier->setUnsettable(false);
	m_classifier_EReference_redefinedClassifier->setUnique(true);
	m_classifier_EReference_redefinedClassifier->setDerived(false);
	m_classifier_EReference_redefinedClassifier->setOrdered(false);
	m_classifier_EReference_redefinedClassifier->setContainment(false);
	m_classifier_EReference_redefinedClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_redefinedClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_redefinedClassifier->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_representation->setName("representation");
	m_classifier_EReference_representation->setEType(getCollaborationUse_EClass());
	m_classifier_EReference_representation->setLowerBound(0);
	m_classifier_EReference_representation->setUpperBound(1);
	m_classifier_EReference_representation->setTransient(false);
	m_classifier_EReference_representation->setVolatile(false);
	m_classifier_EReference_representation->setChangeable(true);
	m_classifier_EReference_representation->setUnsettable(false);
	m_classifier_EReference_representation->setUnique(true);
	m_classifier_EReference_representation->setDerived(false);
	m_classifier_EReference_representation->setOrdered(false);
	m_classifier_EReference_representation->setContainment(false);
	m_classifier_EReference_representation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_representation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_representation->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_substitution->setName("substitution");
	m_classifier_EReference_substitution->setEType(getSubstitution_EClass());
	m_classifier_EReference_substitution->setLowerBound(0);
	m_classifier_EReference_substitution->setUpperBound(-1);
	m_classifier_EReference_substitution->setTransient(false);
	m_classifier_EReference_substitution->setVolatile(false);
	m_classifier_EReference_substitution->setChangeable(true);
	m_classifier_EReference_substitution->setUnsettable(false);
	m_classifier_EReference_substitution->setUnique(true);
	m_classifier_EReference_substitution->setDerived(false);
	m_classifier_EReference_substitution->setOrdered(false);
	m_classifier_EReference_substitution->setContainment(true);
	m_classifier_EReference_substitution->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_substitution->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getSubstitution_EReference_substitutingClassifier();
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_substitution->setEOpposite(otherEnd);
	    }
	}
	m_classifier_EReference_useCase->setName("useCase");
	m_classifier_EReference_useCase->setEType(getUseCase_EClass());
	m_classifier_EReference_useCase->setLowerBound(0);
	m_classifier_EReference_useCase->setUpperBound(-1);
	m_classifier_EReference_useCase->setTransient(false);
	m_classifier_EReference_useCase->setVolatile(false);
	m_classifier_EReference_useCase->setChangeable(true);
	m_classifier_EReference_useCase->setUnsettable(false);
	m_classifier_EReference_useCase->setUnique(true);
	m_classifier_EReference_useCase->setDerived(false);
	m_classifier_EReference_useCase->setOrdered(false);
	m_classifier_EReference_useCase->setContainment(false);
	m_classifier_EReference_useCase->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifier_EReference_useCase->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getUseCase_EReference_subject();
		if (otherEnd != nullptr)
	    {
	   		m_classifier_EReference_useCase->setEOpposite(otherEnd);
	    }
	}
	
	m_classifier_EOperation_allAttributes->setEType(getProperty_EClass());
	m_classifier_EOperation_allAttributes->setName("allAttributes");
	m_classifier_EOperation_allAttributes->setLowerBound(0);
	m_classifier_EOperation_allAttributes->setUpperBound(-1);
	m_classifier_EOperation_allAttributes->setUnique(true);
	m_classifier_EOperation_allAttributes->setOrdered(true);
	
	
	m_classifier_EOperation_allFeatures->setEType(getFeature_EClass());
	m_classifier_EOperation_allFeatures->setName("allFeatures");
	m_classifier_EOperation_allFeatures->setLowerBound(0);
	m_classifier_EOperation_allFeatures->setUpperBound(-1);
	m_classifier_EOperation_allFeatures->setUnique(true);
	m_classifier_EOperation_allFeatures->setOrdered(false);
	
	
	m_classifier_EOperation_allParents->setEType(getClassifier_EClass());
	m_classifier_EOperation_allParents->setName("allParents");
	m_classifier_EOperation_allParents->setLowerBound(0);
	m_classifier_EOperation_allParents->setUpperBound(-1);
	m_classifier_EOperation_allParents->setUnique(true);
	m_classifier_EOperation_allParents->setOrdered(false);
	
	
	m_classifier_EOperation_allRealizedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_allRealizedInterfaces->setName("allRealizedInterfaces");
	m_classifier_EOperation_allRealizedInterfaces->setLowerBound(0);
	m_classifier_EOperation_allRealizedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_allRealizedInterfaces->setUnique(true);
	m_classifier_EOperation_allRealizedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_allSlottableFeatures->setEType(getStructuralFeature_EClass());
	m_classifier_EOperation_allSlottableFeatures->setName("allSlottableFeatures");
	m_classifier_EOperation_allSlottableFeatures->setLowerBound(0);
	m_classifier_EOperation_allSlottableFeatures->setUpperBound(-1);
	m_classifier_EOperation_allSlottableFeatures->setUnique(true);
	m_classifier_EOperation_allSlottableFeatures->setOrdered(false);
	
	
	m_classifier_EOperation_allUsedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_allUsedInterfaces->setName("allUsedInterfaces");
	m_classifier_EOperation_allUsedInterfaces->setLowerBound(0);
	m_classifier_EOperation_allUsedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_allUsedInterfaces->setUnique(true);
	m_classifier_EOperation_allUsedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_directlyRealizedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_directlyRealizedInterfaces->setName("directlyRealizedInterfaces");
	m_classifier_EOperation_directlyRealizedInterfaces->setLowerBound(0);
	m_classifier_EOperation_directlyRealizedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_directlyRealizedInterfaces->setUnique(true);
	m_classifier_EOperation_directlyRealizedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_directlyUsedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_directlyUsedInterfaces->setName("directlyUsedInterfaces");
	m_classifier_EOperation_directlyUsedInterfaces->setLowerBound(0);
	m_classifier_EOperation_directlyUsedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_directlyUsedInterfaces->setUnique(true);
	m_classifier_EOperation_directlyUsedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_getAllAttributes->setEType(getProperty_EClass());
	m_classifier_EOperation_getAllAttributes->setName("getAllAttributes");
	m_classifier_EOperation_getAllAttributes->setLowerBound(0);
	m_classifier_EOperation_getAllAttributes->setUpperBound(-1);
	m_classifier_EOperation_getAllAttributes->setUnique(true);
	m_classifier_EOperation_getAllAttributes->setOrdered(false);
	
	
	m_classifier_EOperation_getAllOperations->setEType(getOperation_EClass());
	m_classifier_EOperation_getAllOperations->setName("getAllOperations");
	m_classifier_EOperation_getAllOperations->setLowerBound(0);
	m_classifier_EOperation_getAllOperations->setUpperBound(-1);
	m_classifier_EOperation_getAllOperations->setUnique(true);
	m_classifier_EOperation_getAllOperations->setOrdered(false);
	
	
	m_classifier_EOperation_getAllUsedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_getAllUsedInterfaces->setName("getAllUsedInterfaces");
	m_classifier_EOperation_getAllUsedInterfaces->setLowerBound(0);
	m_classifier_EOperation_getAllUsedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_getAllUsedInterfaces->setUnique(true);
	m_classifier_EOperation_getAllUsedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_getGenerals->setEType(getClassifier_EClass());
	m_classifier_EOperation_getGenerals->setName("getGenerals");
	m_classifier_EOperation_getGenerals->setLowerBound(0);
	m_classifier_EOperation_getGenerals->setUpperBound(-1);
	m_classifier_EOperation_getGenerals->setUnique(true);
	m_classifier_EOperation_getGenerals->setOrdered(false);
	
	
	m_classifier_EOperation_getInheritedMembers->setEType(getNamedElement_EClass());
	m_classifier_EOperation_getInheritedMembers->setName("getInheritedMembers");
	m_classifier_EOperation_getInheritedMembers->setLowerBound(0);
	m_classifier_EOperation_getInheritedMembers->setUpperBound(-1);
	m_classifier_EOperation_getInheritedMembers->setUnique(true);
	m_classifier_EOperation_getInheritedMembers->setOrdered(false);
	
	
	m_classifier_EOperation_getOperation_String_Type->setEType(getOperation_EClass());
	m_classifier_EOperation_getOperation_String_Type->setName("getOperation");
	m_classifier_EOperation_getOperation_String_Type->setLowerBound(0);
	m_classifier_EOperation_getOperation_String_Type->setUpperBound(1);
	m_classifier_EOperation_getOperation_String_Type->setUnique(true);
	m_classifier_EOperation_getOperation_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Type);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Type);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_getOperation_String_Boolean->setEType(getOperation_EClass());
	m_classifier_EOperation_getOperation_String_Boolean->setName("getOperation");
	m_classifier_EOperation_getOperation_String_Boolean->setLowerBound(0);
	m_classifier_EOperation_getOperation_String_Boolean->setUpperBound(1);
	m_classifier_EOperation_getOperation_String_Boolean->setUnique(true);
	m_classifier_EOperation_getOperation_String_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Boolean);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Boolean);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Boolean);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_getOperation_String_Boolean);
		parameter->setName("ignoreCase");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_getOperations->setEType(getOperation_EClass());
	m_classifier_EOperation_getOperations->setName("getOperations");
	m_classifier_EOperation_getOperations->setLowerBound(0);
	m_classifier_EOperation_getOperations->setUpperBound(-1);
	m_classifier_EOperation_getOperations->setUnique(true);
	m_classifier_EOperation_getOperations->setOrdered(false);
	
	
	m_classifier_EOperation_getUsedInterfaces->setEType(getInterface_EClass());
	m_classifier_EOperation_getUsedInterfaces->setName("getUsedInterfaces");
	m_classifier_EOperation_getUsedInterfaces->setLowerBound(0);
	m_classifier_EOperation_getUsedInterfaces->setUpperBound(-1);
	m_classifier_EOperation_getUsedInterfaces->setUnique(true);
	m_classifier_EOperation_getUsedInterfaces->setOrdered(false);
	
	
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setName("hasVisibilityOf");
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setLowerBound(1);
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setUpperBound(1);
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setUnique(true);
	m_classifier_EOperation_hasVisibilityOf_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_hasVisibilityOf_NamedElement);
		parameter->setName("n");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_inherit_NamedElement->setEType(getNamedElement_EClass());
	m_classifier_EOperation_inherit_NamedElement->setName("inherit");
	m_classifier_EOperation_inherit_NamedElement->setLowerBound(0);
	m_classifier_EOperation_inherit_NamedElement->setUpperBound(-1);
	m_classifier_EOperation_inherit_NamedElement->setUnique(true);
	m_classifier_EOperation_inherit_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_inherit_NamedElement);
		parameter->setName("inhs");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_inheritableMembers_Classifier->setEType(getNamedElement_EClass());
	m_classifier_EOperation_inheritableMembers_Classifier->setName("inheritableMembers");
	m_classifier_EOperation_inheritableMembers_Classifier->setLowerBound(0);
	m_classifier_EOperation_inheritableMembers_Classifier->setUpperBound(-1);
	m_classifier_EOperation_inheritableMembers_Classifier->setUnique(true);
	m_classifier_EOperation_inheritableMembers_Classifier->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_inheritableMembers_Classifier);
		parameter->setName("c");
		parameter->setEType(getClassifier_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_isSubstitutableFor_Classifier->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifier_EOperation_isSubstitutableFor_Classifier->setName("isSubstitutableFor");
	m_classifier_EOperation_isSubstitutableFor_Classifier->setLowerBound(1);
	m_classifier_EOperation_isSubstitutableFor_Classifier->setUpperBound(1);
	m_classifier_EOperation_isSubstitutableFor_Classifier->setUnique(true);
	m_classifier_EOperation_isSubstitutableFor_Classifier->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_isSubstitutableFor_Classifier);
		parameter->setName("contract");
		parameter->setEType(getClassifier_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setName("maps_to_generalization_set");
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setUnique(true);
	m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_maySpecializeType_Classifier->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifier_EOperation_maySpecializeType_Classifier->setName("maySpecializeType");
	m_classifier_EOperation_maySpecializeType_Classifier->setLowerBound(1);
	m_classifier_EOperation_maySpecializeType_Classifier->setUpperBound(1);
	m_classifier_EOperation_maySpecializeType_Classifier->setUnique(true);
	m_classifier_EOperation_maySpecializeType_Classifier->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_maySpecializeType_Classifier);
		parameter->setName("c");
		parameter->setEType(getClassifier_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setName("no_cycles_in_generalization");
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setUnique(true);
	m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_no_cycles_in_generalization_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setName("non_final_parents");
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setUnique(true);
	m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_non_final_parents_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifier_EOperation_parents->setEType(getClassifier_EClass());
	m_classifier_EOperation_parents->setName("parents");
	m_classifier_EOperation_parents->setLowerBound(0);
	m_classifier_EOperation_parents->setUpperBound(-1);
	m_classifier_EOperation_parents->setUnique(true);
	m_classifier_EOperation_parents->setOrdered(false);
	
	
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setName("specialize_type");
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setUnique(true);
	m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifier_EOperation_specialize_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClassifierTemplateParameterContent()
{
	m_classifierTemplateParameter_EClass->setName("ClassifierTemplateParameter");
	m_classifierTemplateParameter_EClass->setAbstract(false);
	m_classifierTemplateParameter_EClass->setInterface(false);
	
	m_classifierTemplateParameter_EAttribute_allowSubstitutable = getClassifierTemplateParameter_EAttribute_allowSubstitutable();
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setName("allowSubstitutable");
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setLowerBound(1);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setUpperBound(1);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setTransient(false);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setVolatile(false);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setChangeable(true);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setUnsettable(false);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setUnique(true);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setDerived(false);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setOrdered(false);
	m_classifierTemplateParameter_EAttribute_allowSubstitutable->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_classifierTemplateParameter_EAttribute_allowSubstitutable->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_classifierTemplateParameter_EReference_constrainingClassifier->setName("constrainingClassifier");
	m_classifierTemplateParameter_EReference_constrainingClassifier->setEType(getClassifier_EClass());
	m_classifierTemplateParameter_EReference_constrainingClassifier->setLowerBound(0);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setUpperBound(-1);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setTransient(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setVolatile(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setChangeable(true);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setUnsettable(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setUnique(true);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setDerived(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setOrdered(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setContainment(false);
	m_classifierTemplateParameter_EReference_constrainingClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_classifierTemplateParameter_EReference_constrainingClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_classifierTemplateParameter_EReference_constrainingClassifier->setEOpposite(otherEnd);
	    }
	}
	
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setName("actual_is_classifier");
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_actual_is_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setName("constraining_classifiers_constrain_args");
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_args_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setName("constraining_classifiers_constrain_parametered_element");
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_constraining_classifiers_constrain_parametered_element_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setName("has_constraining_classifier");
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_has_constraining_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setName("matching_abstract");
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_matching_abstract_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setName("parametered_element_no_features");
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setLowerBound(0);
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setUpperBound(1);
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setUnique(true);
	m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_classifierTemplateParameter_EOperation_parametered_element_no_features_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClauseContent()
{
	m_clause_EClass->setName("Clause");
	m_clause_EClass->setAbstract(false);
	m_clause_EClass->setInterface(false);
	
	
	m_clause_EReference_body->setName("body");
	m_clause_EReference_body->setEType(getExecutableNode_EClass());
	m_clause_EReference_body->setLowerBound(0);
	m_clause_EReference_body->setUpperBound(-1);
	m_clause_EReference_body->setTransient(false);
	m_clause_EReference_body->setVolatile(false);
	m_clause_EReference_body->setChangeable(true);
	m_clause_EReference_body->setUnsettable(false);
	m_clause_EReference_body->setUnique(true);
	m_clause_EReference_body->setDerived(false);
	m_clause_EReference_body->setOrdered(false);
	m_clause_EReference_body->setContainment(false);
	m_clause_EReference_body->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_body->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_body->setEOpposite(otherEnd);
	    }
	}
	m_clause_EReference_bodyOutput->setName("bodyOutput");
	m_clause_EReference_bodyOutput->setEType(getOutputPin_EClass());
	m_clause_EReference_bodyOutput->setLowerBound(0);
	m_clause_EReference_bodyOutput->setUpperBound(-1);
	m_clause_EReference_bodyOutput->setTransient(false);
	m_clause_EReference_bodyOutput->setVolatile(false);
	m_clause_EReference_bodyOutput->setChangeable(true);
	m_clause_EReference_bodyOutput->setUnsettable(false);
	m_clause_EReference_bodyOutput->setUnique(true);
	m_clause_EReference_bodyOutput->setDerived(false);
	m_clause_EReference_bodyOutput->setOrdered(true);
	m_clause_EReference_bodyOutput->setContainment(false);
	m_clause_EReference_bodyOutput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_bodyOutput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_bodyOutput->setEOpposite(otherEnd);
	    }
	}
	m_clause_EReference_decider->setName("decider");
	m_clause_EReference_decider->setEType(getOutputPin_EClass());
	m_clause_EReference_decider->setLowerBound(1);
	m_clause_EReference_decider->setUpperBound(1);
	m_clause_EReference_decider->setTransient(false);
	m_clause_EReference_decider->setVolatile(false);
	m_clause_EReference_decider->setChangeable(true);
	m_clause_EReference_decider->setUnsettable(false);
	m_clause_EReference_decider->setUnique(true);
	m_clause_EReference_decider->setDerived(false);
	m_clause_EReference_decider->setOrdered(false);
	m_clause_EReference_decider->setContainment(false);
	m_clause_EReference_decider->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_decider->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_decider->setEOpposite(otherEnd);
	    }
	}
	m_clause_EReference_predecessorClause->setName("predecessorClause");
	m_clause_EReference_predecessorClause->setEType(getClause_EClass());
	m_clause_EReference_predecessorClause->setLowerBound(0);
	m_clause_EReference_predecessorClause->setUpperBound(-1);
	m_clause_EReference_predecessorClause->setTransient(false);
	m_clause_EReference_predecessorClause->setVolatile(false);
	m_clause_EReference_predecessorClause->setChangeable(true);
	m_clause_EReference_predecessorClause->setUnsettable(false);
	m_clause_EReference_predecessorClause->setUnique(true);
	m_clause_EReference_predecessorClause->setDerived(false);
	m_clause_EReference_predecessorClause->setOrdered(false);
	m_clause_EReference_predecessorClause->setContainment(false);
	m_clause_EReference_predecessorClause->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_predecessorClause->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClause_EReference_successorClause();
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_predecessorClause->setEOpposite(otherEnd);
	    }
	}
	m_clause_EReference_successorClause->setName("successorClause");
	m_clause_EReference_successorClause->setEType(getClause_EClass());
	m_clause_EReference_successorClause->setLowerBound(0);
	m_clause_EReference_successorClause->setUpperBound(-1);
	m_clause_EReference_successorClause->setTransient(false);
	m_clause_EReference_successorClause->setVolatile(false);
	m_clause_EReference_successorClause->setChangeable(true);
	m_clause_EReference_successorClause->setUnsettable(false);
	m_clause_EReference_successorClause->setUnique(true);
	m_clause_EReference_successorClause->setDerived(false);
	m_clause_EReference_successorClause->setOrdered(false);
	m_clause_EReference_successorClause->setContainment(false);
	m_clause_EReference_successorClause->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_successorClause->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClause_EReference_predecessorClause();
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_successorClause->setEOpposite(otherEnd);
	    }
	}
	m_clause_EReference_test->setName("test");
	m_clause_EReference_test->setEType(getExecutableNode_EClass());
	m_clause_EReference_test->setLowerBound(1);
	m_clause_EReference_test->setUpperBound(-1);
	m_clause_EReference_test->setTransient(false);
	m_clause_EReference_test->setVolatile(false);
	m_clause_EReference_test->setChangeable(true);
	m_clause_EReference_test->setUnsettable(false);
	m_clause_EReference_test->setUnique(true);
	m_clause_EReference_test->setDerived(false);
	m_clause_EReference_test->setOrdered(false);
	m_clause_EReference_test->setContainment(false);
	m_clause_EReference_test->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clause_EReference_test->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clause_EReference_test->setEOpposite(otherEnd);
	    }
	}
	
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setName("body_output_pins");
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_body_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setName("decider_output");
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setLowerBound(0);
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setUpperBound(1);
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setUnique(true);
	m_clause_EOperation_decider_output_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_decider_output_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_decider_output_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setName("test_and_body");
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setLowerBound(0);
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setUpperBound(1);
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setUnique(true);
	m_clause_EOperation_test_and_body_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_test_and_body_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clause_EOperation_test_and_body_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClearAssociationActionContent()
{
	m_clearAssociationAction_EClass->setName("ClearAssociationAction");
	m_clearAssociationAction_EClass->setAbstract(false);
	m_clearAssociationAction_EClass->setInterface(false);
	
	
	m_clearAssociationAction_EReference_association->setName("association");
	m_clearAssociationAction_EReference_association->setEType(getAssociation_EClass());
	m_clearAssociationAction_EReference_association->setLowerBound(1);
	m_clearAssociationAction_EReference_association->setUpperBound(1);
	m_clearAssociationAction_EReference_association->setTransient(false);
	m_clearAssociationAction_EReference_association->setVolatile(false);
	m_clearAssociationAction_EReference_association->setChangeable(true);
	m_clearAssociationAction_EReference_association->setUnsettable(false);
	m_clearAssociationAction_EReference_association->setUnique(true);
	m_clearAssociationAction_EReference_association->setDerived(false);
	m_clearAssociationAction_EReference_association->setOrdered(false);
	m_clearAssociationAction_EReference_association->setContainment(false);
	m_clearAssociationAction_EReference_association->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clearAssociationAction_EReference_association->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clearAssociationAction_EReference_association->setEOpposite(otherEnd);
	    }
	}
	m_clearAssociationAction_EReference_object->setName("object");
	m_clearAssociationAction_EReference_object->setEType(getInputPin_EClass());
	m_clearAssociationAction_EReference_object->setLowerBound(1);
	m_clearAssociationAction_EReference_object->setUpperBound(1);
	m_clearAssociationAction_EReference_object->setTransient(false);
	m_clearAssociationAction_EReference_object->setVolatile(false);
	m_clearAssociationAction_EReference_object->setChangeable(true);
	m_clearAssociationAction_EReference_object->setUnsettable(false);
	m_clearAssociationAction_EReference_object->setUnique(true);
	m_clearAssociationAction_EReference_object->setDerived(false);
	m_clearAssociationAction_EReference_object->setOrdered(false);
	m_clearAssociationAction_EReference_object->setContainment(true);
	m_clearAssociationAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clearAssociationAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clearAssociationAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearAssociationAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setName("same_type");
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setUnique(true);
	m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearAssociationAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClearStructuralFeatureActionContent()
{
	m_clearStructuralFeatureAction_EClass->setName("ClearStructuralFeatureAction");
	m_clearStructuralFeatureAction_EClass->setAbstract(false);
	m_clearStructuralFeatureAction_EClass->setInterface(false);
	
	
	m_clearStructuralFeatureAction_EReference_result->setName("result");
	m_clearStructuralFeatureAction_EReference_result->setEType(getOutputPin_EClass());
	m_clearStructuralFeatureAction_EReference_result->setLowerBound(0);
	m_clearStructuralFeatureAction_EReference_result->setUpperBound(1);
	m_clearStructuralFeatureAction_EReference_result->setTransient(false);
	m_clearStructuralFeatureAction_EReference_result->setVolatile(false);
	m_clearStructuralFeatureAction_EReference_result->setChangeable(true);
	m_clearStructuralFeatureAction_EReference_result->setUnsettable(false);
	m_clearStructuralFeatureAction_EReference_result->setUnique(true);
	m_clearStructuralFeatureAction_EReference_result->setDerived(false);
	m_clearStructuralFeatureAction_EReference_result->setOrdered(false);
	m_clearStructuralFeatureAction_EReference_result->setContainment(true);
	m_clearStructuralFeatureAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_clearStructuralFeatureAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_clearStructuralFeatureAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setName("multiplicity_of_result");
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setName("type_of_result");
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_clearStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeClearVariableActionContent()
{
	m_clearVariableAction_EClass->setName("ClearVariableAction");
	m_clearVariableAction_EClass->setAbstract(false);
	m_clearVariableAction_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeCollaborationContent()
{
	m_collaboration_EClass->setName("Collaboration");
	m_collaboration_EClass->setAbstract(false);
	m_collaboration_EClass->setInterface(false);
	
	
	m_collaboration_EReference_collaborationRole->setName("collaborationRole");
	m_collaboration_EReference_collaborationRole->setEType(getConnectableElement_EClass());
	m_collaboration_EReference_collaborationRole->setLowerBound(0);
	m_collaboration_EReference_collaborationRole->setUpperBound(-1);
	m_collaboration_EReference_collaborationRole->setTransient(false);
	m_collaboration_EReference_collaborationRole->setVolatile(false);
	m_collaboration_EReference_collaborationRole->setChangeable(true);
	m_collaboration_EReference_collaborationRole->setUnsettable(false);
	m_collaboration_EReference_collaborationRole->setUnique(true);
	m_collaboration_EReference_collaborationRole->setDerived(false);
	m_collaboration_EReference_collaborationRole->setOrdered(false);
	m_collaboration_EReference_collaborationRole->setContainment(false);
	m_collaboration_EReference_collaborationRole->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_collaboration_EReference_collaborationRole->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_collaboration_EReference_collaborationRole->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeCollaborationUseContent()
{
	m_collaborationUse_EClass->setName("CollaborationUse");
	m_collaborationUse_EClass->setAbstract(false);
	m_collaborationUse_EClass->setInterface(false);
	
	
	m_collaborationUse_EReference_roleBinding->setName("roleBinding");
	m_collaborationUse_EReference_roleBinding->setEType(getDependency_EClass());
	m_collaborationUse_EReference_roleBinding->setLowerBound(0);
	m_collaborationUse_EReference_roleBinding->setUpperBound(-1);
	m_collaborationUse_EReference_roleBinding->setTransient(false);
	m_collaborationUse_EReference_roleBinding->setVolatile(false);
	m_collaborationUse_EReference_roleBinding->setChangeable(true);
	m_collaborationUse_EReference_roleBinding->setUnsettable(false);
	m_collaborationUse_EReference_roleBinding->setUnique(true);
	m_collaborationUse_EReference_roleBinding->setDerived(false);
	m_collaborationUse_EReference_roleBinding->setOrdered(false);
	m_collaborationUse_EReference_roleBinding->setContainment(true);
	m_collaborationUse_EReference_roleBinding->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_collaborationUse_EReference_roleBinding->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_collaborationUse_EReference_roleBinding->setEOpposite(otherEnd);
	    }
	}
	m_collaborationUse_EReference_type->setName("type");
	m_collaborationUse_EReference_type->setEType(getCollaboration_EClass());
	m_collaborationUse_EReference_type->setLowerBound(1);
	m_collaborationUse_EReference_type->setUpperBound(1);
	m_collaborationUse_EReference_type->setTransient(false);
	m_collaborationUse_EReference_type->setVolatile(false);
	m_collaborationUse_EReference_type->setChangeable(true);
	m_collaborationUse_EReference_type->setUnsettable(false);
	m_collaborationUse_EReference_type->setUnique(true);
	m_collaborationUse_EReference_type->setDerived(false);
	m_collaborationUse_EReference_type->setOrdered(false);
	m_collaborationUse_EReference_type->setContainment(false);
	m_collaborationUse_EReference_type->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_collaborationUse_EReference_type->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_collaborationUse_EReference_type->setEOpposite(otherEnd);
	    }
	}
	
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setName("client_elements");
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setLowerBound(0);
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setUpperBound(1);
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setUnique(true);
	m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_client_elements_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setName("connectors");
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setLowerBound(0);
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setUpperBound(1);
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setUnique(true);
	m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_connectors_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setName("every_role");
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setLowerBound(0);
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setUpperBound(1);
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setUnique(true);
	m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_collaborationUse_EOperation_every_role_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCombinedFragmentContent()
{
	m_combinedFragment_EClass->setName("CombinedFragment");
	m_combinedFragment_EClass->setAbstract(false);
	m_combinedFragment_EClass->setInterface(false);
	
	m_combinedFragment_EAttribute_interactionOperator = getCombinedFragment_EAttribute_interactionOperator();
	m_combinedFragment_EAttribute_interactionOperator->setName("interactionOperator");
	m_combinedFragment_EAttribute_interactionOperator->setEType(getInteractionOperatorKind_EEnum());
	m_combinedFragment_EAttribute_interactionOperator->setLowerBound(1);
	m_combinedFragment_EAttribute_interactionOperator->setUpperBound(1);
	m_combinedFragment_EAttribute_interactionOperator->setTransient(false);
	m_combinedFragment_EAttribute_interactionOperator->setVolatile(false);
	m_combinedFragment_EAttribute_interactionOperator->setChangeable(true);
	m_combinedFragment_EAttribute_interactionOperator->setUnsettable(false);
	m_combinedFragment_EAttribute_interactionOperator->setUnique(true);
	m_combinedFragment_EAttribute_interactionOperator->setDerived(false);
	m_combinedFragment_EAttribute_interactionOperator->setOrdered(false);
	m_combinedFragment_EAttribute_interactionOperator->setID(false);
	{
		std::string defaultValue = "seq";
		if (!defaultValue.empty())
		{
		   m_combinedFragment_EAttribute_interactionOperator->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_combinedFragment_EReference_cfragmentGate->setName("cfragmentGate");
	m_combinedFragment_EReference_cfragmentGate->setEType(getGate_EClass());
	m_combinedFragment_EReference_cfragmentGate->setLowerBound(0);
	m_combinedFragment_EReference_cfragmentGate->setUpperBound(-1);
	m_combinedFragment_EReference_cfragmentGate->setTransient(false);
	m_combinedFragment_EReference_cfragmentGate->setVolatile(false);
	m_combinedFragment_EReference_cfragmentGate->setChangeable(true);
	m_combinedFragment_EReference_cfragmentGate->setUnsettable(false);
	m_combinedFragment_EReference_cfragmentGate->setUnique(true);
	m_combinedFragment_EReference_cfragmentGate->setDerived(false);
	m_combinedFragment_EReference_cfragmentGate->setOrdered(false);
	m_combinedFragment_EReference_cfragmentGate->setContainment(true);
	m_combinedFragment_EReference_cfragmentGate->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_combinedFragment_EReference_cfragmentGate->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_combinedFragment_EReference_cfragmentGate->setEOpposite(otherEnd);
	    }
	}
	m_combinedFragment_EReference_operand->setName("operand");
	m_combinedFragment_EReference_operand->setEType(getInteractionOperand_EClass());
	m_combinedFragment_EReference_operand->setLowerBound(1);
	m_combinedFragment_EReference_operand->setUpperBound(-1);
	m_combinedFragment_EReference_operand->setTransient(false);
	m_combinedFragment_EReference_operand->setVolatile(false);
	m_combinedFragment_EReference_operand->setChangeable(true);
	m_combinedFragment_EReference_operand->setUnsettable(false);
	m_combinedFragment_EReference_operand->setUnique(true);
	m_combinedFragment_EReference_operand->setDerived(false);
	m_combinedFragment_EReference_operand->setOrdered(true);
	m_combinedFragment_EReference_operand->setContainment(true);
	m_combinedFragment_EReference_operand->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_combinedFragment_EReference_operand->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_combinedFragment_EReference_operand->setEOpposite(otherEnd);
	    }
	}
	
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setName("break_");
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setLowerBound(0);
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setUpperBound(1);
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setUnique(true);
	m_combinedFragment_EOperation_break__EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_break__EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_break__EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setName("consider_and_ignore");
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setLowerBound(0);
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setUpperBound(1);
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setUnique(true);
	m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_consider_and_ignore_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setName("opt_loop_break_neg");
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setLowerBound(0);
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setUpperBound(1);
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setUnique(true);
	m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_combinedFragment_EOperation_opt_loop_break_neg_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCommentContent()
{
	m_comment_EClass->setName("Comment");
	m_comment_EClass->setAbstract(false);
	m_comment_EClass->setInterface(false);
	
	m_comment_EAttribute_body = getComment_EAttribute_body();
	m_comment_EAttribute_body->setName("body");
	m_comment_EAttribute_body->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_comment_EAttribute_body->setLowerBound(0);
	m_comment_EAttribute_body->setUpperBound(1);
	m_comment_EAttribute_body->setTransient(false);
	m_comment_EAttribute_body->setVolatile(false);
	m_comment_EAttribute_body->setChangeable(true);
	m_comment_EAttribute_body->setUnsettable(true);
	m_comment_EAttribute_body->setUnique(true);
	m_comment_EAttribute_body->setDerived(false);
	m_comment_EAttribute_body->setOrdered(false);
	m_comment_EAttribute_body->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_comment_EAttribute_body->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_comment_EReference_annotatedElement->setName("annotatedElement");
	m_comment_EReference_annotatedElement->setEType(getElement_EClass());
	m_comment_EReference_annotatedElement->setLowerBound(0);
	m_comment_EReference_annotatedElement->setUpperBound(-1);
	m_comment_EReference_annotatedElement->setTransient(false);
	m_comment_EReference_annotatedElement->setVolatile(false);
	m_comment_EReference_annotatedElement->setChangeable(true);
	m_comment_EReference_annotatedElement->setUnsettable(false);
	m_comment_EReference_annotatedElement->setUnique(true);
	m_comment_EReference_annotatedElement->setDerived(false);
	m_comment_EReference_annotatedElement->setOrdered(false);
	m_comment_EReference_annotatedElement->setContainment(false);
	m_comment_EReference_annotatedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_comment_EReference_annotatedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_comment_EReference_annotatedElement->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeCommunicationPathContent()
{
	m_communicationPath_EClass->setName("CommunicationPath");
	m_communicationPath_EClass->setAbstract(false);
	m_communicationPath_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeComponentContent()
{
	m_component_EClass->setName("Component");
	m_component_EClass->setAbstract(false);
	m_component_EClass->setInterface(false);
	
	m_component_EAttribute_isIndirectlyInstantiated = getComponent_EAttribute_isIndirectlyInstantiated();
	m_component_EAttribute_isIndirectlyInstantiated->setName("isIndirectlyInstantiated");
	m_component_EAttribute_isIndirectlyInstantiated->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_component_EAttribute_isIndirectlyInstantiated->setLowerBound(1);
	m_component_EAttribute_isIndirectlyInstantiated->setUpperBound(1);
	m_component_EAttribute_isIndirectlyInstantiated->setTransient(false);
	m_component_EAttribute_isIndirectlyInstantiated->setVolatile(false);
	m_component_EAttribute_isIndirectlyInstantiated->setChangeable(true);
	m_component_EAttribute_isIndirectlyInstantiated->setUnsettable(false);
	m_component_EAttribute_isIndirectlyInstantiated->setUnique(true);
	m_component_EAttribute_isIndirectlyInstantiated->setDerived(false);
	m_component_EAttribute_isIndirectlyInstantiated->setOrdered(false);
	m_component_EAttribute_isIndirectlyInstantiated->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_component_EAttribute_isIndirectlyInstantiated->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_component_EReference_packagedElement->setName("packagedElement");
	m_component_EReference_packagedElement->setEType(getPackageableElement_EClass());
	m_component_EReference_packagedElement->setLowerBound(0);
	m_component_EReference_packagedElement->setUpperBound(-1);
	m_component_EReference_packagedElement->setTransient(false);
	m_component_EReference_packagedElement->setVolatile(false);
	m_component_EReference_packagedElement->setChangeable(true);
	m_component_EReference_packagedElement->setUnsettable(false);
	m_component_EReference_packagedElement->setUnique(true);
	m_component_EReference_packagedElement->setDerived(false);
	m_component_EReference_packagedElement->setOrdered(false);
	m_component_EReference_packagedElement->setContainment(true);
	m_component_EReference_packagedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_component_EReference_packagedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_component_EReference_packagedElement->setEOpposite(otherEnd);
	    }
	}
	m_component_EReference_provided->setName("provided");
	m_component_EReference_provided->setEType(getInterface_EClass());
	m_component_EReference_provided->setLowerBound(0);
	m_component_EReference_provided->setUpperBound(-1);
	m_component_EReference_provided->setTransient(true);
	m_component_EReference_provided->setVolatile(true);
	m_component_EReference_provided->setChangeable(false);
	m_component_EReference_provided->setUnsettable(false);
	m_component_EReference_provided->setUnique(true);
	m_component_EReference_provided->setDerived(true);
	m_component_EReference_provided->setOrdered(false);
	m_component_EReference_provided->setContainment(false);
	m_component_EReference_provided->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_component_EReference_provided->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_component_EReference_provided->setEOpposite(otherEnd);
	    }
	}
	m_component_EReference_realization->setName("realization");
	m_component_EReference_realization->setEType(getComponentRealization_EClass());
	m_component_EReference_realization->setLowerBound(0);
	m_component_EReference_realization->setUpperBound(-1);
	m_component_EReference_realization->setTransient(false);
	m_component_EReference_realization->setVolatile(false);
	m_component_EReference_realization->setChangeable(true);
	m_component_EReference_realization->setUnsettable(false);
	m_component_EReference_realization->setUnique(true);
	m_component_EReference_realization->setDerived(false);
	m_component_EReference_realization->setOrdered(false);
	m_component_EReference_realization->setContainment(true);
	m_component_EReference_realization->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_component_EReference_realization->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getComponentRealization_EReference_abstraction();
		if (otherEnd != nullptr)
	    {
	   		m_component_EReference_realization->setEOpposite(otherEnd);
	    }
	}
	m_component_EReference_required->setName("required");
	m_component_EReference_required->setEType(getInterface_EClass());
	m_component_EReference_required->setLowerBound(0);
	m_component_EReference_required->setUpperBound(-1);
	m_component_EReference_required->setTransient(true);
	m_component_EReference_required->setVolatile(true);
	m_component_EReference_required->setChangeable(false);
	m_component_EReference_required->setUnsettable(false);
	m_component_EReference_required->setUnique(true);
	m_component_EReference_required->setDerived(true);
	m_component_EReference_required->setOrdered(false);
	m_component_EReference_required->setContainment(false);
	m_component_EReference_required->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_component_EReference_required->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_component_EReference_required->setEOpposite(otherEnd);
	    }
	}
	
	m_component_EOperation_createOwnedClass_String_Boolean->setEType(getClass_EClass());
	m_component_EOperation_createOwnedClass_String_Boolean->setName("createOwnedClass");
	m_component_EOperation_createOwnedClass_String_Boolean->setLowerBound(1);
	m_component_EOperation_createOwnedClass_String_Boolean->setUpperBound(1);
	m_component_EOperation_createOwnedClass_String_Boolean->setUnique(true);
	m_component_EOperation_createOwnedClass_String_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_createOwnedClass_String_Boolean);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_createOwnedClass_String_Boolean);
		parameter->setName("isAbstract");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_component_EOperation_createOwnedEnumeration_String->setEType(getEnumeration_EClass());
	m_component_EOperation_createOwnedEnumeration_String->setName("createOwnedEnumeration");
	m_component_EOperation_createOwnedEnumeration_String->setLowerBound(1);
	m_component_EOperation_createOwnedEnumeration_String->setUpperBound(1);
	m_component_EOperation_createOwnedEnumeration_String->setUnique(true);
	m_component_EOperation_createOwnedEnumeration_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_createOwnedEnumeration_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_component_EOperation_createOwnedInterface_String->setEType(getInterface_EClass());
	m_component_EOperation_createOwnedInterface_String->setName("createOwnedInterface");
	m_component_EOperation_createOwnedInterface_String->setLowerBound(1);
	m_component_EOperation_createOwnedInterface_String->setUpperBound(1);
	m_component_EOperation_createOwnedInterface_String->setUnique(true);
	m_component_EOperation_createOwnedInterface_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_createOwnedInterface_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_component_EOperation_createOwnedPrimitiveType_String->setEType(getPrimitiveType_EClass());
	m_component_EOperation_createOwnedPrimitiveType_String->setName("createOwnedPrimitiveType");
	m_component_EOperation_createOwnedPrimitiveType_String->setLowerBound(1);
	m_component_EOperation_createOwnedPrimitiveType_String->setUpperBound(1);
	m_component_EOperation_createOwnedPrimitiveType_String->setUnique(true);
	m_component_EOperation_createOwnedPrimitiveType_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_createOwnedPrimitiveType_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_component_EOperation_getProvideds->setEType(getInterface_EClass());
	m_component_EOperation_getProvideds->setName("getProvideds");
	m_component_EOperation_getProvideds->setLowerBound(0);
	m_component_EOperation_getProvideds->setUpperBound(-1);
	m_component_EOperation_getProvideds->setUnique(true);
	m_component_EOperation_getProvideds->setOrdered(false);
	
	
	m_component_EOperation_getRequireds->setEType(getInterface_EClass());
	m_component_EOperation_getRequireds->setName("getRequireds");
	m_component_EOperation_getRequireds->setLowerBound(0);
	m_component_EOperation_getRequireds->setUpperBound(-1);
	m_component_EOperation_getRequireds->setUnique(true);
	m_component_EOperation_getRequireds->setOrdered(false);
	
	
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setName("no_nested_classifiers");
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setLowerBound(0);
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setUpperBound(1);
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setUnique(true);
	m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_no_nested_classifiers_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setName("no_packaged_elements");
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setLowerBound(0);
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setUpperBound(1);
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setUnique(true);
	m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_component_EOperation_no_packaged_elements_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeComponentRealizationContent()
{
	m_componentRealization_EClass->setName("ComponentRealization");
	m_componentRealization_EClass->setAbstract(false);
	m_componentRealization_EClass->setInterface(false);
	
	
	m_componentRealization_EReference_abstraction->setName("abstraction");
	m_componentRealization_EReference_abstraction->setEType(getComponent_EClass());
	m_componentRealization_EReference_abstraction->setLowerBound(0);
	m_componentRealization_EReference_abstraction->setUpperBound(1);
	m_componentRealization_EReference_abstraction->setTransient(false);
	m_componentRealization_EReference_abstraction->setVolatile(false);
	m_componentRealization_EReference_abstraction->setChangeable(true);
	m_componentRealization_EReference_abstraction->setUnsettable(false);
	m_componentRealization_EReference_abstraction->setUnique(true);
	m_componentRealization_EReference_abstraction->setDerived(false);
	m_componentRealization_EReference_abstraction->setOrdered(false);
	m_componentRealization_EReference_abstraction->setContainment(false);
	m_componentRealization_EReference_abstraction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_componentRealization_EReference_abstraction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getComponent_EReference_realization();
		if (otherEnd != nullptr)
	    {
	   		m_componentRealization_EReference_abstraction->setEOpposite(otherEnd);
	    }
	}
	m_componentRealization_EReference_realizingClassifier->setName("realizingClassifier");
	m_componentRealization_EReference_realizingClassifier->setEType(getClassifier_EClass());
	m_componentRealization_EReference_realizingClassifier->setLowerBound(1);
	m_componentRealization_EReference_realizingClassifier->setUpperBound(-1);
	m_componentRealization_EReference_realizingClassifier->setTransient(false);
	m_componentRealization_EReference_realizingClassifier->setVolatile(false);
	m_componentRealization_EReference_realizingClassifier->setChangeable(true);
	m_componentRealization_EReference_realizingClassifier->setUnsettable(false);
	m_componentRealization_EReference_realizingClassifier->setUnique(true);
	m_componentRealization_EReference_realizingClassifier->setDerived(false);
	m_componentRealization_EReference_realizingClassifier->setOrdered(false);
	m_componentRealization_EReference_realizingClassifier->setContainment(false);
	m_componentRealization_EReference_realizingClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_componentRealization_EReference_realizingClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_componentRealization_EReference_realizingClassifier->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeConditionalNodeContent()
{
	m_conditionalNode_EClass->setName("ConditionalNode");
	m_conditionalNode_EClass->setAbstract(false);
	m_conditionalNode_EClass->setInterface(false);
	
	m_conditionalNode_EAttribute_isAssured = getConditionalNode_EAttribute_isAssured();
	m_conditionalNode_EAttribute_isAssured->setName("isAssured");
	m_conditionalNode_EAttribute_isAssured->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_conditionalNode_EAttribute_isAssured->setLowerBound(1);
	m_conditionalNode_EAttribute_isAssured->setUpperBound(1);
	m_conditionalNode_EAttribute_isAssured->setTransient(false);
	m_conditionalNode_EAttribute_isAssured->setVolatile(false);
	m_conditionalNode_EAttribute_isAssured->setChangeable(true);
	m_conditionalNode_EAttribute_isAssured->setUnsettable(false);
	m_conditionalNode_EAttribute_isAssured->setUnique(true);
	m_conditionalNode_EAttribute_isAssured->setDerived(false);
	m_conditionalNode_EAttribute_isAssured->setOrdered(false);
	m_conditionalNode_EAttribute_isAssured->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_conditionalNode_EAttribute_isAssured->setDefaultValueLiteral(defaultValue);
		}
	}
	m_conditionalNode_EAttribute_isDeterminate = getConditionalNode_EAttribute_isDeterminate();
	m_conditionalNode_EAttribute_isDeterminate->setName("isDeterminate");
	m_conditionalNode_EAttribute_isDeterminate->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_conditionalNode_EAttribute_isDeterminate->setLowerBound(1);
	m_conditionalNode_EAttribute_isDeterminate->setUpperBound(1);
	m_conditionalNode_EAttribute_isDeterminate->setTransient(false);
	m_conditionalNode_EAttribute_isDeterminate->setVolatile(false);
	m_conditionalNode_EAttribute_isDeterminate->setChangeable(true);
	m_conditionalNode_EAttribute_isDeterminate->setUnsettable(false);
	m_conditionalNode_EAttribute_isDeterminate->setUnique(true);
	m_conditionalNode_EAttribute_isDeterminate->setDerived(false);
	m_conditionalNode_EAttribute_isDeterminate->setOrdered(false);
	m_conditionalNode_EAttribute_isDeterminate->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_conditionalNode_EAttribute_isDeterminate->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_conditionalNode_EReference_clause->setName("clause");
	m_conditionalNode_EReference_clause->setEType(getClause_EClass());
	m_conditionalNode_EReference_clause->setLowerBound(1);
	m_conditionalNode_EReference_clause->setUpperBound(-1);
	m_conditionalNode_EReference_clause->setTransient(false);
	m_conditionalNode_EReference_clause->setVolatile(false);
	m_conditionalNode_EReference_clause->setChangeable(true);
	m_conditionalNode_EReference_clause->setUnsettable(false);
	m_conditionalNode_EReference_clause->setUnique(true);
	m_conditionalNode_EReference_clause->setDerived(false);
	m_conditionalNode_EReference_clause->setOrdered(false);
	m_conditionalNode_EReference_clause->setContainment(true);
	m_conditionalNode_EReference_clause->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_conditionalNode_EReference_clause->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_conditionalNode_EReference_clause->setEOpposite(otherEnd);
	    }
	}
	m_conditionalNode_EReference_result->setName("result");
	m_conditionalNode_EReference_result->setEType(getOutputPin_EClass());
	m_conditionalNode_EReference_result->setLowerBound(0);
	m_conditionalNode_EReference_result->setUpperBound(-1);
	m_conditionalNode_EReference_result->setTransient(false);
	m_conditionalNode_EReference_result->setVolatile(false);
	m_conditionalNode_EReference_result->setChangeable(true);
	m_conditionalNode_EReference_result->setUnsettable(false);
	m_conditionalNode_EReference_result->setUnique(true);
	m_conditionalNode_EReference_result->setDerived(false);
	m_conditionalNode_EReference_result->setOrdered(true);
	m_conditionalNode_EReference_result->setContainment(true);
	m_conditionalNode_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_conditionalNode_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_conditionalNode_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setName("clause_no_predecessor");
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_clause_no_predecessor_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setName("executable_nodes");
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setName("matching_output_pins");
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_matching_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setName("no_input_pins");
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_no_input_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setName("one_clause_with_executable_node");
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_one_clause_with_executable_node_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setName("result_no_incoming");
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setLowerBound(0);
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setUpperBound(1);
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setUnique(true);
	m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_conditionalNode_EOperation_result_no_incoming_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeConnectableElementContent()
{
	m_connectableElement_EClass->setName("ConnectableElement");
	m_connectableElement_EClass->setAbstract(true);
	m_connectableElement_EClass->setInterface(false);
	
	
	m_connectableElement_EReference_end->setName("end");
	m_connectableElement_EReference_end->setEType(getConnectorEnd_EClass());
	m_connectableElement_EReference_end->setLowerBound(0);
	m_connectableElement_EReference_end->setUpperBound(-1);
	m_connectableElement_EReference_end->setTransient(true);
	m_connectableElement_EReference_end->setVolatile(true);
	m_connectableElement_EReference_end->setChangeable(false);
	m_connectableElement_EReference_end->setUnsettable(false);
	m_connectableElement_EReference_end->setUnique(true);
	m_connectableElement_EReference_end->setDerived(true);
	m_connectableElement_EReference_end->setOrdered(false);
	m_connectableElement_EReference_end->setContainment(false);
	m_connectableElement_EReference_end->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectableElement_EReference_end->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectableElement_EReference_end->setEOpposite(otherEnd);
	    }
	}
	
	m_connectableElement_EOperation_getEnds->setEType(getConnectorEnd_EClass());
	m_connectableElement_EOperation_getEnds->setName("getEnds");
	m_connectableElement_EOperation_getEnds->setLowerBound(0);
	m_connectableElement_EOperation_getEnds->setUpperBound(-1);
	m_connectableElement_EOperation_getEnds->setUnique(true);
	m_connectableElement_EOperation_getEnds->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeConnectableElementTemplateParameterContent()
{
	m_connectableElementTemplateParameter_EClass->setName("ConnectableElementTemplateParameter");
	m_connectableElementTemplateParameter_EClass->setAbstract(false);
	m_connectableElementTemplateParameter_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeConnectionPointReferenceContent()
{
	m_connectionPointReference_EClass->setName("ConnectionPointReference");
	m_connectionPointReference_EClass->setAbstract(false);
	m_connectionPointReference_EClass->setInterface(false);
	
	
	m_connectionPointReference_EReference_entry->setName("entry");
	m_connectionPointReference_EReference_entry->setEType(getPseudostate_EClass());
	m_connectionPointReference_EReference_entry->setLowerBound(0);
	m_connectionPointReference_EReference_entry->setUpperBound(-1);
	m_connectionPointReference_EReference_entry->setTransient(false);
	m_connectionPointReference_EReference_entry->setVolatile(false);
	m_connectionPointReference_EReference_entry->setChangeable(true);
	m_connectionPointReference_EReference_entry->setUnsettable(false);
	m_connectionPointReference_EReference_entry->setUnique(true);
	m_connectionPointReference_EReference_entry->setDerived(false);
	m_connectionPointReference_EReference_entry->setOrdered(false);
	m_connectionPointReference_EReference_entry->setContainment(false);
	m_connectionPointReference_EReference_entry->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectionPointReference_EReference_entry->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectionPointReference_EReference_entry->setEOpposite(otherEnd);
	    }
	}
	m_connectionPointReference_EReference_exit->setName("exit");
	m_connectionPointReference_EReference_exit->setEType(getPseudostate_EClass());
	m_connectionPointReference_EReference_exit->setLowerBound(0);
	m_connectionPointReference_EReference_exit->setUpperBound(-1);
	m_connectionPointReference_EReference_exit->setTransient(false);
	m_connectionPointReference_EReference_exit->setVolatile(false);
	m_connectionPointReference_EReference_exit->setChangeable(true);
	m_connectionPointReference_EReference_exit->setUnsettable(false);
	m_connectionPointReference_EReference_exit->setUnique(true);
	m_connectionPointReference_EReference_exit->setDerived(false);
	m_connectionPointReference_EReference_exit->setOrdered(false);
	m_connectionPointReference_EReference_exit->setContainment(false);
	m_connectionPointReference_EReference_exit->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectionPointReference_EReference_exit->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectionPointReference_EReference_exit->setEOpposite(otherEnd);
	    }
	}
	m_connectionPointReference_EReference_state->setName("state");
	m_connectionPointReference_EReference_state->setEType(getState_EClass());
	m_connectionPointReference_EReference_state->setLowerBound(0);
	m_connectionPointReference_EReference_state->setUpperBound(1);
	m_connectionPointReference_EReference_state->setTransient(false);
	m_connectionPointReference_EReference_state->setVolatile(false);
	m_connectionPointReference_EReference_state->setChangeable(true);
	m_connectionPointReference_EReference_state->setUnsettable(false);
	m_connectionPointReference_EReference_state->setUnique(true);
	m_connectionPointReference_EReference_state->setDerived(false);
	m_connectionPointReference_EReference_state->setOrdered(false);
	m_connectionPointReference_EReference_state->setContainment(false);
	m_connectionPointReference_EReference_state->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectionPointReference_EReference_state->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getState_EReference_connection();
		if (otherEnd != nullptr)
	    {
	   		m_connectionPointReference_EReference_state->setEOpposite(otherEnd);
	    }
	}
	
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setName("entry_pseudostates");
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setUnique(true);
	m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectionPointReference_EOperation_entry_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setName("exit_pseudostates");
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setUnique(true);
	m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectionPointReference_EOperation_exit_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeConnectorContent()
{
	m_connector_EClass->setName("Connector");
	m_connector_EClass->setAbstract(false);
	m_connector_EClass->setInterface(false);
	
	m_connector_EAttribute_kind = getConnector_EAttribute_kind();
	m_connector_EAttribute_kind->setName("kind");
	m_connector_EAttribute_kind->setEType(getConnectorKind_EEnum());
	m_connector_EAttribute_kind->setLowerBound(1);
	m_connector_EAttribute_kind->setUpperBound(1);
	m_connector_EAttribute_kind->setTransient(true);
	m_connector_EAttribute_kind->setVolatile(true);
	m_connector_EAttribute_kind->setChangeable(false);
	m_connector_EAttribute_kind->setUnsettable(false);
	m_connector_EAttribute_kind->setUnique(true);
	m_connector_EAttribute_kind->setDerived(true);
	m_connector_EAttribute_kind->setOrdered(false);
	m_connector_EAttribute_kind->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_connector_EAttribute_kind->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_connector_EReference_contract->setName("contract");
	m_connector_EReference_contract->setEType(getBehavior_EClass());
	m_connector_EReference_contract->setLowerBound(0);
	m_connector_EReference_contract->setUpperBound(-1);
	m_connector_EReference_contract->setTransient(false);
	m_connector_EReference_contract->setVolatile(false);
	m_connector_EReference_contract->setChangeable(true);
	m_connector_EReference_contract->setUnsettable(false);
	m_connector_EReference_contract->setUnique(true);
	m_connector_EReference_contract->setDerived(false);
	m_connector_EReference_contract->setOrdered(false);
	m_connector_EReference_contract->setContainment(false);
	m_connector_EReference_contract->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connector_EReference_contract->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connector_EReference_contract->setEOpposite(otherEnd);
	    }
	}
	m_connector_EReference_end->setName("end");
	m_connector_EReference_end->setEType(getConnectorEnd_EClass());
	m_connector_EReference_end->setLowerBound(2);
	m_connector_EReference_end->setUpperBound(-1);
	m_connector_EReference_end->setTransient(false);
	m_connector_EReference_end->setVolatile(false);
	m_connector_EReference_end->setChangeable(true);
	m_connector_EReference_end->setUnsettable(false);
	m_connector_EReference_end->setUnique(true);
	m_connector_EReference_end->setDerived(false);
	m_connector_EReference_end->setOrdered(true);
	m_connector_EReference_end->setContainment(true);
	m_connector_EReference_end->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connector_EReference_end->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connector_EReference_end->setEOpposite(otherEnd);
	    }
	}
	m_connector_EReference_redefinedConnector->setName("redefinedConnector");
	m_connector_EReference_redefinedConnector->setEType(getConnector_EClass());
	m_connector_EReference_redefinedConnector->setLowerBound(0);
	m_connector_EReference_redefinedConnector->setUpperBound(-1);
	m_connector_EReference_redefinedConnector->setTransient(false);
	m_connector_EReference_redefinedConnector->setVolatile(false);
	m_connector_EReference_redefinedConnector->setChangeable(true);
	m_connector_EReference_redefinedConnector->setUnsettable(false);
	m_connector_EReference_redefinedConnector->setUnique(true);
	m_connector_EReference_redefinedConnector->setDerived(false);
	m_connector_EReference_redefinedConnector->setOrdered(false);
	m_connector_EReference_redefinedConnector->setContainment(false);
	m_connector_EReference_redefinedConnector->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connector_EReference_redefinedConnector->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connector_EReference_redefinedConnector->setEOpposite(otherEnd);
	    }
	}
	m_connector_EReference_type->setName("type");
	m_connector_EReference_type->setEType(getAssociation_EClass());
	m_connector_EReference_type->setLowerBound(0);
	m_connector_EReference_type->setUpperBound(1);
	m_connector_EReference_type->setTransient(false);
	m_connector_EReference_type->setVolatile(false);
	m_connector_EReference_type->setChangeable(true);
	m_connector_EReference_type->setUnsettable(false);
	m_connector_EReference_type->setUnique(true);
	m_connector_EReference_type->setDerived(false);
	m_connector_EReference_type->setOrdered(false);
	m_connector_EReference_type->setContainment(false);
	m_connector_EReference_type->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connector_EReference_type->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connector_EReference_type->setEOpposite(otherEnd);
	    }
	}
	
	m_connector_EOperation_getKind->setEType(getConnectorKind_EEnum());
	m_connector_EOperation_getKind->setName("getKind");
	m_connector_EOperation_getKind->setLowerBound(1);
	m_connector_EOperation_getKind->setUpperBound(1);
	m_connector_EOperation_getKind->setUnique(true);
	m_connector_EOperation_getKind->setOrdered(false);
	
	
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setName("roles");
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setLowerBound(0);
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setUpperBound(1);
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setUnique(true);
	m_connector_EOperation_roles_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connector_EOperation_roles_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connector_EOperation_roles_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_connector_EOperation_types_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connector_EOperation_types_EDiagnosticChain_EMap->setName("types");
	m_connector_EOperation_types_EDiagnosticChain_EMap->setLowerBound(0);
	m_connector_EOperation_types_EDiagnosticChain_EMap->setUpperBound(1);
	m_connector_EOperation_types_EDiagnosticChain_EMap->setUnique(true);
	m_connector_EOperation_types_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connector_EOperation_types_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connector_EOperation_types_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeConnectorEndContent()
{
	m_connectorEnd_EClass->setName("ConnectorEnd");
	m_connectorEnd_EClass->setAbstract(false);
	m_connectorEnd_EClass->setInterface(false);
	
	
	m_connectorEnd_EReference_definingEnd->setName("definingEnd");
	m_connectorEnd_EReference_definingEnd->setEType(getProperty_EClass());
	m_connectorEnd_EReference_definingEnd->setLowerBound(0);
	m_connectorEnd_EReference_definingEnd->setUpperBound(1);
	m_connectorEnd_EReference_definingEnd->setTransient(true);
	m_connectorEnd_EReference_definingEnd->setVolatile(true);
	m_connectorEnd_EReference_definingEnd->setChangeable(false);
	m_connectorEnd_EReference_definingEnd->setUnsettable(false);
	m_connectorEnd_EReference_definingEnd->setUnique(true);
	m_connectorEnd_EReference_definingEnd->setDerived(true);
	m_connectorEnd_EReference_definingEnd->setOrdered(false);
	m_connectorEnd_EReference_definingEnd->setContainment(false);
	m_connectorEnd_EReference_definingEnd->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectorEnd_EReference_definingEnd->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectorEnd_EReference_definingEnd->setEOpposite(otherEnd);
	    }
	}
	m_connectorEnd_EReference_partWithPort->setName("partWithPort");
	m_connectorEnd_EReference_partWithPort->setEType(getProperty_EClass());
	m_connectorEnd_EReference_partWithPort->setLowerBound(0);
	m_connectorEnd_EReference_partWithPort->setUpperBound(1);
	m_connectorEnd_EReference_partWithPort->setTransient(false);
	m_connectorEnd_EReference_partWithPort->setVolatile(false);
	m_connectorEnd_EReference_partWithPort->setChangeable(true);
	m_connectorEnd_EReference_partWithPort->setUnsettable(false);
	m_connectorEnd_EReference_partWithPort->setUnique(true);
	m_connectorEnd_EReference_partWithPort->setDerived(false);
	m_connectorEnd_EReference_partWithPort->setOrdered(false);
	m_connectorEnd_EReference_partWithPort->setContainment(false);
	m_connectorEnd_EReference_partWithPort->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectorEnd_EReference_partWithPort->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectorEnd_EReference_partWithPort->setEOpposite(otherEnd);
	    }
	}
	m_connectorEnd_EReference_role->setName("role");
	m_connectorEnd_EReference_role->setEType(getConnectableElement_EClass());
	m_connectorEnd_EReference_role->setLowerBound(1);
	m_connectorEnd_EReference_role->setUpperBound(1);
	m_connectorEnd_EReference_role->setTransient(false);
	m_connectorEnd_EReference_role->setVolatile(false);
	m_connectorEnd_EReference_role->setChangeable(true);
	m_connectorEnd_EReference_role->setUnsettable(false);
	m_connectorEnd_EReference_role->setUnique(true);
	m_connectorEnd_EReference_role->setDerived(false);
	m_connectorEnd_EReference_role->setOrdered(false);
	m_connectorEnd_EReference_role->setContainment(false);
	m_connectorEnd_EReference_role->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_connectorEnd_EReference_role->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_connectorEnd_EReference_role->setEOpposite(otherEnd);
	    }
	}
	
	m_connectorEnd_EOperation_getDefiningEnd->setEType(getProperty_EClass());
	m_connectorEnd_EOperation_getDefiningEnd->setName("getDefiningEnd");
	m_connectorEnd_EOperation_getDefiningEnd->setLowerBound(0);
	m_connectorEnd_EOperation_getDefiningEnd->setUpperBound(1);
	m_connectorEnd_EOperation_getDefiningEnd->setUnique(true);
	m_connectorEnd_EOperation_getDefiningEnd->setOrdered(false);
	
	
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setName("part_with_port_empty");
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setUnique(true);
	m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_part_with_port_empty_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setName("role_and_part_with_port");
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setUnique(true);
	m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_role_and_part_with_port_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setName("self_part_with_port");
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setLowerBound(0);
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setUpperBound(1);
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setUnique(true);
	m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_connectorEnd_EOperation_self_part_with_port_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeConsiderIgnoreFragmentContent()
{
	m_considerIgnoreFragment_EClass->setName("ConsiderIgnoreFragment");
	m_considerIgnoreFragment_EClass->setAbstract(false);
	m_considerIgnoreFragment_EClass->setInterface(false);
	
	
	m_considerIgnoreFragment_EReference_message->setName("message");
	m_considerIgnoreFragment_EReference_message->setEType(getNamedElement_EClass());
	m_considerIgnoreFragment_EReference_message->setLowerBound(0);
	m_considerIgnoreFragment_EReference_message->setUpperBound(-1);
	m_considerIgnoreFragment_EReference_message->setTransient(false);
	m_considerIgnoreFragment_EReference_message->setVolatile(false);
	m_considerIgnoreFragment_EReference_message->setChangeable(true);
	m_considerIgnoreFragment_EReference_message->setUnsettable(false);
	m_considerIgnoreFragment_EReference_message->setUnique(true);
	m_considerIgnoreFragment_EReference_message->setDerived(false);
	m_considerIgnoreFragment_EReference_message->setOrdered(false);
	m_considerIgnoreFragment_EReference_message->setContainment(false);
	m_considerIgnoreFragment_EReference_message->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_considerIgnoreFragment_EReference_message->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_considerIgnoreFragment_EReference_message->setEOpposite(otherEnd);
	    }
	}
	
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setName("consider_or_ignore");
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setLowerBound(0);
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setUpperBound(1);
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setUnique(true);
	m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_considerIgnoreFragment_EOperation_consider_or_ignore_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setName("type");
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setUnique(true);
	m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_considerIgnoreFragment_EOperation_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeConstraintContent()
{
	m_constraint_EClass->setName("Constraint");
	m_constraint_EClass->setAbstract(false);
	m_constraint_EClass->setInterface(false);
	
	
	m_constraint_EReference_constrainedElement->setName("constrainedElement");
	m_constraint_EReference_constrainedElement->setEType(getElement_EClass());
	m_constraint_EReference_constrainedElement->setLowerBound(0);
	m_constraint_EReference_constrainedElement->setUpperBound(-1);
	m_constraint_EReference_constrainedElement->setTransient(false);
	m_constraint_EReference_constrainedElement->setVolatile(false);
	m_constraint_EReference_constrainedElement->setChangeable(true);
	m_constraint_EReference_constrainedElement->setUnsettable(false);
	m_constraint_EReference_constrainedElement->setUnique(true);
	m_constraint_EReference_constrainedElement->setDerived(false);
	m_constraint_EReference_constrainedElement->setOrdered(true);
	m_constraint_EReference_constrainedElement->setContainment(false);
	m_constraint_EReference_constrainedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_constraint_EReference_constrainedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_constraint_EReference_constrainedElement->setEOpposite(otherEnd);
	    }
	}
	m_constraint_EReference_context->setName("context");
	m_constraint_EReference_context->setEType(getNamespace_EClass());
	m_constraint_EReference_context->setLowerBound(0);
	m_constraint_EReference_context->setUpperBound(1);
	m_constraint_EReference_context->setTransient(false);
	m_constraint_EReference_context->setVolatile(false);
	m_constraint_EReference_context->setChangeable(true);
	m_constraint_EReference_context->setUnsettable(false);
	m_constraint_EReference_context->setUnique(true);
	m_constraint_EReference_context->setDerived(false);
	m_constraint_EReference_context->setOrdered(false);
	m_constraint_EReference_context->setContainment(false);
	m_constraint_EReference_context->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_constraint_EReference_context->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getNamespace_EReference_ownedRule();
		if (otherEnd != nullptr)
	    {
	   		m_constraint_EReference_context->setEOpposite(otherEnd);
	    }
	}
	m_constraint_EReference_specification->setName("specification");
	m_constraint_EReference_specification->setEType(getValueSpecification_EClass());
	m_constraint_EReference_specification->setLowerBound(1);
	m_constraint_EReference_specification->setUpperBound(1);
	m_constraint_EReference_specification->setTransient(false);
	m_constraint_EReference_specification->setVolatile(false);
	m_constraint_EReference_specification->setChangeable(true);
	m_constraint_EReference_specification->setUnsettable(false);
	m_constraint_EReference_specification->setUnique(true);
	m_constraint_EReference_specification->setDerived(false);
	m_constraint_EReference_specification->setOrdered(false);
	m_constraint_EReference_specification->setContainment(true);
	m_constraint_EReference_specification->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_constraint_EReference_specification->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_constraint_EReference_specification->setEOpposite(otherEnd);
	    }
	}
	
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setName("boolean_value");
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setUnique(true);
	m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_boolean_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setName("no_side_effects");
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setLowerBound(0);
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setUpperBound(1);
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setUnique(true);
	m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_no_side_effects_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setName("not_apply_to_self");
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setLowerBound(0);
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setUpperBound(1);
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setUnique(true);
	m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_constraint_EOperation_not_apply_to_self_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeContinuationContent()
{
	m_continuation_EClass->setName("Continuation");
	m_continuation_EClass->setAbstract(false);
	m_continuation_EClass->setInterface(false);
	
	m_continuation_EAttribute_setting = getContinuation_EAttribute_setting();
	m_continuation_EAttribute_setting->setName("setting");
	m_continuation_EAttribute_setting->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_continuation_EAttribute_setting->setLowerBound(1);
	m_continuation_EAttribute_setting->setUpperBound(1);
	m_continuation_EAttribute_setting->setTransient(false);
	m_continuation_EAttribute_setting->setVolatile(false);
	m_continuation_EAttribute_setting->setChangeable(true);
	m_continuation_EAttribute_setting->setUnsettable(false);
	m_continuation_EAttribute_setting->setUnique(true);
	m_continuation_EAttribute_setting->setDerived(false);
	m_continuation_EAttribute_setting->setOrdered(false);
	m_continuation_EAttribute_setting->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_continuation_EAttribute_setting->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setName("first_or_last_interaction_fragment");
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setLowerBound(0);
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setUpperBound(1);
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setUnique(true);
	m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_first_or_last_interaction_fragment_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setName("global");
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setLowerBound(0);
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setUpperBound(1);
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setUnique(true);
	m_continuation_EOperation_global_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_global_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_global_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setName("same_name");
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setUnique(true);
	m_continuation_EOperation_same_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_same_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_continuation_EOperation_same_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeControlFlowContent()
{
	m_controlFlow_EClass->setName("ControlFlow");
	m_controlFlow_EClass->setAbstract(false);
	m_controlFlow_EClass->setInterface(false);
	
	
	
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setName("object_nodes");
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setLowerBound(0);
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setUpperBound(1);
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setUnique(true);
	m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_controlFlow_EOperation_object_nodes_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeControlNodeContent()
{
	m_controlNode_EClass->setName("ControlNode");
	m_controlNode_EClass->setAbstract(true);
	m_controlNode_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeCreateLinkActionContent()
{
	m_createLinkAction_EClass->setName("CreateLinkAction");
	m_createLinkAction_EClass->setAbstract(false);
	m_createLinkAction_EClass->setInterface(false);
	
	
	
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setName("association_not_abstract");
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setLowerBound(0);
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setUpperBound(1);
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setUnique(true);
	m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkAction_EOperation_association_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCreateLinkObjectActionContent()
{
	m_createLinkObjectAction_EClass->setName("CreateLinkObjectAction");
	m_createLinkObjectAction_EClass->setAbstract(false);
	m_createLinkObjectAction_EClass->setInterface(false);
	
	
	m_createLinkObjectAction_EReference_result->setName("result");
	m_createLinkObjectAction_EReference_result->setEType(getOutputPin_EClass());
	m_createLinkObjectAction_EReference_result->setLowerBound(1);
	m_createLinkObjectAction_EReference_result->setUpperBound(1);
	m_createLinkObjectAction_EReference_result->setTransient(false);
	m_createLinkObjectAction_EReference_result->setVolatile(false);
	m_createLinkObjectAction_EReference_result->setChangeable(true);
	m_createLinkObjectAction_EReference_result->setUnsettable(false);
	m_createLinkObjectAction_EReference_result->setUnique(true);
	m_createLinkObjectAction_EReference_result->setDerived(false);
	m_createLinkObjectAction_EReference_result->setOrdered(false);
	m_createLinkObjectAction_EReference_result->setContainment(true);
	m_createLinkObjectAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_createLinkObjectAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_createLinkObjectAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setName("association_class");
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setLowerBound(0);
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setUpperBound(1);
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setUnique(true);
	m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_association_class_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setName("type_of_result");
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createLinkObjectAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeCreateObjectActionContent()
{
	m_createObjectAction_EClass->setName("CreateObjectAction");
	m_createObjectAction_EClass->setAbstract(false);
	m_createObjectAction_EClass->setInterface(false);
	
	
	m_createObjectAction_EReference_classifier->setName("classifier");
	m_createObjectAction_EReference_classifier->setEType(getClassifier_EClass());
	m_createObjectAction_EReference_classifier->setLowerBound(1);
	m_createObjectAction_EReference_classifier->setUpperBound(1);
	m_createObjectAction_EReference_classifier->setTransient(false);
	m_createObjectAction_EReference_classifier->setVolatile(false);
	m_createObjectAction_EReference_classifier->setChangeable(true);
	m_createObjectAction_EReference_classifier->setUnsettable(false);
	m_createObjectAction_EReference_classifier->setUnique(true);
	m_createObjectAction_EReference_classifier->setDerived(false);
	m_createObjectAction_EReference_classifier->setOrdered(false);
	m_createObjectAction_EReference_classifier->setContainment(false);
	m_createObjectAction_EReference_classifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_createObjectAction_EReference_classifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_createObjectAction_EReference_classifier->setEOpposite(otherEnd);
	    }
	}
	m_createObjectAction_EReference_result->setName("result");
	m_createObjectAction_EReference_result->setEType(getOutputPin_EClass());
	m_createObjectAction_EReference_result->setLowerBound(1);
	m_createObjectAction_EReference_result->setUpperBound(1);
	m_createObjectAction_EReference_result->setTransient(false);
	m_createObjectAction_EReference_result->setVolatile(false);
	m_createObjectAction_EReference_result->setChangeable(true);
	m_createObjectAction_EReference_result->setUnsettable(false);
	m_createObjectAction_EReference_result->setUnique(true);
	m_createObjectAction_EReference_result->setDerived(false);
	m_createObjectAction_EReference_result->setOrdered(false);
	m_createObjectAction_EReference_result->setContainment(true);
	m_createObjectAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_createObjectAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_createObjectAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setName("classifier_not_abstract");
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setLowerBound(0);
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setUpperBound(1);
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setUnique(true);
	m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setName("classifier_not_association_class");
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setLowerBound(0);
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setUpperBound(1);
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setUnique(true);
	m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_classifier_not_association_class_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setName("same_type");
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setUnique(true);
	m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_createObjectAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDataStoreNodeContent()
{
	m_dataStoreNode_EClass->setName("DataStoreNode");
	m_dataStoreNode_EClass->setAbstract(false);
	m_dataStoreNode_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeDataTypeContent()
{
	m_dataType_EClass->setName("DataType");
	m_dataType_EClass->setAbstract(false);
	m_dataType_EClass->setInterface(false);
	
	
	m_dataType_EReference_ownedAttribute->setName("ownedAttribute");
	m_dataType_EReference_ownedAttribute->setEType(getProperty_EClass());
	m_dataType_EReference_ownedAttribute->setLowerBound(0);
	m_dataType_EReference_ownedAttribute->setUpperBound(-1);
	m_dataType_EReference_ownedAttribute->setTransient(false);
	m_dataType_EReference_ownedAttribute->setVolatile(false);
	m_dataType_EReference_ownedAttribute->setChangeable(true);
	m_dataType_EReference_ownedAttribute->setUnsettable(false);
	m_dataType_EReference_ownedAttribute->setUnique(true);
	m_dataType_EReference_ownedAttribute->setDerived(false);
	m_dataType_EReference_ownedAttribute->setOrdered(true);
	m_dataType_EReference_ownedAttribute->setContainment(true);
	m_dataType_EReference_ownedAttribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_dataType_EReference_ownedAttribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_datatype();
		if (otherEnd != nullptr)
	    {
	   		m_dataType_EReference_ownedAttribute->setEOpposite(otherEnd);
	    }
	}
	m_dataType_EReference_ownedOperation->setName("ownedOperation");
	m_dataType_EReference_ownedOperation->setEType(getOperation_EClass());
	m_dataType_EReference_ownedOperation->setLowerBound(0);
	m_dataType_EReference_ownedOperation->setUpperBound(-1);
	m_dataType_EReference_ownedOperation->setTransient(false);
	m_dataType_EReference_ownedOperation->setVolatile(false);
	m_dataType_EReference_ownedOperation->setChangeable(true);
	m_dataType_EReference_ownedOperation->setUnsettable(false);
	m_dataType_EReference_ownedOperation->setUnique(true);
	m_dataType_EReference_ownedOperation->setDerived(false);
	m_dataType_EReference_ownedOperation->setOrdered(true);
	m_dataType_EReference_ownedOperation->setContainment(true);
	m_dataType_EReference_ownedOperation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_dataType_EReference_ownedOperation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOperation_EReference_datatype();
		if (otherEnd != nullptr)
	    {
	   		m_dataType_EReference_ownedOperation->setEOpposite(otherEnd);
	    }
	}
	
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setEType(getProperty_EClass());
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setName("createOwnedAttribute");
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setLowerBound(1);
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUpperBound(1);
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUnique(true);
	m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_dataType_EOperation_createOwnedOperation_String_Type->setEType(getOperation_EClass());
	m_dataType_EOperation_createOwnedOperation_String_Type->setName("createOwnedOperation");
	m_dataType_EOperation_createOwnedOperation_String_Type->setLowerBound(1);
	m_dataType_EOperation_createOwnedOperation_String_Type->setUpperBound(1);
	m_dataType_EOperation_createOwnedOperation_String_Type->setUnique(true);
	m_dataType_EOperation_createOwnedOperation_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedOperation_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_dataType_EOperation_createOwnedOperation_String_Type);
		parameter->setName("returnType");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDecisionNodeContent()
{
	m_decisionNode_EClass->setName("DecisionNode");
	m_decisionNode_EClass->setAbstract(false);
	m_decisionNode_EClass->setInterface(false);
	
	
	m_decisionNode_EReference_decisionInput->setName("decisionInput");
	m_decisionNode_EReference_decisionInput->setEType(getBehavior_EClass());
	m_decisionNode_EReference_decisionInput->setLowerBound(0);
	m_decisionNode_EReference_decisionInput->setUpperBound(1);
	m_decisionNode_EReference_decisionInput->setTransient(false);
	m_decisionNode_EReference_decisionInput->setVolatile(false);
	m_decisionNode_EReference_decisionInput->setChangeable(true);
	m_decisionNode_EReference_decisionInput->setUnsettable(false);
	m_decisionNode_EReference_decisionInput->setUnique(true);
	m_decisionNode_EReference_decisionInput->setDerived(false);
	m_decisionNode_EReference_decisionInput->setOrdered(false);
	m_decisionNode_EReference_decisionInput->setContainment(false);
	m_decisionNode_EReference_decisionInput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_decisionNode_EReference_decisionInput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_decisionNode_EReference_decisionInput->setEOpposite(otherEnd);
	    }
	}
	m_decisionNode_EReference_decisionInputFlow->setName("decisionInputFlow");
	m_decisionNode_EReference_decisionInputFlow->setEType(getObjectFlow_EClass());
	m_decisionNode_EReference_decisionInputFlow->setLowerBound(0);
	m_decisionNode_EReference_decisionInputFlow->setUpperBound(1);
	m_decisionNode_EReference_decisionInputFlow->setTransient(false);
	m_decisionNode_EReference_decisionInputFlow->setVolatile(false);
	m_decisionNode_EReference_decisionInputFlow->setChangeable(true);
	m_decisionNode_EReference_decisionInputFlow->setUnsettable(false);
	m_decisionNode_EReference_decisionInputFlow->setUnique(true);
	m_decisionNode_EReference_decisionInputFlow->setDerived(false);
	m_decisionNode_EReference_decisionInputFlow->setOrdered(false);
	m_decisionNode_EReference_decisionInputFlow->setContainment(false);
	m_decisionNode_EReference_decisionInputFlow->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_decisionNode_EReference_decisionInputFlow->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_decisionNode_EReference_decisionInputFlow->setEOpposite(otherEnd);
	    }
	}
	
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setName("decision_input_flow_incoming");
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_decision_input_flow_incoming_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setName("edges");
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setName("incoming_control_one_input_parameter");
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_control_one_input_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setName("incoming_object_one_input_parameter");
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_object_one_input_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setName("incoming_outgoing_edges");
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_incoming_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setName("parameters");
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setName("two_input_parameters");
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_two_input_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setName("zero_input_parameters");
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_decisionNode_EOperation_zero_input_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDependencyContent()
{
	m_dependency_EClass->setName("Dependency");
	m_dependency_EClass->setAbstract(false);
	m_dependency_EClass->setInterface(false);
	
	
	m_dependency_EReference_client->setName("client");
	m_dependency_EReference_client->setEType(getNamedElement_EClass());
	m_dependency_EReference_client->setLowerBound(1);
	m_dependency_EReference_client->setUpperBound(-1);
	m_dependency_EReference_client->setTransient(false);
	m_dependency_EReference_client->setVolatile(false);
	m_dependency_EReference_client->setChangeable(true);
	m_dependency_EReference_client->setUnsettable(false);
	m_dependency_EReference_client->setUnique(true);
	m_dependency_EReference_client->setDerived(false);
	m_dependency_EReference_client->setOrdered(false);
	m_dependency_EReference_client->setContainment(false);
	m_dependency_EReference_client->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_dependency_EReference_client->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_dependency_EReference_client->setEOpposite(otherEnd);
	    }
	}
	m_dependency_EReference_supplier->setName("supplier");
	m_dependency_EReference_supplier->setEType(getNamedElement_EClass());
	m_dependency_EReference_supplier->setLowerBound(1);
	m_dependency_EReference_supplier->setUpperBound(-1);
	m_dependency_EReference_supplier->setTransient(false);
	m_dependency_EReference_supplier->setVolatile(false);
	m_dependency_EReference_supplier->setChangeable(true);
	m_dependency_EReference_supplier->setUnsettable(false);
	m_dependency_EReference_supplier->setUnique(true);
	m_dependency_EReference_supplier->setDerived(false);
	m_dependency_EReference_supplier->setOrdered(false);
	m_dependency_EReference_supplier->setContainment(false);
	m_dependency_EReference_supplier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_dependency_EReference_supplier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_dependency_EReference_supplier->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeDeployedArtifactContent()
{
	m_deployedArtifact_EClass->setName("DeployedArtifact");
	m_deployedArtifact_EClass->setAbstract(true);
	m_deployedArtifact_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeDeploymentContent()
{
	m_deployment_EClass->setName("Deployment");
	m_deployment_EClass->setAbstract(false);
	m_deployment_EClass->setInterface(false);
	
	
	m_deployment_EReference_configuration->setName("configuration");
	m_deployment_EReference_configuration->setEType(getDeploymentSpecification_EClass());
	m_deployment_EReference_configuration->setLowerBound(0);
	m_deployment_EReference_configuration->setUpperBound(-1);
	m_deployment_EReference_configuration->setTransient(false);
	m_deployment_EReference_configuration->setVolatile(false);
	m_deployment_EReference_configuration->setChangeable(true);
	m_deployment_EReference_configuration->setUnsettable(false);
	m_deployment_EReference_configuration->setUnique(true);
	m_deployment_EReference_configuration->setDerived(false);
	m_deployment_EReference_configuration->setOrdered(false);
	m_deployment_EReference_configuration->setContainment(true);
	m_deployment_EReference_configuration->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deployment_EReference_configuration->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDeploymentSpecification_EReference_deployment();
		if (otherEnd != nullptr)
	    {
	   		m_deployment_EReference_configuration->setEOpposite(otherEnd);
	    }
	}
	m_deployment_EReference_deployedArtifact->setName("deployedArtifact");
	m_deployment_EReference_deployedArtifact->setEType(getDeployedArtifact_EClass());
	m_deployment_EReference_deployedArtifact->setLowerBound(0);
	m_deployment_EReference_deployedArtifact->setUpperBound(-1);
	m_deployment_EReference_deployedArtifact->setTransient(false);
	m_deployment_EReference_deployedArtifact->setVolatile(false);
	m_deployment_EReference_deployedArtifact->setChangeable(true);
	m_deployment_EReference_deployedArtifact->setUnsettable(false);
	m_deployment_EReference_deployedArtifact->setUnique(true);
	m_deployment_EReference_deployedArtifact->setDerived(false);
	m_deployment_EReference_deployedArtifact->setOrdered(false);
	m_deployment_EReference_deployedArtifact->setContainment(false);
	m_deployment_EReference_deployedArtifact->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deployment_EReference_deployedArtifact->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_deployment_EReference_deployedArtifact->setEOpposite(otherEnd);
	    }
	}
	m_deployment_EReference_location->setName("location");
	m_deployment_EReference_location->setEType(getDeploymentTarget_EClass());
	m_deployment_EReference_location->setLowerBound(1);
	m_deployment_EReference_location->setUpperBound(1);
	m_deployment_EReference_location->setTransient(false);
	m_deployment_EReference_location->setVolatile(false);
	m_deployment_EReference_location->setChangeable(true);
	m_deployment_EReference_location->setUnsettable(false);
	m_deployment_EReference_location->setUnique(true);
	m_deployment_EReference_location->setDerived(false);
	m_deployment_EReference_location->setOrdered(false);
	m_deployment_EReference_location->setContainment(false);
	m_deployment_EReference_location->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deployment_EReference_location->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDeploymentTarget_EReference_deployment();
		if (otherEnd != nullptr)
	    {
	   		m_deployment_EReference_location->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeDeploymentSpecificationContent()
{
	m_deploymentSpecification_EClass->setName("DeploymentSpecification");
	m_deploymentSpecification_EClass->setAbstract(false);
	m_deploymentSpecification_EClass->setInterface(false);
	
	m_deploymentSpecification_EAttribute_deploymentLocation = getDeploymentSpecification_EAttribute_deploymentLocation();
	m_deploymentSpecification_EAttribute_deploymentLocation->setName("deploymentLocation");
	m_deploymentSpecification_EAttribute_deploymentLocation->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_deploymentSpecification_EAttribute_deploymentLocation->setLowerBound(0);
	m_deploymentSpecification_EAttribute_deploymentLocation->setUpperBound(1);
	m_deploymentSpecification_EAttribute_deploymentLocation->setTransient(false);
	m_deploymentSpecification_EAttribute_deploymentLocation->setVolatile(false);
	m_deploymentSpecification_EAttribute_deploymentLocation->setChangeable(true);
	m_deploymentSpecification_EAttribute_deploymentLocation->setUnsettable(true);
	m_deploymentSpecification_EAttribute_deploymentLocation->setUnique(true);
	m_deploymentSpecification_EAttribute_deploymentLocation->setDerived(false);
	m_deploymentSpecification_EAttribute_deploymentLocation->setOrdered(false);
	m_deploymentSpecification_EAttribute_deploymentLocation->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_deploymentSpecification_EAttribute_deploymentLocation->setDefaultValueLiteral(defaultValue);
		}
	}
	m_deploymentSpecification_EAttribute_executionLocation = getDeploymentSpecification_EAttribute_executionLocation();
	m_deploymentSpecification_EAttribute_executionLocation->setName("executionLocation");
	m_deploymentSpecification_EAttribute_executionLocation->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_deploymentSpecification_EAttribute_executionLocation->setLowerBound(0);
	m_deploymentSpecification_EAttribute_executionLocation->setUpperBound(1);
	m_deploymentSpecification_EAttribute_executionLocation->setTransient(false);
	m_deploymentSpecification_EAttribute_executionLocation->setVolatile(false);
	m_deploymentSpecification_EAttribute_executionLocation->setChangeable(true);
	m_deploymentSpecification_EAttribute_executionLocation->setUnsettable(true);
	m_deploymentSpecification_EAttribute_executionLocation->setUnique(true);
	m_deploymentSpecification_EAttribute_executionLocation->setDerived(false);
	m_deploymentSpecification_EAttribute_executionLocation->setOrdered(false);
	m_deploymentSpecification_EAttribute_executionLocation->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_deploymentSpecification_EAttribute_executionLocation->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_deploymentSpecification_EReference_deployment->setName("deployment");
	m_deploymentSpecification_EReference_deployment->setEType(getDeployment_EClass());
	m_deploymentSpecification_EReference_deployment->setLowerBound(0);
	m_deploymentSpecification_EReference_deployment->setUpperBound(1);
	m_deploymentSpecification_EReference_deployment->setTransient(false);
	m_deploymentSpecification_EReference_deployment->setVolatile(false);
	m_deploymentSpecification_EReference_deployment->setChangeable(true);
	m_deploymentSpecification_EReference_deployment->setUnsettable(false);
	m_deploymentSpecification_EReference_deployment->setUnique(true);
	m_deploymentSpecification_EReference_deployment->setDerived(false);
	m_deploymentSpecification_EReference_deployment->setOrdered(false);
	m_deploymentSpecification_EReference_deployment->setContainment(false);
	m_deploymentSpecification_EReference_deployment->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deploymentSpecification_EReference_deployment->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDeployment_EReference_configuration();
		if (otherEnd != nullptr)
	    {
	   		m_deploymentSpecification_EReference_deployment->setEOpposite(otherEnd);
	    }
	}
	
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setName("deployed_elements");
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setLowerBound(0);
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setUpperBound(1);
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setUnique(true);
	m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_deploymentSpecification_EOperation_deployed_elements_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setName("deployment_target");
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setUnique(true);
	m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_deploymentSpecification_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDeploymentTargetContent()
{
	m_deploymentTarget_EClass->setName("DeploymentTarget");
	m_deploymentTarget_EClass->setAbstract(true);
	m_deploymentTarget_EClass->setInterface(false);
	
	
	m_deploymentTarget_EReference_deployedElement->setName("deployedElement");
	m_deploymentTarget_EReference_deployedElement->setEType(getPackageableElement_EClass());
	m_deploymentTarget_EReference_deployedElement->setLowerBound(0);
	m_deploymentTarget_EReference_deployedElement->setUpperBound(-1);
	m_deploymentTarget_EReference_deployedElement->setTransient(true);
	m_deploymentTarget_EReference_deployedElement->setVolatile(true);
	m_deploymentTarget_EReference_deployedElement->setChangeable(false);
	m_deploymentTarget_EReference_deployedElement->setUnsettable(false);
	m_deploymentTarget_EReference_deployedElement->setUnique(true);
	m_deploymentTarget_EReference_deployedElement->setDerived(true);
	m_deploymentTarget_EReference_deployedElement->setOrdered(false);
	m_deploymentTarget_EReference_deployedElement->setContainment(false);
	m_deploymentTarget_EReference_deployedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deploymentTarget_EReference_deployedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_deploymentTarget_EReference_deployedElement->setEOpposite(otherEnd);
	    }
	}
	m_deploymentTarget_EReference_deployment->setName("deployment");
	m_deploymentTarget_EReference_deployment->setEType(getDeployment_EClass());
	m_deploymentTarget_EReference_deployment->setLowerBound(0);
	m_deploymentTarget_EReference_deployment->setUpperBound(-1);
	m_deploymentTarget_EReference_deployment->setTransient(false);
	m_deploymentTarget_EReference_deployment->setVolatile(false);
	m_deploymentTarget_EReference_deployment->setChangeable(true);
	m_deploymentTarget_EReference_deployment->setUnsettable(false);
	m_deploymentTarget_EReference_deployment->setUnique(true);
	m_deploymentTarget_EReference_deployment->setDerived(false);
	m_deploymentTarget_EReference_deployment->setOrdered(false);
	m_deploymentTarget_EReference_deployment->setContainment(true);
	m_deploymentTarget_EReference_deployment->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_deploymentTarget_EReference_deployment->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDeployment_EReference_location();
		if (otherEnd != nullptr)
	    {
	   		m_deploymentTarget_EReference_deployment->setEOpposite(otherEnd);
	    }
	}
	
	m_deploymentTarget_EOperation_getDeployedElements->setEType(getPackageableElement_EClass());
	m_deploymentTarget_EOperation_getDeployedElements->setName("getDeployedElements");
	m_deploymentTarget_EOperation_getDeployedElements->setLowerBound(0);
	m_deploymentTarget_EOperation_getDeployedElements->setUpperBound(-1);
	m_deploymentTarget_EOperation_getDeployedElements->setUnique(true);
	m_deploymentTarget_EOperation_getDeployedElements->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeDestroyLinkActionContent()
{
	m_destroyLinkAction_EClass->setName("DestroyLinkAction");
	m_destroyLinkAction_EClass->setAbstract(false);
	m_destroyLinkAction_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeDestroyObjectActionContent()
{
	m_destroyObjectAction_EClass->setName("DestroyObjectAction");
	m_destroyObjectAction_EClass->setAbstract(false);
	m_destroyObjectAction_EClass->setInterface(false);
	
	m_destroyObjectAction_EAttribute_isDestroyLinks = getDestroyObjectAction_EAttribute_isDestroyLinks();
	m_destroyObjectAction_EAttribute_isDestroyLinks->setName("isDestroyLinks");
	m_destroyObjectAction_EAttribute_isDestroyLinks->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_destroyObjectAction_EAttribute_isDestroyLinks->setLowerBound(1);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setUpperBound(1);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setTransient(false);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setVolatile(false);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setChangeable(true);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setUnsettable(false);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setUnique(true);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setDerived(false);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setOrdered(false);
	m_destroyObjectAction_EAttribute_isDestroyLinks->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_destroyObjectAction_EAttribute_isDestroyLinks->setDefaultValueLiteral(defaultValue);
		}
	}
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects = getDestroyObjectAction_EAttribute_isDestroyOwnedObjects();
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setName("isDestroyOwnedObjects");
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setLowerBound(1);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setUpperBound(1);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setTransient(false);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setVolatile(false);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setChangeable(true);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setUnsettable(false);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setUnique(true);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setDerived(false);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setOrdered(false);
	m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_destroyObjectAction_EAttribute_isDestroyOwnedObjects->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_destroyObjectAction_EReference_target->setName("target");
	m_destroyObjectAction_EReference_target->setEType(getInputPin_EClass());
	m_destroyObjectAction_EReference_target->setLowerBound(1);
	m_destroyObjectAction_EReference_target->setUpperBound(1);
	m_destroyObjectAction_EReference_target->setTransient(false);
	m_destroyObjectAction_EReference_target->setVolatile(false);
	m_destroyObjectAction_EReference_target->setChangeable(true);
	m_destroyObjectAction_EReference_target->setUnsettable(false);
	m_destroyObjectAction_EReference_target->setUnique(true);
	m_destroyObjectAction_EReference_target->setDerived(false);
	m_destroyObjectAction_EReference_target->setOrdered(false);
	m_destroyObjectAction_EReference_target->setContainment(true);
	m_destroyObjectAction_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_destroyObjectAction_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_destroyObjectAction_EReference_target->setEOpposite(otherEnd);
	    }
	}
	
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destroyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setName("no_type");
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setUnique(true);
	m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destroyObjectAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDestructionOccurrenceSpecificationContent()
{
	m_destructionOccurrenceSpecification_EClass->setName("DestructionOccurrenceSpecification");
	m_destructionOccurrenceSpecification_EClass->setAbstract(false);
	m_destructionOccurrenceSpecification_EClass->setInterface(false);
	
	
	
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setName("no_occurrence_specifications_below");
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setLowerBound(0);
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setUpperBound(1);
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setUnique(true);
	m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_destructionOccurrenceSpecification_EOperation_no_occurrence_specifications_below_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDeviceContent()
{
	m_device_EClass->setName("Device");
	m_device_EClass->setAbstract(false);
	m_device_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeDirectedRelationshipContent()
{
	m_directedRelationship_EClass->setName("DirectedRelationship");
	m_directedRelationship_EClass->setAbstract(true);
	m_directedRelationship_EClass->setInterface(false);
	
	
	m_directedRelationship_EReference_source->setName("source");
	m_directedRelationship_EReference_source->setEType(getElement_EClass());
	m_directedRelationship_EReference_source->setLowerBound(1);
	m_directedRelationship_EReference_source->setUpperBound(-1);
	m_directedRelationship_EReference_source->setTransient(true);
	m_directedRelationship_EReference_source->setVolatile(true);
	m_directedRelationship_EReference_source->setChangeable(false);
	m_directedRelationship_EReference_source->setUnsettable(false);
	m_directedRelationship_EReference_source->setUnique(true);
	m_directedRelationship_EReference_source->setDerived(true);
	m_directedRelationship_EReference_source->setOrdered(false);
	m_directedRelationship_EReference_source->setContainment(false);
	m_directedRelationship_EReference_source->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_directedRelationship_EReference_source->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_directedRelationship_EReference_source->setEOpposite(otherEnd);
	    }
	}
	m_directedRelationship_EReference_target->setName("target");
	m_directedRelationship_EReference_target->setEType(getElement_EClass());
	m_directedRelationship_EReference_target->setLowerBound(1);
	m_directedRelationship_EReference_target->setUpperBound(-1);
	m_directedRelationship_EReference_target->setTransient(true);
	m_directedRelationship_EReference_target->setVolatile(true);
	m_directedRelationship_EReference_target->setChangeable(false);
	m_directedRelationship_EReference_target->setUnsettable(false);
	m_directedRelationship_EReference_target->setUnique(true);
	m_directedRelationship_EReference_target->setDerived(true);
	m_directedRelationship_EReference_target->setOrdered(false);
	m_directedRelationship_EReference_target->setContainment(false);
	m_directedRelationship_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_directedRelationship_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_directedRelationship_EReference_target->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeDurationContent()
{
	m_duration_EClass->setName("Duration");
	m_duration_EClass->setAbstract(false);
	m_duration_EClass->setInterface(false);
	
	
	m_duration_EReference_expr->setName("expr");
	m_duration_EReference_expr->setEType(getValueSpecification_EClass());
	m_duration_EReference_expr->setLowerBound(0);
	m_duration_EReference_expr->setUpperBound(1);
	m_duration_EReference_expr->setTransient(false);
	m_duration_EReference_expr->setVolatile(false);
	m_duration_EReference_expr->setChangeable(true);
	m_duration_EReference_expr->setUnsettable(false);
	m_duration_EReference_expr->setUnique(true);
	m_duration_EReference_expr->setDerived(false);
	m_duration_EReference_expr->setOrdered(false);
	m_duration_EReference_expr->setContainment(true);
	m_duration_EReference_expr->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_duration_EReference_expr->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_duration_EReference_expr->setEOpposite(otherEnd);
	    }
	}
	m_duration_EReference_observation->setName("observation");
	m_duration_EReference_observation->setEType(getObservation_EClass());
	m_duration_EReference_observation->setLowerBound(0);
	m_duration_EReference_observation->setUpperBound(-1);
	m_duration_EReference_observation->setTransient(false);
	m_duration_EReference_observation->setVolatile(false);
	m_duration_EReference_observation->setChangeable(true);
	m_duration_EReference_observation->setUnsettable(false);
	m_duration_EReference_observation->setUnique(true);
	m_duration_EReference_observation->setDerived(false);
	m_duration_EReference_observation->setOrdered(false);
	m_duration_EReference_observation->setContainment(false);
	m_duration_EReference_observation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_duration_EReference_observation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_duration_EReference_observation->setEOpposite(otherEnd);
	    }
	}
	
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setName("no_expr_requires_observation");
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setLowerBound(0);
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setUpperBound(1);
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setUnique(true);
	m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_duration_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDurationConstraintContent()
{
	m_durationConstraint_EClass->setName("DurationConstraint");
	m_durationConstraint_EClass->setAbstract(false);
	m_durationConstraint_EClass->setInterface(false);
	
	m_durationConstraint_EAttribute_firstEvent = getDurationConstraint_EAttribute_firstEvent();
	m_durationConstraint_EAttribute_firstEvent->setName("firstEvent");
	m_durationConstraint_EAttribute_firstEvent->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_durationConstraint_EAttribute_firstEvent->setLowerBound(0);
	m_durationConstraint_EAttribute_firstEvent->setUpperBound(2);
	m_durationConstraint_EAttribute_firstEvent->setTransient(false);
	m_durationConstraint_EAttribute_firstEvent->setVolatile(false);
	m_durationConstraint_EAttribute_firstEvent->setChangeable(true);
	m_durationConstraint_EAttribute_firstEvent->setUnsettable(false);
	m_durationConstraint_EAttribute_firstEvent->setUnique(true);
	m_durationConstraint_EAttribute_firstEvent->setDerived(false);
	m_durationConstraint_EAttribute_firstEvent->setOrdered(false);
	m_durationConstraint_EAttribute_firstEvent->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_durationConstraint_EAttribute_firstEvent->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setName("first_event_multiplicity");
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationConstraint_EOperation_first_event_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setName("has_one_or_two_constrainedElements");
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setLowerBound(0);
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setUpperBound(1);
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setUnique(true);
	m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationConstraint_EOperation_has_one_or_two_constrainedElements_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeDurationIntervalContent()
{
	m_durationInterval_EClass->setName("DurationInterval");
	m_durationInterval_EClass->setAbstract(false);
	m_durationInterval_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeDurationObservationContent()
{
	m_durationObservation_EClass->setName("DurationObservation");
	m_durationObservation_EClass->setAbstract(false);
	m_durationObservation_EClass->setInterface(false);
	
	m_durationObservation_EAttribute_firstEvent = getDurationObservation_EAttribute_firstEvent();
	m_durationObservation_EAttribute_firstEvent->setName("firstEvent");
	m_durationObservation_EAttribute_firstEvent->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_durationObservation_EAttribute_firstEvent->setLowerBound(0);
	m_durationObservation_EAttribute_firstEvent->setUpperBound(2);
	m_durationObservation_EAttribute_firstEvent->setTransient(false);
	m_durationObservation_EAttribute_firstEvent->setVolatile(false);
	m_durationObservation_EAttribute_firstEvent->setChangeable(true);
	m_durationObservation_EAttribute_firstEvent->setUnsettable(false);
	m_durationObservation_EAttribute_firstEvent->setUnique(true);
	m_durationObservation_EAttribute_firstEvent->setDerived(false);
	m_durationObservation_EAttribute_firstEvent->setOrdered(false);
	m_durationObservation_EAttribute_firstEvent->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_durationObservation_EAttribute_firstEvent->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_durationObservation_EReference_event->setName("event");
	m_durationObservation_EReference_event->setEType(getNamedElement_EClass());
	m_durationObservation_EReference_event->setLowerBound(1);
	m_durationObservation_EReference_event->setUpperBound(2);
	m_durationObservation_EReference_event->setTransient(false);
	m_durationObservation_EReference_event->setVolatile(false);
	m_durationObservation_EReference_event->setChangeable(true);
	m_durationObservation_EReference_event->setUnsettable(false);
	m_durationObservation_EReference_event->setUnique(true);
	m_durationObservation_EReference_event->setDerived(false);
	m_durationObservation_EReference_event->setOrdered(true);
	m_durationObservation_EReference_event->setContainment(false);
	m_durationObservation_EReference_event->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_durationObservation_EReference_event->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_durationObservation_EReference_event->setEOpposite(otherEnd);
	    }
	}
	
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setName("first_event_multiplicity");
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_durationObservation_EOperation_first_event_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeElementContent()
{
	m_element_EClass->setName("Element");
	m_element_EClass->setAbstract(true);
	m_element_EClass->setInterface(false);
	
	
	m_element_EReference_ownedComment->setName("ownedComment");
	m_element_EReference_ownedComment->setEType(getComment_EClass());
	m_element_EReference_ownedComment->setLowerBound(0);
	m_element_EReference_ownedComment->setUpperBound(-1);
	m_element_EReference_ownedComment->setTransient(false);
	m_element_EReference_ownedComment->setVolatile(false);
	m_element_EReference_ownedComment->setChangeable(true);
	m_element_EReference_ownedComment->setUnsettable(false);
	m_element_EReference_ownedComment->setUnique(true);
	m_element_EReference_ownedComment->setDerived(false);
	m_element_EReference_ownedComment->setOrdered(false);
	m_element_EReference_ownedComment->setContainment(true);
	m_element_EReference_ownedComment->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_element_EReference_ownedComment->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_element_EReference_ownedComment->setEOpposite(otherEnd);
	    }
	}
	m_element_EReference_ownedElement->setName("ownedElement");
	m_element_EReference_ownedElement->setEType(getElement_EClass());
	m_element_EReference_ownedElement->setLowerBound(0);
	m_element_EReference_ownedElement->setUpperBound(-1);
	m_element_EReference_ownedElement->setTransient(true);
	m_element_EReference_ownedElement->setVolatile(true);
	m_element_EReference_ownedElement->setChangeable(false);
	m_element_EReference_ownedElement->setUnsettable(false);
	m_element_EReference_ownedElement->setUnique(true);
	m_element_EReference_ownedElement->setDerived(true);
	m_element_EReference_ownedElement->setOrdered(false);
	m_element_EReference_ownedElement->setContainment(true);
	m_element_EReference_ownedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_element_EReference_ownedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getElement_EReference_owner();
		if (otherEnd != nullptr)
	    {
	   		m_element_EReference_ownedElement->setEOpposite(otherEnd);
	    }
	}
	m_element_EReference_owner->setName("owner");
	m_element_EReference_owner->setEType(getElement_EClass());
	m_element_EReference_owner->setLowerBound(0);
	m_element_EReference_owner->setUpperBound(1);
	m_element_EReference_owner->setTransient(true);
	m_element_EReference_owner->setVolatile(true);
	m_element_EReference_owner->setChangeable(false);
	m_element_EReference_owner->setUnsettable(false);
	m_element_EReference_owner->setUnique(true);
	m_element_EReference_owner->setDerived(true);
	m_element_EReference_owner->setOrdered(false);
	m_element_EReference_owner->setContainment(false);
	m_element_EReference_owner->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_element_EReference_owner->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getElement_EReference_ownedElement();
		if (otherEnd != nullptr)
	    {
	   		m_element_EReference_owner->setEOpposite(otherEnd);
	    }
	}
	
	m_element_EOperation_addKeyword_String->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_addKeyword_String->setName("addKeyword");
	m_element_EOperation_addKeyword_String->setLowerBound(1);
	m_element_EOperation_addKeyword_String->setUpperBound(1);
	m_element_EOperation_addKeyword_String->setUnique(true);
	m_element_EOperation_addKeyword_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_addKeyword_String);
		parameter->setName("keyword");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_allOwnedElements->setEType(getElement_EClass());
	m_element_EOperation_allOwnedElements->setName("allOwnedElements");
	m_element_EOperation_allOwnedElements->setLowerBound(0);
	m_element_EOperation_allOwnedElements->setUpperBound(-1);
	m_element_EOperation_allOwnedElements->setUnique(true);
	m_element_EOperation_allOwnedElements->setOrdered(false);
	
	
	m_element_EOperation_applyStereotype_Stereotype->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_element_EOperation_applyStereotype_Stereotype->setName("applyStereotype");
	m_element_EOperation_applyStereotype_Stereotype->setLowerBound(1);
	m_element_EOperation_applyStereotype_Stereotype->setUpperBound(1);
	m_element_EOperation_applyStereotype_Stereotype->setUnique(true);
	m_element_EOperation_applyStereotype_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_applyStereotype_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_container->setEType(getElement_EClass());
	m_element_EOperation_container->setName("container");
	m_element_EOperation_container->setLowerBound(0);
	m_element_EOperation_container->setUpperBound(1);
	m_element_EOperation_container->setUnique(true);
	m_element_EOperation_container->setOrdered(true);
	
	
	m_element_EOperation_createEAnnotation_String->setEType(ecore::EcorePackage::eInstance()->getEAnnotation_EClass());
	m_element_EOperation_createEAnnotation_String->setName("createEAnnotation");
	m_element_EOperation_createEAnnotation_String->setLowerBound(1);
	m_element_EOperation_createEAnnotation_String->setUpperBound(1);
	m_element_EOperation_createEAnnotation_String->setUnique(true);
	m_element_EOperation_createEAnnotation_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_createEAnnotation_String);
		parameter->setName("source");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_destroy->setEType(nullptr);
	m_element_EOperation_destroy->setName("destroy");
	m_element_EOperation_destroy->setLowerBound(1);
	m_element_EOperation_destroy->setUpperBound(1);
	m_element_EOperation_destroy->setUnique(true);
	m_element_EOperation_destroy->setOrdered(false);
	
	
	m_element_EOperation_getApplicableStereotype_String->setEType(getStereotype_EClass());
	m_element_EOperation_getApplicableStereotype_String->setName("getApplicableStereotype");
	m_element_EOperation_getApplicableStereotype_String->setLowerBound(0);
	m_element_EOperation_getApplicableStereotype_String->setUpperBound(1);
	m_element_EOperation_getApplicableStereotype_String->setUnique(true);
	m_element_EOperation_getApplicableStereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getApplicableStereotype_String);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getApplicableStereotypes->setEType(getStereotype_EClass());
	m_element_EOperation_getApplicableStereotypes->setName("getApplicableStereotypes");
	m_element_EOperation_getApplicableStereotypes->setLowerBound(0);
	m_element_EOperation_getApplicableStereotypes->setUpperBound(-1);
	m_element_EOperation_getApplicableStereotypes->setUnique(true);
	m_element_EOperation_getApplicableStereotypes->setOrdered(false);
	
	
	m_element_EOperation_getAppliedStereotype_String->setEType(getStereotype_EClass());
	m_element_EOperation_getAppliedStereotype_String->setName("getAppliedStereotype");
	m_element_EOperation_getAppliedStereotype_String->setLowerBound(0);
	m_element_EOperation_getAppliedStereotype_String->setUpperBound(1);
	m_element_EOperation_getAppliedStereotype_String->setUnique(true);
	m_element_EOperation_getAppliedStereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getAppliedStereotype_String);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getAppliedStereotypes->setEType(getStereotype_EClass());
	m_element_EOperation_getAppliedStereotypes->setName("getAppliedStereotypes");
	m_element_EOperation_getAppliedStereotypes->setLowerBound(0);
	m_element_EOperation_getAppliedStereotypes->setUpperBound(-1);
	m_element_EOperation_getAppliedStereotypes->setUnique(true);
	m_element_EOperation_getAppliedStereotypes->setOrdered(false);
	
	
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setEType(getStereotype_EClass());
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setName("getAppliedSubstereotype");
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setLowerBound(0);
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setUpperBound(1);
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setUnique(true);
	m_element_EOperation_getAppliedSubstereotype_Stereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getAppliedSubstereotype_Stereotype_String);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getAppliedSubstereotype_Stereotype_String);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setEType(getStereotype_EClass());
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setName("getAppliedSubstereotypes");
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setLowerBound(0);
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setUpperBound(-1);
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setUnique(true);
	m_element_EOperation_getAppliedSubstereotypes_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getAppliedSubstereotypes_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getKeywords->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_element_EOperation_getKeywords->setName("getKeywords");
	m_element_EOperation_getKeywords->setLowerBound(0);
	m_element_EOperation_getKeywords->setUpperBound(-1);
	m_element_EOperation_getKeywords->setUnique(true);
	m_element_EOperation_getKeywords->setOrdered(false);
	
	
	m_element_EOperation_getMetaClass->setEType(getClass_EClass());
	m_element_EOperation_getMetaClass->setName("getMetaClass");
	m_element_EOperation_getMetaClass->setLowerBound(0);
	m_element_EOperation_getMetaClass->setUpperBound(1);
	m_element_EOperation_getMetaClass->setUnique(true);
	m_element_EOperation_getMetaClass->setOrdered(true);
	
	
	m_element_EOperation_getModel->setEType(getModel_EClass());
	m_element_EOperation_getModel->setName("getModel");
	m_element_EOperation_getModel->setLowerBound(0);
	m_element_EOperation_getModel->setUpperBound(1);
	m_element_EOperation_getModel->setUnique(true);
	m_element_EOperation_getModel->setOrdered(false);
	
	
	m_element_EOperation_getNearestPackage->setEType(getPackage_EClass());
	m_element_EOperation_getNearestPackage->setName("getNearestPackage");
	m_element_EOperation_getNearestPackage->setLowerBound(0);
	m_element_EOperation_getNearestPackage->setUpperBound(1);
	m_element_EOperation_getNearestPackage->setUnique(true);
	m_element_EOperation_getNearestPackage->setOrdered(false);
	
	
	m_element_EOperation_getRelationships->setEType(getRelationship_EClass());
	m_element_EOperation_getRelationships->setName("getRelationships");
	m_element_EOperation_getRelationships->setLowerBound(0);
	m_element_EOperation_getRelationships->setUpperBound(-1);
	m_element_EOperation_getRelationships->setUnique(true);
	m_element_EOperation_getRelationships->setOrdered(false);
	
	
	m_element_EOperation_getRelationships_EClass->setEType(getRelationship_EClass());
	m_element_EOperation_getRelationships_EClass->setName("getRelationships");
	m_element_EOperation_getRelationships_EClass->setLowerBound(0);
	m_element_EOperation_getRelationships_EClass->setUpperBound(-1);
	m_element_EOperation_getRelationships_EClass->setUnique(true);
	m_element_EOperation_getRelationships_EClass->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getRelationships_EClass);
		parameter->setName("eClass");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEClass_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getRequiredStereotype_String->setEType(getStereotype_EClass());
	m_element_EOperation_getRequiredStereotype_String->setName("getRequiredStereotype");
	m_element_EOperation_getRequiredStereotype_String->setLowerBound(0);
	m_element_EOperation_getRequiredStereotype_String->setUpperBound(1);
	m_element_EOperation_getRequiredStereotype_String->setUnique(true);
	m_element_EOperation_getRequiredStereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getRequiredStereotype_String);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getRequiredStereotypes->setEType(getStereotype_EClass());
	m_element_EOperation_getRequiredStereotypes->setName("getRequiredStereotypes");
	m_element_EOperation_getRequiredStereotypes->setLowerBound(0);
	m_element_EOperation_getRequiredStereotypes->setUpperBound(-1);
	m_element_EOperation_getRequiredStereotypes->setUnique(true);
	m_element_EOperation_getRequiredStereotypes->setOrdered(false);
	
	
	m_element_EOperation_getSourceDirectedRelationships->setEType(getDirectedRelationship_EClass());
	m_element_EOperation_getSourceDirectedRelationships->setName("getSourceDirectedRelationships");
	m_element_EOperation_getSourceDirectedRelationships->setLowerBound(0);
	m_element_EOperation_getSourceDirectedRelationships->setUpperBound(-1);
	m_element_EOperation_getSourceDirectedRelationships->setUnique(true);
	m_element_EOperation_getSourceDirectedRelationships->setOrdered(false);
	
	
	m_element_EOperation_getSourceDirectedRelationships_EClass->setEType(getDirectedRelationship_EClass());
	m_element_EOperation_getSourceDirectedRelationships_EClass->setName("getSourceDirectedRelationships");
	m_element_EOperation_getSourceDirectedRelationships_EClass->setLowerBound(0);
	m_element_EOperation_getSourceDirectedRelationships_EClass->setUpperBound(-1);
	m_element_EOperation_getSourceDirectedRelationships_EClass->setUnique(true);
	m_element_EOperation_getSourceDirectedRelationships_EClass->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getSourceDirectedRelationships_EClass);
		parameter->setName("eClass");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEClass_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getStereotypeApplication_Stereotype->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_element_EOperation_getStereotypeApplication_Stereotype->setName("getStereotypeApplication");
	m_element_EOperation_getStereotypeApplication_Stereotype->setLowerBound(0);
	m_element_EOperation_getStereotypeApplication_Stereotype->setUpperBound(1);
	m_element_EOperation_getStereotypeApplication_Stereotype->setUnique(true);
	m_element_EOperation_getStereotypeApplication_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getStereotypeApplication_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getStereotypeApplications->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_element_EOperation_getStereotypeApplications->setName("getStereotypeApplications");
	m_element_EOperation_getStereotypeApplications->setLowerBound(0);
	m_element_EOperation_getStereotypeApplications->setUpperBound(-1);
	m_element_EOperation_getStereotypeApplications->setUnique(true);
	m_element_EOperation_getStereotypeApplications->setOrdered(false);
	
	
	m_element_EOperation_getTargetDirectedRelationships->setEType(getDirectedRelationship_EClass());
	m_element_EOperation_getTargetDirectedRelationships->setName("getTargetDirectedRelationships");
	m_element_EOperation_getTargetDirectedRelationships->setLowerBound(0);
	m_element_EOperation_getTargetDirectedRelationships->setUpperBound(-1);
	m_element_EOperation_getTargetDirectedRelationships->setUnique(true);
	m_element_EOperation_getTargetDirectedRelationships->setOrdered(false);
	
	
	m_element_EOperation_getTargetDirectedRelationships_EClass->setEType(getDirectedRelationship_EClass());
	m_element_EOperation_getTargetDirectedRelationships_EClass->setName("getTargetDirectedRelationships");
	m_element_EOperation_getTargetDirectedRelationships_EClass->setLowerBound(0);
	m_element_EOperation_getTargetDirectedRelationships_EClass->setUpperBound(-1);
	m_element_EOperation_getTargetDirectedRelationships_EClass->setUnique(true);
	m_element_EOperation_getTargetDirectedRelationships_EClass->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getTargetDirectedRelationships_EClass);
		parameter->setName("eClass");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEClass_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_getValue_Stereotype_String->setEType(ecore::EcorePackage::eInstance()->getEJavaObject_EDataType());
	m_element_EOperation_getValue_Stereotype_String->setName("getValue");
	m_element_EOperation_getValue_Stereotype_String->setLowerBound(0);
	m_element_EOperation_getValue_Stereotype_String->setUpperBound(1);
	m_element_EOperation_getValue_Stereotype_String->setUnique(true);
	m_element_EOperation_getValue_Stereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getValue_Stereotype_String);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_getValue_Stereotype_String);
		parameter->setName("propertyName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_hasKeyword_String->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_hasKeyword_String->setName("hasKeyword");
	m_element_EOperation_hasKeyword_String->setLowerBound(1);
	m_element_EOperation_hasKeyword_String->setUpperBound(1);
	m_element_EOperation_hasKeyword_String->setUnique(true);
	m_element_EOperation_hasKeyword_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_hasKeyword_String);
		parameter->setName("keyword");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_hasValue_Stereotype_String->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_hasValue_Stereotype_String->setName("hasValue");
	m_element_EOperation_hasValue_Stereotype_String->setLowerBound(1);
	m_element_EOperation_hasValue_Stereotype_String->setUpperBound(1);
	m_element_EOperation_hasValue_Stereotype_String->setUnique(true);
	m_element_EOperation_hasValue_Stereotype_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_hasValue_Stereotype_String);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_hasValue_Stereotype_String);
		parameter->setName("propertyName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setName("has_owner");
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setLowerBound(0);
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setUpperBound(1);
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setUnique(true);
	m_element_EOperation_has_owner_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_has_owner_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_has_owner_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_isStereotypeApplicable_Stereotype->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_isStereotypeApplicable_Stereotype->setName("isStereotypeApplicable");
	m_element_EOperation_isStereotypeApplicable_Stereotype->setLowerBound(1);
	m_element_EOperation_isStereotypeApplicable_Stereotype->setUpperBound(1);
	m_element_EOperation_isStereotypeApplicable_Stereotype->setUnique(true);
	m_element_EOperation_isStereotypeApplicable_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_isStereotypeApplicable_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_isStereotypeApplied_Stereotype->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_isStereotypeApplied_Stereotype->setName("isStereotypeApplied");
	m_element_EOperation_isStereotypeApplied_Stereotype->setLowerBound(1);
	m_element_EOperation_isStereotypeApplied_Stereotype->setUpperBound(1);
	m_element_EOperation_isStereotypeApplied_Stereotype->setUnique(true);
	m_element_EOperation_isStereotypeApplied_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_isStereotypeApplied_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_isStereotypeRequired_Stereotype->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_isStereotypeRequired_Stereotype->setName("isStereotypeRequired");
	m_element_EOperation_isStereotypeRequired_Stereotype->setLowerBound(1);
	m_element_EOperation_isStereotypeRequired_Stereotype->setUpperBound(1);
	m_element_EOperation_isStereotypeRequired_Stereotype->setUnique(true);
	m_element_EOperation_isStereotypeRequired_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_isStereotypeRequired_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_mustBeOwned->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_mustBeOwned->setName("mustBeOwned");
	m_element_EOperation_mustBeOwned->setLowerBound(1);
	m_element_EOperation_mustBeOwned->setUpperBound(1);
	m_element_EOperation_mustBeOwned->setUnique(true);
	m_element_EOperation_mustBeOwned->setOrdered(false);
	
	
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setName("not_own_self");
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setLowerBound(0);
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setUpperBound(1);
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setUnique(true);
	m_element_EOperation_not_own_self_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_not_own_self_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_not_own_self_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_removeKeyword_String->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_element_EOperation_removeKeyword_String->setName("removeKeyword");
	m_element_EOperation_removeKeyword_String->setLowerBound(1);
	m_element_EOperation_removeKeyword_String->setUpperBound(1);
	m_element_EOperation_removeKeyword_String->setUnique(true);
	m_element_EOperation_removeKeyword_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_removeKeyword_String);
		parameter->setName("keyword");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_setValue_Stereotype_EJavaObject->setEType(nullptr);
	m_element_EOperation_setValue_Stereotype_EJavaObject->setName("setValue");
	m_element_EOperation_setValue_Stereotype_EJavaObject->setLowerBound(1);
	m_element_EOperation_setValue_Stereotype_EJavaObject->setUpperBound(1);
	m_element_EOperation_setValue_Stereotype_EJavaObject->setUnique(true);
	m_element_EOperation_setValue_Stereotype_EJavaObject->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_setValue_Stereotype_EJavaObject);
		parameter->setName("stereotype");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_setValue_Stereotype_EJavaObject);
		parameter->setName("propertyName");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_setValue_Stereotype_EJavaObject);
		parameter->setName("newValue");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_element_EOperation_unapplyStereotype_Stereotype->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_element_EOperation_unapplyStereotype_Stereotype->setName("unapplyStereotype");
	m_element_EOperation_unapplyStereotype_Stereotype->setLowerBound(1);
	m_element_EOperation_unapplyStereotype_Stereotype->setUpperBound(1);
	m_element_EOperation_unapplyStereotype_Stereotype->setUnique(true);
	m_element_EOperation_unapplyStereotype_Stereotype->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_element_EOperation_unapplyStereotype_Stereotype);
		parameter->setName("stereotype");
		parameter->setEType(getStereotype_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeElementImportContent()
{
	m_elementImport_EClass->setName("ElementImport");
	m_elementImport_EClass->setAbstract(false);
	m_elementImport_EClass->setInterface(false);
	
	m_elementImport_EAttribute_alias = getElementImport_EAttribute_alias();
	m_elementImport_EAttribute_alias->setName("alias");
	m_elementImport_EAttribute_alias->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_elementImport_EAttribute_alias->setLowerBound(0);
	m_elementImport_EAttribute_alias->setUpperBound(1);
	m_elementImport_EAttribute_alias->setTransient(false);
	m_elementImport_EAttribute_alias->setVolatile(false);
	m_elementImport_EAttribute_alias->setChangeable(true);
	m_elementImport_EAttribute_alias->setUnsettable(true);
	m_elementImport_EAttribute_alias->setUnique(true);
	m_elementImport_EAttribute_alias->setDerived(false);
	m_elementImport_EAttribute_alias->setOrdered(false);
	m_elementImport_EAttribute_alias->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_elementImport_EAttribute_alias->setDefaultValueLiteral(defaultValue);
		}
	}
	m_elementImport_EAttribute_visibility = getElementImport_EAttribute_visibility();
	m_elementImport_EAttribute_visibility->setName("visibility");
	m_elementImport_EAttribute_visibility->setEType(getVisibilityKind_EEnum());
	m_elementImport_EAttribute_visibility->setLowerBound(1);
	m_elementImport_EAttribute_visibility->setUpperBound(1);
	m_elementImport_EAttribute_visibility->setTransient(false);
	m_elementImport_EAttribute_visibility->setVolatile(false);
	m_elementImport_EAttribute_visibility->setChangeable(true);
	m_elementImport_EAttribute_visibility->setUnsettable(false);
	m_elementImport_EAttribute_visibility->setUnique(true);
	m_elementImport_EAttribute_visibility->setDerived(false);
	m_elementImport_EAttribute_visibility->setOrdered(false);
	m_elementImport_EAttribute_visibility->setID(false);
	{
		std::string defaultValue = "public";
		if (!defaultValue.empty())
		{
		   m_elementImport_EAttribute_visibility->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_elementImport_EReference_importedElement->setName("importedElement");
	m_elementImport_EReference_importedElement->setEType(getPackageableElement_EClass());
	m_elementImport_EReference_importedElement->setLowerBound(1);
	m_elementImport_EReference_importedElement->setUpperBound(1);
	m_elementImport_EReference_importedElement->setTransient(false);
	m_elementImport_EReference_importedElement->setVolatile(false);
	m_elementImport_EReference_importedElement->setChangeable(true);
	m_elementImport_EReference_importedElement->setUnsettable(false);
	m_elementImport_EReference_importedElement->setUnique(true);
	m_elementImport_EReference_importedElement->setDerived(false);
	m_elementImport_EReference_importedElement->setOrdered(false);
	m_elementImport_EReference_importedElement->setContainment(false);
	m_elementImport_EReference_importedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_elementImport_EReference_importedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_elementImport_EReference_importedElement->setEOpposite(otherEnd);
	    }
	}
	m_elementImport_EReference_importingNamespace->setName("importingNamespace");
	m_elementImport_EReference_importingNamespace->setEType(getNamespace_EClass());
	m_elementImport_EReference_importingNamespace->setLowerBound(1);
	m_elementImport_EReference_importingNamespace->setUpperBound(1);
	m_elementImport_EReference_importingNamespace->setTransient(false);
	m_elementImport_EReference_importingNamespace->setVolatile(false);
	m_elementImport_EReference_importingNamespace->setChangeable(true);
	m_elementImport_EReference_importingNamespace->setUnsettable(false);
	m_elementImport_EReference_importingNamespace->setUnique(true);
	m_elementImport_EReference_importingNamespace->setDerived(false);
	m_elementImport_EReference_importingNamespace->setOrdered(false);
	m_elementImport_EReference_importingNamespace->setContainment(false);
	m_elementImport_EReference_importingNamespace->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_elementImport_EReference_importingNamespace->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getNamespace_EReference_elementImport();
		if (otherEnd != nullptr)
	    {
	   		m_elementImport_EReference_importingNamespace->setEOpposite(otherEnd);
	    }
	}
	
	m_elementImport_EOperation_getName->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_elementImport_EOperation_getName->setName("getName");
	m_elementImport_EOperation_getName->setLowerBound(1);
	m_elementImport_EOperation_getName->setUpperBound(1);
	m_elementImport_EOperation_getName->setUnique(true);
	m_elementImport_EOperation_getName->setOrdered(false);
	
	
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setName("imported_element_is_public");
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setLowerBound(0);
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setUpperBound(1);
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setUnique(true);
	m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_elementImport_EOperation_imported_element_is_public_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setName("visibility_public_or_private");
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setLowerBound(0);
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setUpperBound(1);
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setUnique(true);
	m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_elementImport_EOperation_visibility_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeEncapsulatedClassifierContent()
{
	m_encapsulatedClassifier_EClass->setName("EncapsulatedClassifier");
	m_encapsulatedClassifier_EClass->setAbstract(true);
	m_encapsulatedClassifier_EClass->setInterface(false);
	
	
	m_encapsulatedClassifier_EReference_ownedPort->setName("ownedPort");
	m_encapsulatedClassifier_EReference_ownedPort->setEType(getPort_EClass());
	m_encapsulatedClassifier_EReference_ownedPort->setLowerBound(0);
	m_encapsulatedClassifier_EReference_ownedPort->setUpperBound(-1);
	m_encapsulatedClassifier_EReference_ownedPort->setTransient(true);
	m_encapsulatedClassifier_EReference_ownedPort->setVolatile(true);
	m_encapsulatedClassifier_EReference_ownedPort->setChangeable(false);
	m_encapsulatedClassifier_EReference_ownedPort->setUnsettable(false);
	m_encapsulatedClassifier_EReference_ownedPort->setUnique(true);
	m_encapsulatedClassifier_EReference_ownedPort->setDerived(true);
	m_encapsulatedClassifier_EReference_ownedPort->setOrdered(false);
	m_encapsulatedClassifier_EReference_ownedPort->setContainment(false);
	m_encapsulatedClassifier_EReference_ownedPort->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_encapsulatedClassifier_EReference_ownedPort->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_encapsulatedClassifier_EReference_ownedPort->setEOpposite(otherEnd);
	    }
	}
	
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setEType(getPort_EClass());
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setName("getOwnedPorts");
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setLowerBound(0);
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setUpperBound(-1);
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setUnique(true);
	m_encapsulatedClassifier_EOperation_getOwnedPorts->setOrdered(true);
	
	
	
}

void UmlPackageImpl::initializeEnumerationContent()
{
	m_enumeration_EClass->setName("Enumeration");
	m_enumeration_EClass->setAbstract(false);
	m_enumeration_EClass->setInterface(false);
	
	
	m_enumeration_EReference_ownedLiteral->setName("ownedLiteral");
	m_enumeration_EReference_ownedLiteral->setEType(getEnumerationLiteral_EClass());
	m_enumeration_EReference_ownedLiteral->setLowerBound(0);
	m_enumeration_EReference_ownedLiteral->setUpperBound(-1);
	m_enumeration_EReference_ownedLiteral->setTransient(false);
	m_enumeration_EReference_ownedLiteral->setVolatile(false);
	m_enumeration_EReference_ownedLiteral->setChangeable(true);
	m_enumeration_EReference_ownedLiteral->setUnsettable(false);
	m_enumeration_EReference_ownedLiteral->setUnique(true);
	m_enumeration_EReference_ownedLiteral->setDerived(false);
	m_enumeration_EReference_ownedLiteral->setOrdered(true);
	m_enumeration_EReference_ownedLiteral->setContainment(true);
	m_enumeration_EReference_ownedLiteral->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_enumeration_EReference_ownedLiteral->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getEnumerationLiteral_EReference_enumeration();
		if (otherEnd != nullptr)
	    {
	   		m_enumeration_EReference_ownedLiteral->setEOpposite(otherEnd);
	    }
	}
	
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setName("immutable");
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setLowerBound(0);
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setUpperBound(1);
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setUnique(true);
	m_enumeration_EOperation_immutable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_enumeration_EOperation_immutable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_enumeration_EOperation_immutable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeEnumerationLiteralContent()
{
	m_enumerationLiteral_EClass->setName("EnumerationLiteral");
	m_enumerationLiteral_EClass->setAbstract(false);
	m_enumerationLiteral_EClass->setInterface(false);
	
	
	m_enumerationLiteral_EReference_enumeration->setName("enumeration");
	m_enumerationLiteral_EReference_enumeration->setEType(getEnumeration_EClass());
	m_enumerationLiteral_EReference_enumeration->setLowerBound(1);
	m_enumerationLiteral_EReference_enumeration->setUpperBound(1);
	m_enumerationLiteral_EReference_enumeration->setTransient(false);
	m_enumerationLiteral_EReference_enumeration->setVolatile(false);
	m_enumerationLiteral_EReference_enumeration->setChangeable(true);
	m_enumerationLiteral_EReference_enumeration->setUnsettable(false);
	m_enumerationLiteral_EReference_enumeration->setUnique(true);
	m_enumerationLiteral_EReference_enumeration->setDerived(false);
	m_enumerationLiteral_EReference_enumeration->setOrdered(false);
	m_enumerationLiteral_EReference_enumeration->setContainment(false);
	m_enumerationLiteral_EReference_enumeration->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_enumerationLiteral_EReference_enumeration->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getEnumeration_EReference_ownedLiteral();
		if (otherEnd != nullptr)
	    {
	   		m_enumerationLiteral_EReference_enumeration->setEOpposite(otherEnd);
	    }
	}
	
	m_enumerationLiteral_EOperation_getClassifier->setEType(getEnumeration_EClass());
	m_enumerationLiteral_EOperation_getClassifier->setName("getClassifier");
	m_enumerationLiteral_EOperation_getClassifier->setLowerBound(1);
	m_enumerationLiteral_EOperation_getClassifier->setUpperBound(1);
	m_enumerationLiteral_EOperation_getClassifier->setUnique(true);
	m_enumerationLiteral_EOperation_getClassifier->setOrdered(false);
	
	
	m_enumerationLiteral_EOperation_getClassifiers->setEType(getClassifier_EClass());
	m_enumerationLiteral_EOperation_getClassifiers->setName("getClassifiers");
	m_enumerationLiteral_EOperation_getClassifiers->setLowerBound(0);
	m_enumerationLiteral_EOperation_getClassifiers->setUpperBound(-1);
	m_enumerationLiteral_EOperation_getClassifiers->setUnique(true);
	m_enumerationLiteral_EOperation_getClassifiers->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeEventContent()
{
	m_event_EClass->setName("Event");
	m_event_EClass->setAbstract(true);
	m_event_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeExceptionHandlerContent()
{
	m_exceptionHandler_EClass->setName("ExceptionHandler");
	m_exceptionHandler_EClass->setAbstract(false);
	m_exceptionHandler_EClass->setInterface(false);
	
	
	m_exceptionHandler_EReference_exceptionInput->setName("exceptionInput");
	m_exceptionHandler_EReference_exceptionInput->setEType(getObjectNode_EClass());
	m_exceptionHandler_EReference_exceptionInput->setLowerBound(1);
	m_exceptionHandler_EReference_exceptionInput->setUpperBound(1);
	m_exceptionHandler_EReference_exceptionInput->setTransient(false);
	m_exceptionHandler_EReference_exceptionInput->setVolatile(false);
	m_exceptionHandler_EReference_exceptionInput->setChangeable(true);
	m_exceptionHandler_EReference_exceptionInput->setUnsettable(false);
	m_exceptionHandler_EReference_exceptionInput->setUnique(true);
	m_exceptionHandler_EReference_exceptionInput->setDerived(false);
	m_exceptionHandler_EReference_exceptionInput->setOrdered(false);
	m_exceptionHandler_EReference_exceptionInput->setContainment(false);
	m_exceptionHandler_EReference_exceptionInput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_exceptionHandler_EReference_exceptionInput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_exceptionHandler_EReference_exceptionInput->setEOpposite(otherEnd);
	    }
	}
	m_exceptionHandler_EReference_exceptionType->setName("exceptionType");
	m_exceptionHandler_EReference_exceptionType->setEType(getClassifier_EClass());
	m_exceptionHandler_EReference_exceptionType->setLowerBound(1);
	m_exceptionHandler_EReference_exceptionType->setUpperBound(-1);
	m_exceptionHandler_EReference_exceptionType->setTransient(false);
	m_exceptionHandler_EReference_exceptionType->setVolatile(false);
	m_exceptionHandler_EReference_exceptionType->setChangeable(true);
	m_exceptionHandler_EReference_exceptionType->setUnsettable(false);
	m_exceptionHandler_EReference_exceptionType->setUnique(true);
	m_exceptionHandler_EReference_exceptionType->setDerived(false);
	m_exceptionHandler_EReference_exceptionType->setOrdered(false);
	m_exceptionHandler_EReference_exceptionType->setContainment(false);
	m_exceptionHandler_EReference_exceptionType->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_exceptionHandler_EReference_exceptionType->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_exceptionHandler_EReference_exceptionType->setEOpposite(otherEnd);
	    }
	}
	m_exceptionHandler_EReference_handlerBody->setName("handlerBody");
	m_exceptionHandler_EReference_handlerBody->setEType(getExecutableNode_EClass());
	m_exceptionHandler_EReference_handlerBody->setLowerBound(1);
	m_exceptionHandler_EReference_handlerBody->setUpperBound(1);
	m_exceptionHandler_EReference_handlerBody->setTransient(false);
	m_exceptionHandler_EReference_handlerBody->setVolatile(false);
	m_exceptionHandler_EReference_handlerBody->setChangeable(true);
	m_exceptionHandler_EReference_handlerBody->setUnsettable(false);
	m_exceptionHandler_EReference_handlerBody->setUnique(true);
	m_exceptionHandler_EReference_handlerBody->setDerived(false);
	m_exceptionHandler_EReference_handlerBody->setOrdered(false);
	m_exceptionHandler_EReference_handlerBody->setContainment(false);
	m_exceptionHandler_EReference_handlerBody->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_exceptionHandler_EReference_handlerBody->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_exceptionHandler_EReference_handlerBody->setEOpposite(otherEnd);
	    }
	}
	m_exceptionHandler_EReference_protectedNode->setName("protectedNode");
	m_exceptionHandler_EReference_protectedNode->setEType(getExecutableNode_EClass());
	m_exceptionHandler_EReference_protectedNode->setLowerBound(1);
	m_exceptionHandler_EReference_protectedNode->setUpperBound(1);
	m_exceptionHandler_EReference_protectedNode->setTransient(false);
	m_exceptionHandler_EReference_protectedNode->setVolatile(false);
	m_exceptionHandler_EReference_protectedNode->setChangeable(true);
	m_exceptionHandler_EReference_protectedNode->setUnsettable(false);
	m_exceptionHandler_EReference_protectedNode->setUnique(true);
	m_exceptionHandler_EReference_protectedNode->setDerived(false);
	m_exceptionHandler_EReference_protectedNode->setOrdered(false);
	m_exceptionHandler_EReference_protectedNode->setContainment(false);
	m_exceptionHandler_EReference_protectedNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_exceptionHandler_EReference_protectedNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExecutableNode_EReference_handler();
		if (otherEnd != nullptr)
	    {
	   		m_exceptionHandler_EReference_protectedNode->setEOpposite(otherEnd);
	    }
	}
	
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setName("edge_source_target");
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_edge_source_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setName("exception_input_type");
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_exception_input_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setName("handler_body_edges");
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_handler_body_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setName("handler_body_owner");
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_handler_body_owner_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setName("one_input");
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_one_input_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setName("output_pins");
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_exceptionHandler_EOperation_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExecutableNodeContent()
{
	m_executableNode_EClass->setName("ExecutableNode");
	m_executableNode_EClass->setAbstract(true);
	m_executableNode_EClass->setInterface(false);
	
	
	m_executableNode_EReference_handler->setName("handler");
	m_executableNode_EReference_handler->setEType(getExceptionHandler_EClass());
	m_executableNode_EReference_handler->setLowerBound(0);
	m_executableNode_EReference_handler->setUpperBound(-1);
	m_executableNode_EReference_handler->setTransient(false);
	m_executableNode_EReference_handler->setVolatile(false);
	m_executableNode_EReference_handler->setChangeable(true);
	m_executableNode_EReference_handler->setUnsettable(false);
	m_executableNode_EReference_handler->setUnique(true);
	m_executableNode_EReference_handler->setDerived(false);
	m_executableNode_EReference_handler->setOrdered(false);
	m_executableNode_EReference_handler->setContainment(true);
	m_executableNode_EReference_handler->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_executableNode_EReference_handler->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExceptionHandler_EReference_protectedNode();
		if (otherEnd != nullptr)
	    {
	   		m_executableNode_EReference_handler->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeExecutionEnvironmentContent()
{
	m_executionEnvironment_EClass->setName("ExecutionEnvironment");
	m_executionEnvironment_EClass->setAbstract(false);
	m_executionEnvironment_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeExecutionOccurrenceSpecificationContent()
{
	m_executionOccurrenceSpecification_EClass->setName("ExecutionOccurrenceSpecification");
	m_executionOccurrenceSpecification_EClass->setAbstract(false);
	m_executionOccurrenceSpecification_EClass->setInterface(false);
	
	
	m_executionOccurrenceSpecification_EReference_execution->setName("execution");
	m_executionOccurrenceSpecification_EReference_execution->setEType(getExecutionSpecification_EClass());
	m_executionOccurrenceSpecification_EReference_execution->setLowerBound(1);
	m_executionOccurrenceSpecification_EReference_execution->setUpperBound(1);
	m_executionOccurrenceSpecification_EReference_execution->setTransient(false);
	m_executionOccurrenceSpecification_EReference_execution->setVolatile(false);
	m_executionOccurrenceSpecification_EReference_execution->setChangeable(true);
	m_executionOccurrenceSpecification_EReference_execution->setUnsettable(false);
	m_executionOccurrenceSpecification_EReference_execution->setUnique(true);
	m_executionOccurrenceSpecification_EReference_execution->setDerived(false);
	m_executionOccurrenceSpecification_EReference_execution->setOrdered(false);
	m_executionOccurrenceSpecification_EReference_execution->setContainment(false);
	m_executionOccurrenceSpecification_EReference_execution->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_executionOccurrenceSpecification_EReference_execution->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_executionOccurrenceSpecification_EReference_execution->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeExecutionSpecificationContent()
{
	m_executionSpecification_EClass->setName("ExecutionSpecification");
	m_executionSpecification_EClass->setAbstract(true);
	m_executionSpecification_EClass->setInterface(false);
	
	
	m_executionSpecification_EReference_finish->setName("finish");
	m_executionSpecification_EReference_finish->setEType(getOccurrenceSpecification_EClass());
	m_executionSpecification_EReference_finish->setLowerBound(1);
	m_executionSpecification_EReference_finish->setUpperBound(1);
	m_executionSpecification_EReference_finish->setTransient(false);
	m_executionSpecification_EReference_finish->setVolatile(false);
	m_executionSpecification_EReference_finish->setChangeable(true);
	m_executionSpecification_EReference_finish->setUnsettable(false);
	m_executionSpecification_EReference_finish->setUnique(true);
	m_executionSpecification_EReference_finish->setDerived(false);
	m_executionSpecification_EReference_finish->setOrdered(false);
	m_executionSpecification_EReference_finish->setContainment(false);
	m_executionSpecification_EReference_finish->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_executionSpecification_EReference_finish->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_executionSpecification_EReference_finish->setEOpposite(otherEnd);
	    }
	}
	m_executionSpecification_EReference_start->setName("start");
	m_executionSpecification_EReference_start->setEType(getOccurrenceSpecification_EClass());
	m_executionSpecification_EReference_start->setLowerBound(1);
	m_executionSpecification_EReference_start->setUpperBound(1);
	m_executionSpecification_EReference_start->setTransient(false);
	m_executionSpecification_EReference_start->setVolatile(false);
	m_executionSpecification_EReference_start->setChangeable(true);
	m_executionSpecification_EReference_start->setUnsettable(false);
	m_executionSpecification_EReference_start->setUnique(true);
	m_executionSpecification_EReference_start->setDerived(false);
	m_executionSpecification_EReference_start->setOrdered(false);
	m_executionSpecification_EReference_start->setContainment(false);
	m_executionSpecification_EReference_start->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_executionSpecification_EReference_start->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_executionSpecification_EReference_start->setEOpposite(otherEnd);
	    }
	}
	
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setName("same_lifeline");
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setLowerBound(0);
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setUpperBound(1);
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setUnique(true);
	m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_executionSpecification_EOperation_same_lifeline_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExpansionNodeContent()
{
	m_expansionNode_EClass->setName("ExpansionNode");
	m_expansionNode_EClass->setAbstract(false);
	m_expansionNode_EClass->setInterface(false);
	
	
	m_expansionNode_EReference_regionAsInput->setName("regionAsInput");
	m_expansionNode_EReference_regionAsInput->setEType(getExpansionRegion_EClass());
	m_expansionNode_EReference_regionAsInput->setLowerBound(0);
	m_expansionNode_EReference_regionAsInput->setUpperBound(1);
	m_expansionNode_EReference_regionAsInput->setTransient(false);
	m_expansionNode_EReference_regionAsInput->setVolatile(false);
	m_expansionNode_EReference_regionAsInput->setChangeable(true);
	m_expansionNode_EReference_regionAsInput->setUnsettable(false);
	m_expansionNode_EReference_regionAsInput->setUnique(true);
	m_expansionNode_EReference_regionAsInput->setDerived(false);
	m_expansionNode_EReference_regionAsInput->setOrdered(false);
	m_expansionNode_EReference_regionAsInput->setContainment(false);
	m_expansionNode_EReference_regionAsInput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_expansionNode_EReference_regionAsInput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExpansionRegion_EReference_inputElement();
		if (otherEnd != nullptr)
	    {
	   		m_expansionNode_EReference_regionAsInput->setEOpposite(otherEnd);
	    }
	}
	m_expansionNode_EReference_regionAsOutput->setName("regionAsOutput");
	m_expansionNode_EReference_regionAsOutput->setEType(getExpansionRegion_EClass());
	m_expansionNode_EReference_regionAsOutput->setLowerBound(0);
	m_expansionNode_EReference_regionAsOutput->setUpperBound(1);
	m_expansionNode_EReference_regionAsOutput->setTransient(false);
	m_expansionNode_EReference_regionAsOutput->setVolatile(false);
	m_expansionNode_EReference_regionAsOutput->setChangeable(true);
	m_expansionNode_EReference_regionAsOutput->setUnsettable(false);
	m_expansionNode_EReference_regionAsOutput->setUnique(true);
	m_expansionNode_EReference_regionAsOutput->setDerived(false);
	m_expansionNode_EReference_regionAsOutput->setOrdered(false);
	m_expansionNode_EReference_regionAsOutput->setContainment(false);
	m_expansionNode_EReference_regionAsOutput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_expansionNode_EReference_regionAsOutput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExpansionRegion_EReference_outputElement();
		if (otherEnd != nullptr)
	    {
	   		m_expansionNode_EReference_regionAsOutput->setEOpposite(otherEnd);
	    }
	}
	
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setName("region_as_input_or_output");
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setLowerBound(0);
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setUpperBound(1);
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setUnique(true);
	m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_expansionNode_EOperation_region_as_input_or_output_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExpansionRegionContent()
{
	m_expansionRegion_EClass->setName("ExpansionRegion");
	m_expansionRegion_EClass->setAbstract(false);
	m_expansionRegion_EClass->setInterface(false);
	
	m_expansionRegion_EAttribute_mode = getExpansionRegion_EAttribute_mode();
	m_expansionRegion_EAttribute_mode->setName("mode");
	m_expansionRegion_EAttribute_mode->setEType(getExpansionKind_EEnum());
	m_expansionRegion_EAttribute_mode->setLowerBound(1);
	m_expansionRegion_EAttribute_mode->setUpperBound(1);
	m_expansionRegion_EAttribute_mode->setTransient(false);
	m_expansionRegion_EAttribute_mode->setVolatile(false);
	m_expansionRegion_EAttribute_mode->setChangeable(true);
	m_expansionRegion_EAttribute_mode->setUnsettable(false);
	m_expansionRegion_EAttribute_mode->setUnique(true);
	m_expansionRegion_EAttribute_mode->setDerived(false);
	m_expansionRegion_EAttribute_mode->setOrdered(false);
	m_expansionRegion_EAttribute_mode->setID(false);
	{
		std::string defaultValue = "iterative";
		if (!defaultValue.empty())
		{
		   m_expansionRegion_EAttribute_mode->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_expansionRegion_EReference_inputElement->setName("inputElement");
	m_expansionRegion_EReference_inputElement->setEType(getExpansionNode_EClass());
	m_expansionRegion_EReference_inputElement->setLowerBound(1);
	m_expansionRegion_EReference_inputElement->setUpperBound(-1);
	m_expansionRegion_EReference_inputElement->setTransient(false);
	m_expansionRegion_EReference_inputElement->setVolatile(false);
	m_expansionRegion_EReference_inputElement->setChangeable(true);
	m_expansionRegion_EReference_inputElement->setUnsettable(false);
	m_expansionRegion_EReference_inputElement->setUnique(true);
	m_expansionRegion_EReference_inputElement->setDerived(false);
	m_expansionRegion_EReference_inputElement->setOrdered(false);
	m_expansionRegion_EReference_inputElement->setContainment(false);
	m_expansionRegion_EReference_inputElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_expansionRegion_EReference_inputElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExpansionNode_EReference_regionAsInput();
		if (otherEnd != nullptr)
	    {
	   		m_expansionRegion_EReference_inputElement->setEOpposite(otherEnd);
	    }
	}
	m_expansionRegion_EReference_outputElement->setName("outputElement");
	m_expansionRegion_EReference_outputElement->setEType(getExpansionNode_EClass());
	m_expansionRegion_EReference_outputElement->setLowerBound(0);
	m_expansionRegion_EReference_outputElement->setUpperBound(-1);
	m_expansionRegion_EReference_outputElement->setTransient(false);
	m_expansionRegion_EReference_outputElement->setVolatile(false);
	m_expansionRegion_EReference_outputElement->setChangeable(true);
	m_expansionRegion_EReference_outputElement->setUnsettable(false);
	m_expansionRegion_EReference_outputElement->setUnique(true);
	m_expansionRegion_EReference_outputElement->setDerived(false);
	m_expansionRegion_EReference_outputElement->setOrdered(false);
	m_expansionRegion_EReference_outputElement->setContainment(false);
	m_expansionRegion_EReference_outputElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_expansionRegion_EReference_outputElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExpansionNode_EReference_regionAsOutput();
		if (otherEnd != nullptr)
	    {
	   		m_expansionRegion_EReference_outputElement->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeExpressionContent()
{
	m_expression_EClass->setName("Expression");
	m_expression_EClass->setAbstract(false);
	m_expression_EClass->setInterface(false);
	
	m_expression_EAttribute_symbol = getExpression_EAttribute_symbol();
	m_expression_EAttribute_symbol->setName("symbol");
	m_expression_EAttribute_symbol->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_expression_EAttribute_symbol->setLowerBound(0);
	m_expression_EAttribute_symbol->setUpperBound(1);
	m_expression_EAttribute_symbol->setTransient(false);
	m_expression_EAttribute_symbol->setVolatile(false);
	m_expression_EAttribute_symbol->setChangeable(true);
	m_expression_EAttribute_symbol->setUnsettable(true);
	m_expression_EAttribute_symbol->setUnique(true);
	m_expression_EAttribute_symbol->setDerived(false);
	m_expression_EAttribute_symbol->setOrdered(false);
	m_expression_EAttribute_symbol->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_expression_EAttribute_symbol->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_expression_EReference_operand->setName("operand");
	m_expression_EReference_operand->setEType(getValueSpecification_EClass());
	m_expression_EReference_operand->setLowerBound(0);
	m_expression_EReference_operand->setUpperBound(-1);
	m_expression_EReference_operand->setTransient(false);
	m_expression_EReference_operand->setVolatile(false);
	m_expression_EReference_operand->setChangeable(true);
	m_expression_EReference_operand->setUnsettable(false);
	m_expression_EReference_operand->setUnique(true);
	m_expression_EReference_operand->setDerived(false);
	m_expression_EReference_operand->setOrdered(true);
	m_expression_EReference_operand->setContainment(true);
	m_expression_EReference_operand->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_expression_EReference_operand->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_expression_EReference_operand->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeExtendContent()
{
	m_extend_EClass->setName("Extend");
	m_extend_EClass->setAbstract(false);
	m_extend_EClass->setInterface(false);
	
	
	m_extend_EReference_condition->setName("condition");
	m_extend_EReference_condition->setEType(getConstraint_EClass());
	m_extend_EReference_condition->setLowerBound(0);
	m_extend_EReference_condition->setUpperBound(1);
	m_extend_EReference_condition->setTransient(false);
	m_extend_EReference_condition->setVolatile(false);
	m_extend_EReference_condition->setChangeable(true);
	m_extend_EReference_condition->setUnsettable(false);
	m_extend_EReference_condition->setUnique(true);
	m_extend_EReference_condition->setDerived(false);
	m_extend_EReference_condition->setOrdered(false);
	m_extend_EReference_condition->setContainment(true);
	m_extend_EReference_condition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extend_EReference_condition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_extend_EReference_condition->setEOpposite(otherEnd);
	    }
	}
	m_extend_EReference_extendedCase->setName("extendedCase");
	m_extend_EReference_extendedCase->setEType(getUseCase_EClass());
	m_extend_EReference_extendedCase->setLowerBound(1);
	m_extend_EReference_extendedCase->setUpperBound(1);
	m_extend_EReference_extendedCase->setTransient(false);
	m_extend_EReference_extendedCase->setVolatile(false);
	m_extend_EReference_extendedCase->setChangeable(true);
	m_extend_EReference_extendedCase->setUnsettable(false);
	m_extend_EReference_extendedCase->setUnique(true);
	m_extend_EReference_extendedCase->setDerived(false);
	m_extend_EReference_extendedCase->setOrdered(false);
	m_extend_EReference_extendedCase->setContainment(false);
	m_extend_EReference_extendedCase->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extend_EReference_extendedCase->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_extend_EReference_extendedCase->setEOpposite(otherEnd);
	    }
	}
	m_extend_EReference_extension->setName("extension");
	m_extend_EReference_extension->setEType(getUseCase_EClass());
	m_extend_EReference_extension->setLowerBound(1);
	m_extend_EReference_extension->setUpperBound(1);
	m_extend_EReference_extension->setTransient(false);
	m_extend_EReference_extension->setVolatile(false);
	m_extend_EReference_extension->setChangeable(true);
	m_extend_EReference_extension->setUnsettable(false);
	m_extend_EReference_extension->setUnique(true);
	m_extend_EReference_extension->setDerived(false);
	m_extend_EReference_extension->setOrdered(false);
	m_extend_EReference_extension->setContainment(false);
	m_extend_EReference_extension->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extend_EReference_extension->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getUseCase_EReference_extend();
		if (otherEnd != nullptr)
	    {
	   		m_extend_EReference_extension->setEOpposite(otherEnd);
	    }
	}
	m_extend_EReference_extensionLocation->setName("extensionLocation");
	m_extend_EReference_extensionLocation->setEType(getExtensionPoint_EClass());
	m_extend_EReference_extensionLocation->setLowerBound(1);
	m_extend_EReference_extensionLocation->setUpperBound(-1);
	m_extend_EReference_extensionLocation->setTransient(false);
	m_extend_EReference_extensionLocation->setVolatile(false);
	m_extend_EReference_extensionLocation->setChangeable(true);
	m_extend_EReference_extensionLocation->setUnsettable(false);
	m_extend_EReference_extensionLocation->setUnique(true);
	m_extend_EReference_extensionLocation->setDerived(false);
	m_extend_EReference_extensionLocation->setOrdered(true);
	m_extend_EReference_extensionLocation->setContainment(false);
	m_extend_EReference_extensionLocation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extend_EReference_extensionLocation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_extend_EReference_extensionLocation->setEOpposite(otherEnd);
	    }
	}
	
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setName("extension_points");
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setLowerBound(0);
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setUpperBound(1);
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setUnique(true);
	m_extend_EOperation_extension_points_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extend_EOperation_extension_points_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extend_EOperation_extension_points_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExtensionContent()
{
	m_extension_EClass->setName("Extension");
	m_extension_EClass->setAbstract(false);
	m_extension_EClass->setInterface(false);
	
	m_extension_EAttribute_isRequired = getExtension_EAttribute_isRequired();
	m_extension_EAttribute_isRequired->setName("isRequired");
	m_extension_EAttribute_isRequired->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_extension_EAttribute_isRequired->setLowerBound(1);
	m_extension_EAttribute_isRequired->setUpperBound(1);
	m_extension_EAttribute_isRequired->setTransient(true);
	m_extension_EAttribute_isRequired->setVolatile(true);
	m_extension_EAttribute_isRequired->setChangeable(false);
	m_extension_EAttribute_isRequired->setUnsettable(false);
	m_extension_EAttribute_isRequired->setUnique(true);
	m_extension_EAttribute_isRequired->setDerived(true);
	m_extension_EAttribute_isRequired->setOrdered(false);
	m_extension_EAttribute_isRequired->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_extension_EAttribute_isRequired->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_extension_EReference_metaclass->setName("metaclass");
	m_extension_EReference_metaclass->setEType(getClass_EClass());
	m_extension_EReference_metaclass->setLowerBound(1);
	m_extension_EReference_metaclass->setUpperBound(1);
	m_extension_EReference_metaclass->setTransient(true);
	m_extension_EReference_metaclass->setVolatile(true);
	m_extension_EReference_metaclass->setChangeable(false);
	m_extension_EReference_metaclass->setUnsettable(false);
	m_extension_EReference_metaclass->setUnique(true);
	m_extension_EReference_metaclass->setDerived(true);
	m_extension_EReference_metaclass->setOrdered(false);
	m_extension_EReference_metaclass->setContainment(false);
	m_extension_EReference_metaclass->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extension_EReference_metaclass->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClass_EReference_extension();
		if (otherEnd != nullptr)
	    {
	   		m_extension_EReference_metaclass->setEOpposite(otherEnd);
	    }
	}
	
	m_extension_EOperation_getMetaclass->setEType(getClass_EClass());
	m_extension_EOperation_getMetaclass->setName("getMetaclass");
	m_extension_EOperation_getMetaclass->setLowerBound(1);
	m_extension_EOperation_getMetaclass->setUpperBound(1);
	m_extension_EOperation_getMetaclass->setUnique(true);
	m_extension_EOperation_getMetaclass->setOrdered(false);
	
	
	m_extension_EOperation_getStereotype->setEType(getStereotype_EClass());
	m_extension_EOperation_getStereotype->setName("getStereotype");
	m_extension_EOperation_getStereotype->setLowerBound(0);
	m_extension_EOperation_getStereotype->setUpperBound(1);
	m_extension_EOperation_getStereotype->setUnique(true);
	m_extension_EOperation_getStereotype->setOrdered(false);
	
	
	m_extension_EOperation_getStereotypeEnd->setEType(getProperty_EClass());
	m_extension_EOperation_getStereotypeEnd->setName("getStereotypeEnd");
	m_extension_EOperation_getStereotypeEnd->setLowerBound(0);
	m_extension_EOperation_getStereotypeEnd->setUpperBound(1);
	m_extension_EOperation_getStereotypeEnd->setUnique(true);
	m_extension_EOperation_getStereotypeEnd->setOrdered(false);
	
	
	m_extension_EOperation_isRequired->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_extension_EOperation_isRequired->setName("isRequired");
	m_extension_EOperation_isRequired->setLowerBound(1);
	m_extension_EOperation_isRequired->setUpperBound(1);
	m_extension_EOperation_isRequired->setUnique(true);
	m_extension_EOperation_isRequired->setOrdered(false);
	
	
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setName("is_binary");
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setLowerBound(0);
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setUpperBound(1);
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setUnique(true);
	m_extension_EOperation_is_binary_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extension_EOperation_is_binary_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extension_EOperation_is_binary_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_extension_EOperation_metaclassEnd->setEType(getProperty_EClass());
	m_extension_EOperation_metaclassEnd->setName("metaclassEnd");
	m_extension_EOperation_metaclassEnd->setLowerBound(1);
	m_extension_EOperation_metaclassEnd->setUpperBound(1);
	m_extension_EOperation_metaclassEnd->setUnique(true);
	m_extension_EOperation_metaclassEnd->setOrdered(false);
	
	
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setName("non_owned_end");
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setUnique(true);
	m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extension_EOperation_non_owned_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExtensionEndContent()
{
	m_extensionEnd_EClass->setName("ExtensionEnd");
	m_extensionEnd_EClass->setAbstract(false);
	m_extensionEnd_EClass->setInterface(false);
	
	
	
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setName("aggregation");
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setLowerBound(0);
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setUpperBound(1);
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setUnique(true);
	m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionEnd_EOperation_aggregation_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionEnd_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeExtensionPointContent()
{
	m_extensionPoint_EClass->setName("ExtensionPoint");
	m_extensionPoint_EClass->setAbstract(false);
	m_extensionPoint_EClass->setInterface(false);
	
	
	m_extensionPoint_EReference_useCase->setName("useCase");
	m_extensionPoint_EReference_useCase->setEType(getUseCase_EClass());
	m_extensionPoint_EReference_useCase->setLowerBound(1);
	m_extensionPoint_EReference_useCase->setUpperBound(1);
	m_extensionPoint_EReference_useCase->setTransient(false);
	m_extensionPoint_EReference_useCase->setVolatile(false);
	m_extensionPoint_EReference_useCase->setChangeable(true);
	m_extensionPoint_EReference_useCase->setUnsettable(false);
	m_extensionPoint_EReference_useCase->setUnique(true);
	m_extensionPoint_EReference_useCase->setDerived(false);
	m_extensionPoint_EReference_useCase->setOrdered(false);
	m_extensionPoint_EReference_useCase->setContainment(false);
	m_extensionPoint_EReference_useCase->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_extensionPoint_EReference_useCase->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getUseCase_EReference_extensionPoint();
		if (otherEnd != nullptr)
	    {
	   		m_extensionPoint_EReference_useCase->setEOpposite(otherEnd);
	    }
	}
	
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setName("must_have_name");
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setUnique(true);
	m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_extensionPoint_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeFactoryContent()
{
	m_factory_EClass->setName("Factory");
	m_factory_EClass->setAbstract(false);
	m_factory_EClass->setInterface(false);
	
	
	
	m_factory_EOperation_create_Class->setEType(getElement_EClass());
	m_factory_EOperation_create_Class->setName("create");
	m_factory_EOperation_create_Class->setLowerBound(0);
	m_factory_EOperation_create_Class->setUpperBound(1);
	m_factory_EOperation_create_Class->setUnique(true);
	m_factory_EOperation_create_Class->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_factory_EOperation_create_Class);
		parameter->setName("metaClass");
		parameter->setEType(getClass_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeFeatureContent()
{
	m_feature_EClass->setName("Feature");
	m_feature_EClass->setAbstract(true);
	m_feature_EClass->setInterface(false);
	
	m_feature_EAttribute_isStatic = getFeature_EAttribute_isStatic();
	m_feature_EAttribute_isStatic->setName("isStatic");
	m_feature_EAttribute_isStatic->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_feature_EAttribute_isStatic->setLowerBound(1);
	m_feature_EAttribute_isStatic->setUpperBound(1);
	m_feature_EAttribute_isStatic->setTransient(false);
	m_feature_EAttribute_isStatic->setVolatile(false);
	m_feature_EAttribute_isStatic->setChangeable(true);
	m_feature_EAttribute_isStatic->setUnsettable(false);
	m_feature_EAttribute_isStatic->setUnique(true);
	m_feature_EAttribute_isStatic->setDerived(false);
	m_feature_EAttribute_isStatic->setOrdered(false);
	m_feature_EAttribute_isStatic->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_feature_EAttribute_isStatic->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_feature_EReference_featuringClassifier->setName("featuringClassifier");
	m_feature_EReference_featuringClassifier->setEType(getClassifier_EClass());
	m_feature_EReference_featuringClassifier->setLowerBound(0);
	m_feature_EReference_featuringClassifier->setUpperBound(-1);
	m_feature_EReference_featuringClassifier->setTransient(true);
	m_feature_EReference_featuringClassifier->setVolatile(true);
	m_feature_EReference_featuringClassifier->setChangeable(false);
	m_feature_EReference_featuringClassifier->setUnsettable(false);
	m_feature_EReference_featuringClassifier->setUnique(true);
	m_feature_EReference_featuringClassifier->setDerived(true);
	m_feature_EReference_featuringClassifier->setOrdered(false);
	m_feature_EReference_featuringClassifier->setContainment(false);
	m_feature_EReference_featuringClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_feature_EReference_featuringClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClassifier_EReference_feature();
		if (otherEnd != nullptr)
	    {
	   		m_feature_EReference_featuringClassifier->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeFinalNodeContent()
{
	m_finalNode_EClass->setName("FinalNode");
	m_finalNode_EClass->setAbstract(true);
	m_finalNode_EClass->setInterface(false);
	
	
	
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setName("no_outgoing_edges");
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setUnique(true);
	m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalNode_EOperation_no_outgoing_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeFinalStateContent()
{
	m_finalState_EClass->setName("FinalState");
	m_finalState_EClass->setAbstract(false);
	m_finalState_EClass->setInterface(false);
	
	
	
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setName("cannot_reference_submachine");
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_cannot_reference_submachine_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setName("no_entry_behavior");
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_entry_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setName("no_exit_behavior");
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_exit_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setName("no_outgoing_transitions");
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_outgoing_transitions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setName("no_regions");
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_no_regions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_regions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_regions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setName("no_state_behavior");
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_finalState_EOperation_no_state_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeFlowFinalNodeContent()
{
	m_flowFinalNode_EClass->setName("FlowFinalNode");
	m_flowFinalNode_EClass->setAbstract(false);
	m_flowFinalNode_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeForkNodeContent()
{
	m_forkNode_EClass->setName("ForkNode");
	m_forkNode_EClass->setAbstract(false);
	m_forkNode_EClass->setInterface(false);
	
	
	
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setName("edges");
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setUnique(true);
	m_forkNode_EOperation_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_forkNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_forkNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setName("one_incoming_edge");
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setLowerBound(0);
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setUpperBound(1);
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setUnique(true);
	m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_forkNode_EOperation_one_incoming_edge_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeFunctionBehaviorContent()
{
	m_functionBehavior_EClass->setName("FunctionBehavior");
	m_functionBehavior_EClass->setAbstract(false);
	m_functionBehavior_EClass->setInterface(false);
	
	
	
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setName("hasAllDataTypeAttributes");
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setLowerBound(1);
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setUpperBound(1);
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setUnique(true);
	m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_functionBehavior_EOperation_hasAllDataTypeAttributes_DataType);
		parameter->setName("d");
		parameter->setEType(getDataType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setName("one_output_parameter");
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_functionBehavior_EOperation_one_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setName("types_of_parameters");
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_functionBehavior_EOperation_types_of_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeGateContent()
{
	m_gate_EClass->setName("Gate");
	m_gate_EClass->setAbstract(false);
	m_gate_EClass->setInterface(false);
	
	
	
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setName("actual_gate_distinguishable");
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_actual_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setName("actual_gate_matched");
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_actual_gate_matched_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setName("formal_gate_distinguishable");
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_formal_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_getName->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_gate_EOperation_getName->setName("getName");
	m_gate_EOperation_getName->setLowerBound(1);
	m_gate_EOperation_getName->setUpperBound(1);
	m_gate_EOperation_getName->setUnique(true);
	m_gate_EOperation_getName->setOrdered(false);
	
	
	m_gate_EOperation_getOperand->setEType(getInteractionOperand_EClass());
	m_gate_EOperation_getOperand->setName("getOperand");
	m_gate_EOperation_getOperand->setLowerBound(1);
	m_gate_EOperation_getOperand->setUpperBound(1);
	m_gate_EOperation_getOperand->setUnique(true);
	m_gate_EOperation_getOperand->setOrdered(false);
	
	
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setName("inside_cf_gate_distinguishable");
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_inside_cf_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setName("inside_cf_matched");
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_inside_cf_matched_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_isActual->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_gate_EOperation_isActual->setName("isActual");
	m_gate_EOperation_isActual->setLowerBound(1);
	m_gate_EOperation_isActual->setUpperBound(1);
	m_gate_EOperation_isActual->setUnique(true);
	m_gate_EOperation_isActual->setOrdered(false);
	
	
	m_gate_EOperation_isFormal->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_gate_EOperation_isFormal->setName("isFormal");
	m_gate_EOperation_isFormal->setLowerBound(1);
	m_gate_EOperation_isFormal->setUpperBound(1);
	m_gate_EOperation_isFormal->setUnique(true);
	m_gate_EOperation_isFormal->setOrdered(false);
	
	
	m_gate_EOperation_isInsideCF->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_gate_EOperation_isInsideCF->setName("isInsideCF");
	m_gate_EOperation_isInsideCF->setLowerBound(1);
	m_gate_EOperation_isInsideCF->setUpperBound(1);
	m_gate_EOperation_isInsideCF->setUnique(true);
	m_gate_EOperation_isInsideCF->setOrdered(false);
	
	
	m_gate_EOperation_isOutsideCF->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_gate_EOperation_isOutsideCF->setName("isOutsideCF");
	m_gate_EOperation_isOutsideCF->setLowerBound(1);
	m_gate_EOperation_isOutsideCF->setUpperBound(1);
	m_gate_EOperation_isOutsideCF->setUnique(true);
	m_gate_EOperation_isOutsideCF->setOrdered(false);
	
	
	m_gate_EOperation_matches_Gate->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_gate_EOperation_matches_Gate->setName("matches");
	m_gate_EOperation_matches_Gate->setLowerBound(1);
	m_gate_EOperation_matches_Gate->setUpperBound(1);
	m_gate_EOperation_matches_Gate->setUnique(true);
	m_gate_EOperation_matches_Gate->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_matches_Gate);
		parameter->setName("gateToMatch");
		parameter->setEType(getGate_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setName("outside_cf_gate_distinguishable");
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_outside_cf_gate_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setName("outside_cf_matched");
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setLowerBound(0);
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setUpperBound(1);
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setUnique(true);
	m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_gate_EOperation_outside_cf_matched_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeGeneralOrderingContent()
{
	m_generalOrdering_EClass->setName("GeneralOrdering");
	m_generalOrdering_EClass->setAbstract(false);
	m_generalOrdering_EClass->setInterface(false);
	
	
	m_generalOrdering_EReference_after->setName("after");
	m_generalOrdering_EReference_after->setEType(getOccurrenceSpecification_EClass());
	m_generalOrdering_EReference_after->setLowerBound(1);
	m_generalOrdering_EReference_after->setUpperBound(1);
	m_generalOrdering_EReference_after->setTransient(false);
	m_generalOrdering_EReference_after->setVolatile(false);
	m_generalOrdering_EReference_after->setChangeable(true);
	m_generalOrdering_EReference_after->setUnsettable(false);
	m_generalOrdering_EReference_after->setUnique(true);
	m_generalOrdering_EReference_after->setDerived(false);
	m_generalOrdering_EReference_after->setOrdered(false);
	m_generalOrdering_EReference_after->setContainment(false);
	m_generalOrdering_EReference_after->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalOrdering_EReference_after->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOccurrenceSpecification_EReference_toBefore();
		if (otherEnd != nullptr)
	    {
	   		m_generalOrdering_EReference_after->setEOpposite(otherEnd);
	    }
	}
	m_generalOrdering_EReference_before->setName("before");
	m_generalOrdering_EReference_before->setEType(getOccurrenceSpecification_EClass());
	m_generalOrdering_EReference_before->setLowerBound(1);
	m_generalOrdering_EReference_before->setUpperBound(1);
	m_generalOrdering_EReference_before->setTransient(false);
	m_generalOrdering_EReference_before->setVolatile(false);
	m_generalOrdering_EReference_before->setChangeable(true);
	m_generalOrdering_EReference_before->setUnsettable(false);
	m_generalOrdering_EReference_before->setUnique(true);
	m_generalOrdering_EReference_before->setDerived(false);
	m_generalOrdering_EReference_before->setOrdered(false);
	m_generalOrdering_EReference_before->setContainment(false);
	m_generalOrdering_EReference_before->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalOrdering_EReference_before->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOccurrenceSpecification_EReference_toAfter();
		if (otherEnd != nullptr)
	    {
	   		m_generalOrdering_EReference_before->setEOpposite(otherEnd);
	    }
	}
	
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setName("irreflexive_transitive_closure");
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setLowerBound(0);
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setUpperBound(1);
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setUnique(true);
	m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalOrdering_EOperation_irreflexive_transitive_closure_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeGeneralizationContent()
{
	m_generalization_EClass->setName("Generalization");
	m_generalization_EClass->setAbstract(false);
	m_generalization_EClass->setInterface(false);
	
	m_generalization_EAttribute_isSubstitutable = getGeneralization_EAttribute_isSubstitutable();
	m_generalization_EAttribute_isSubstitutable->setName("isSubstitutable");
	m_generalization_EAttribute_isSubstitutable->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_generalization_EAttribute_isSubstitutable->setLowerBound(0);
	m_generalization_EAttribute_isSubstitutable->setUpperBound(1);
	m_generalization_EAttribute_isSubstitutable->setTransient(false);
	m_generalization_EAttribute_isSubstitutable->setVolatile(false);
	m_generalization_EAttribute_isSubstitutable->setChangeable(true);
	m_generalization_EAttribute_isSubstitutable->setUnsettable(false);
	m_generalization_EAttribute_isSubstitutable->setUnique(true);
	m_generalization_EAttribute_isSubstitutable->setDerived(false);
	m_generalization_EAttribute_isSubstitutable->setOrdered(false);
	m_generalization_EAttribute_isSubstitutable->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_generalization_EAttribute_isSubstitutable->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_generalization_EReference_general->setName("general");
	m_generalization_EReference_general->setEType(getClassifier_EClass());
	m_generalization_EReference_general->setLowerBound(1);
	m_generalization_EReference_general->setUpperBound(1);
	m_generalization_EReference_general->setTransient(false);
	m_generalization_EReference_general->setVolatile(false);
	m_generalization_EReference_general->setChangeable(true);
	m_generalization_EReference_general->setUnsettable(false);
	m_generalization_EReference_general->setUnique(true);
	m_generalization_EReference_general->setDerived(false);
	m_generalization_EReference_general->setOrdered(false);
	m_generalization_EReference_general->setContainment(false);
	m_generalization_EReference_general->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalization_EReference_general->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_generalization_EReference_general->setEOpposite(otherEnd);
	    }
	}
	m_generalization_EReference_generalizationSet->setName("generalizationSet");
	m_generalization_EReference_generalizationSet->setEType(getGeneralizationSet_EClass());
	m_generalization_EReference_generalizationSet->setLowerBound(0);
	m_generalization_EReference_generalizationSet->setUpperBound(-1);
	m_generalization_EReference_generalizationSet->setTransient(false);
	m_generalization_EReference_generalizationSet->setVolatile(false);
	m_generalization_EReference_generalizationSet->setChangeable(true);
	m_generalization_EReference_generalizationSet->setUnsettable(false);
	m_generalization_EReference_generalizationSet->setUnique(true);
	m_generalization_EReference_generalizationSet->setDerived(false);
	m_generalization_EReference_generalizationSet->setOrdered(false);
	m_generalization_EReference_generalizationSet->setContainment(false);
	m_generalization_EReference_generalizationSet->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalization_EReference_generalizationSet->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralizationSet_EReference_generalization();
		if (otherEnd != nullptr)
	    {
	   		m_generalization_EReference_generalizationSet->setEOpposite(otherEnd);
	    }
	}
	m_generalization_EReference_specific->setName("specific");
	m_generalization_EReference_specific->setEType(getClassifier_EClass());
	m_generalization_EReference_specific->setLowerBound(1);
	m_generalization_EReference_specific->setUpperBound(1);
	m_generalization_EReference_specific->setTransient(false);
	m_generalization_EReference_specific->setVolatile(false);
	m_generalization_EReference_specific->setChangeable(true);
	m_generalization_EReference_specific->setUnsettable(false);
	m_generalization_EReference_specific->setUnique(true);
	m_generalization_EReference_specific->setDerived(false);
	m_generalization_EReference_specific->setOrdered(false);
	m_generalization_EReference_specific->setContainment(false);
	m_generalization_EReference_specific->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalization_EReference_specific->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClassifier_EReference_generalization();
		if (otherEnd != nullptr)
	    {
	   		m_generalization_EReference_specific->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeGeneralizationSetContent()
{
	m_generalizationSet_EClass->setName("GeneralizationSet");
	m_generalizationSet_EClass->setAbstract(false);
	m_generalizationSet_EClass->setInterface(false);
	
	m_generalizationSet_EAttribute_isCovering = getGeneralizationSet_EAttribute_isCovering();
	m_generalizationSet_EAttribute_isCovering->setName("isCovering");
	m_generalizationSet_EAttribute_isCovering->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_generalizationSet_EAttribute_isCovering->setLowerBound(1);
	m_generalizationSet_EAttribute_isCovering->setUpperBound(1);
	m_generalizationSet_EAttribute_isCovering->setTransient(false);
	m_generalizationSet_EAttribute_isCovering->setVolatile(false);
	m_generalizationSet_EAttribute_isCovering->setChangeable(true);
	m_generalizationSet_EAttribute_isCovering->setUnsettable(false);
	m_generalizationSet_EAttribute_isCovering->setUnique(true);
	m_generalizationSet_EAttribute_isCovering->setDerived(false);
	m_generalizationSet_EAttribute_isCovering->setOrdered(false);
	m_generalizationSet_EAttribute_isCovering->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_generalizationSet_EAttribute_isCovering->setDefaultValueLiteral(defaultValue);
		}
	}
	m_generalizationSet_EAttribute_isDisjoint = getGeneralizationSet_EAttribute_isDisjoint();
	m_generalizationSet_EAttribute_isDisjoint->setName("isDisjoint");
	m_generalizationSet_EAttribute_isDisjoint->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_generalizationSet_EAttribute_isDisjoint->setLowerBound(1);
	m_generalizationSet_EAttribute_isDisjoint->setUpperBound(1);
	m_generalizationSet_EAttribute_isDisjoint->setTransient(false);
	m_generalizationSet_EAttribute_isDisjoint->setVolatile(false);
	m_generalizationSet_EAttribute_isDisjoint->setChangeable(true);
	m_generalizationSet_EAttribute_isDisjoint->setUnsettable(false);
	m_generalizationSet_EAttribute_isDisjoint->setUnique(true);
	m_generalizationSet_EAttribute_isDisjoint->setDerived(false);
	m_generalizationSet_EAttribute_isDisjoint->setOrdered(false);
	m_generalizationSet_EAttribute_isDisjoint->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_generalizationSet_EAttribute_isDisjoint->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_generalizationSet_EReference_generalization->setName("generalization");
	m_generalizationSet_EReference_generalization->setEType(getGeneralization_EClass());
	m_generalizationSet_EReference_generalization->setLowerBound(0);
	m_generalizationSet_EReference_generalization->setUpperBound(-1);
	m_generalizationSet_EReference_generalization->setTransient(false);
	m_generalizationSet_EReference_generalization->setVolatile(false);
	m_generalizationSet_EReference_generalization->setChangeable(true);
	m_generalizationSet_EReference_generalization->setUnsettable(false);
	m_generalizationSet_EReference_generalization->setUnique(true);
	m_generalizationSet_EReference_generalization->setDerived(false);
	m_generalizationSet_EReference_generalization->setOrdered(false);
	m_generalizationSet_EReference_generalization->setContainment(false);
	m_generalizationSet_EReference_generalization->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalizationSet_EReference_generalization->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralization_EReference_generalizationSet();
		if (otherEnd != nullptr)
	    {
	   		m_generalizationSet_EReference_generalization->setEOpposite(otherEnd);
	    }
	}
	m_generalizationSet_EReference_powertype->setName("powertype");
	m_generalizationSet_EReference_powertype->setEType(getClassifier_EClass());
	m_generalizationSet_EReference_powertype->setLowerBound(0);
	m_generalizationSet_EReference_powertype->setUpperBound(1);
	m_generalizationSet_EReference_powertype->setTransient(false);
	m_generalizationSet_EReference_powertype->setVolatile(false);
	m_generalizationSet_EReference_powertype->setChangeable(true);
	m_generalizationSet_EReference_powertype->setUnsettable(false);
	m_generalizationSet_EReference_powertype->setUnique(true);
	m_generalizationSet_EReference_powertype->setDerived(false);
	m_generalizationSet_EReference_powertype->setOrdered(false);
	m_generalizationSet_EReference_powertype->setContainment(false);
	m_generalizationSet_EReference_powertype->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_generalizationSet_EReference_powertype->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClassifier_EReference_powertypeExtent();
		if (otherEnd != nullptr)
	    {
	   		m_generalizationSet_EReference_powertype->setEOpposite(otherEnd);
	    }
	}
	
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setName("generalization_same_classifier");
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalizationSet_EOperation_generalization_same_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setName("maps_to_generalization_set");
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setLowerBound(0);
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setUpperBound(1);
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setUnique(true);
	m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_generalizationSet_EOperation_maps_to_generalization_set_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeImageContent()
{
	m_image_EClass->setName("Image");
	m_image_EClass->setAbstract(false);
	m_image_EClass->setInterface(false);
	
	m_image_EAttribute_content = getImage_EAttribute_content();
	m_image_EAttribute_content->setName("content");
	m_image_EAttribute_content->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_image_EAttribute_content->setLowerBound(0);
	m_image_EAttribute_content->setUpperBound(1);
	m_image_EAttribute_content->setTransient(false);
	m_image_EAttribute_content->setVolatile(false);
	m_image_EAttribute_content->setChangeable(true);
	m_image_EAttribute_content->setUnsettable(true);
	m_image_EAttribute_content->setUnique(true);
	m_image_EAttribute_content->setDerived(false);
	m_image_EAttribute_content->setOrdered(false);
	m_image_EAttribute_content->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_image_EAttribute_content->setDefaultValueLiteral(defaultValue);
		}
	}
	m_image_EAttribute_format = getImage_EAttribute_format();
	m_image_EAttribute_format->setName("format");
	m_image_EAttribute_format->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_image_EAttribute_format->setLowerBound(0);
	m_image_EAttribute_format->setUpperBound(1);
	m_image_EAttribute_format->setTransient(false);
	m_image_EAttribute_format->setVolatile(false);
	m_image_EAttribute_format->setChangeable(true);
	m_image_EAttribute_format->setUnsettable(true);
	m_image_EAttribute_format->setUnique(true);
	m_image_EAttribute_format->setDerived(false);
	m_image_EAttribute_format->setOrdered(false);
	m_image_EAttribute_format->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_image_EAttribute_format->setDefaultValueLiteral(defaultValue);
		}
	}
	m_image_EAttribute_location = getImage_EAttribute_location();
	m_image_EAttribute_location->setName("location");
	m_image_EAttribute_location->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_image_EAttribute_location->setLowerBound(0);
	m_image_EAttribute_location->setUpperBound(1);
	m_image_EAttribute_location->setTransient(false);
	m_image_EAttribute_location->setVolatile(false);
	m_image_EAttribute_location->setChangeable(true);
	m_image_EAttribute_location->setUnsettable(true);
	m_image_EAttribute_location->setUnique(true);
	m_image_EAttribute_location->setDerived(false);
	m_image_EAttribute_location->setOrdered(false);
	m_image_EAttribute_location->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_image_EAttribute_location->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeIncludeContent()
{
	m_include_EClass->setName("Include");
	m_include_EClass->setAbstract(false);
	m_include_EClass->setInterface(false);
	
	
	m_include_EReference_addition->setName("addition");
	m_include_EReference_addition->setEType(getUseCase_EClass());
	m_include_EReference_addition->setLowerBound(1);
	m_include_EReference_addition->setUpperBound(1);
	m_include_EReference_addition->setTransient(false);
	m_include_EReference_addition->setVolatile(false);
	m_include_EReference_addition->setChangeable(true);
	m_include_EReference_addition->setUnsettable(false);
	m_include_EReference_addition->setUnique(true);
	m_include_EReference_addition->setDerived(false);
	m_include_EReference_addition->setOrdered(false);
	m_include_EReference_addition->setContainment(false);
	m_include_EReference_addition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_include_EReference_addition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_include_EReference_addition->setEOpposite(otherEnd);
	    }
	}
	m_include_EReference_includingCase->setName("includingCase");
	m_include_EReference_includingCase->setEType(getUseCase_EClass());
	m_include_EReference_includingCase->setLowerBound(1);
	m_include_EReference_includingCase->setUpperBound(1);
	m_include_EReference_includingCase->setTransient(false);
	m_include_EReference_includingCase->setVolatile(false);
	m_include_EReference_includingCase->setChangeable(true);
	m_include_EReference_includingCase->setUnsettable(false);
	m_include_EReference_includingCase->setUnique(true);
	m_include_EReference_includingCase->setDerived(false);
	m_include_EReference_includingCase->setOrdered(false);
	m_include_EReference_includingCase->setContainment(false);
	m_include_EReference_includingCase->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_include_EReference_includingCase->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getUseCase_EReference_include();
		if (otherEnd != nullptr)
	    {
	   		m_include_EReference_includingCase->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeInformationFlowContent()
{
	m_informationFlow_EClass->setName("InformationFlow");
	m_informationFlow_EClass->setAbstract(false);
	m_informationFlow_EClass->setInterface(false);
	
	
	m_informationFlow_EReference_conveyed->setName("conveyed");
	m_informationFlow_EReference_conveyed->setEType(getClassifier_EClass());
	m_informationFlow_EReference_conveyed->setLowerBound(1);
	m_informationFlow_EReference_conveyed->setUpperBound(-1);
	m_informationFlow_EReference_conveyed->setTransient(false);
	m_informationFlow_EReference_conveyed->setVolatile(false);
	m_informationFlow_EReference_conveyed->setChangeable(true);
	m_informationFlow_EReference_conveyed->setUnsettable(false);
	m_informationFlow_EReference_conveyed->setUnique(true);
	m_informationFlow_EReference_conveyed->setDerived(false);
	m_informationFlow_EReference_conveyed->setOrdered(false);
	m_informationFlow_EReference_conveyed->setContainment(false);
	m_informationFlow_EReference_conveyed->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_conveyed->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_conveyed->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_informationSource->setName("informationSource");
	m_informationFlow_EReference_informationSource->setEType(getNamedElement_EClass());
	m_informationFlow_EReference_informationSource->setLowerBound(1);
	m_informationFlow_EReference_informationSource->setUpperBound(-1);
	m_informationFlow_EReference_informationSource->setTransient(false);
	m_informationFlow_EReference_informationSource->setVolatile(false);
	m_informationFlow_EReference_informationSource->setChangeable(true);
	m_informationFlow_EReference_informationSource->setUnsettable(false);
	m_informationFlow_EReference_informationSource->setUnique(true);
	m_informationFlow_EReference_informationSource->setDerived(false);
	m_informationFlow_EReference_informationSource->setOrdered(false);
	m_informationFlow_EReference_informationSource->setContainment(false);
	m_informationFlow_EReference_informationSource->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_informationSource->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_informationSource->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_informationTarget->setName("informationTarget");
	m_informationFlow_EReference_informationTarget->setEType(getNamedElement_EClass());
	m_informationFlow_EReference_informationTarget->setLowerBound(1);
	m_informationFlow_EReference_informationTarget->setUpperBound(-1);
	m_informationFlow_EReference_informationTarget->setTransient(false);
	m_informationFlow_EReference_informationTarget->setVolatile(false);
	m_informationFlow_EReference_informationTarget->setChangeable(true);
	m_informationFlow_EReference_informationTarget->setUnsettable(false);
	m_informationFlow_EReference_informationTarget->setUnique(true);
	m_informationFlow_EReference_informationTarget->setDerived(false);
	m_informationFlow_EReference_informationTarget->setOrdered(false);
	m_informationFlow_EReference_informationTarget->setContainment(false);
	m_informationFlow_EReference_informationTarget->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_informationTarget->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_informationTarget->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_realization->setName("realization");
	m_informationFlow_EReference_realization->setEType(getRelationship_EClass());
	m_informationFlow_EReference_realization->setLowerBound(0);
	m_informationFlow_EReference_realization->setUpperBound(-1);
	m_informationFlow_EReference_realization->setTransient(false);
	m_informationFlow_EReference_realization->setVolatile(false);
	m_informationFlow_EReference_realization->setChangeable(true);
	m_informationFlow_EReference_realization->setUnsettable(false);
	m_informationFlow_EReference_realization->setUnique(true);
	m_informationFlow_EReference_realization->setDerived(false);
	m_informationFlow_EReference_realization->setOrdered(false);
	m_informationFlow_EReference_realization->setContainment(false);
	m_informationFlow_EReference_realization->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_realization->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_realization->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_realizingActivityEdge->setName("realizingActivityEdge");
	m_informationFlow_EReference_realizingActivityEdge->setEType(getActivityEdge_EClass());
	m_informationFlow_EReference_realizingActivityEdge->setLowerBound(0);
	m_informationFlow_EReference_realizingActivityEdge->setUpperBound(-1);
	m_informationFlow_EReference_realizingActivityEdge->setTransient(false);
	m_informationFlow_EReference_realizingActivityEdge->setVolatile(false);
	m_informationFlow_EReference_realizingActivityEdge->setChangeable(true);
	m_informationFlow_EReference_realizingActivityEdge->setUnsettable(false);
	m_informationFlow_EReference_realizingActivityEdge->setUnique(true);
	m_informationFlow_EReference_realizingActivityEdge->setDerived(false);
	m_informationFlow_EReference_realizingActivityEdge->setOrdered(false);
	m_informationFlow_EReference_realizingActivityEdge->setContainment(false);
	m_informationFlow_EReference_realizingActivityEdge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_realizingActivityEdge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_realizingActivityEdge->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_realizingConnector->setName("realizingConnector");
	m_informationFlow_EReference_realizingConnector->setEType(getConnector_EClass());
	m_informationFlow_EReference_realizingConnector->setLowerBound(0);
	m_informationFlow_EReference_realizingConnector->setUpperBound(-1);
	m_informationFlow_EReference_realizingConnector->setTransient(false);
	m_informationFlow_EReference_realizingConnector->setVolatile(false);
	m_informationFlow_EReference_realizingConnector->setChangeable(true);
	m_informationFlow_EReference_realizingConnector->setUnsettable(false);
	m_informationFlow_EReference_realizingConnector->setUnique(true);
	m_informationFlow_EReference_realizingConnector->setDerived(false);
	m_informationFlow_EReference_realizingConnector->setOrdered(false);
	m_informationFlow_EReference_realizingConnector->setContainment(false);
	m_informationFlow_EReference_realizingConnector->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_realizingConnector->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_realizingConnector->setEOpposite(otherEnd);
	    }
	}
	m_informationFlow_EReference_realizingMessage->setName("realizingMessage");
	m_informationFlow_EReference_realizingMessage->setEType(getMessage_EClass());
	m_informationFlow_EReference_realizingMessage->setLowerBound(0);
	m_informationFlow_EReference_realizingMessage->setUpperBound(-1);
	m_informationFlow_EReference_realizingMessage->setTransient(false);
	m_informationFlow_EReference_realizingMessage->setVolatile(false);
	m_informationFlow_EReference_realizingMessage->setChangeable(true);
	m_informationFlow_EReference_realizingMessage->setUnsettable(false);
	m_informationFlow_EReference_realizingMessage->setUnique(true);
	m_informationFlow_EReference_realizingMessage->setDerived(false);
	m_informationFlow_EReference_realizingMessage->setOrdered(false);
	m_informationFlow_EReference_realizingMessage->setContainment(false);
	m_informationFlow_EReference_realizingMessage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationFlow_EReference_realizingMessage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationFlow_EReference_realizingMessage->setEOpposite(otherEnd);
	    }
	}
	
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setName("convey_classifiers");
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setUnique(true);
	m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_convey_classifiers_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setName("must_conform");
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setUnique(true);
	m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_must_conform_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setName("sources_and_targets_kind");
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setUnique(true);
	m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationFlow_EOperation_sources_and_targets_kind_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInformationItemContent()
{
	m_informationItem_EClass->setName("InformationItem");
	m_informationItem_EClass->setAbstract(false);
	m_informationItem_EClass->setInterface(false);
	
	
	m_informationItem_EReference_represented->setName("represented");
	m_informationItem_EReference_represented->setEType(getClassifier_EClass());
	m_informationItem_EReference_represented->setLowerBound(0);
	m_informationItem_EReference_represented->setUpperBound(-1);
	m_informationItem_EReference_represented->setTransient(false);
	m_informationItem_EReference_represented->setVolatile(false);
	m_informationItem_EReference_represented->setChangeable(true);
	m_informationItem_EReference_represented->setUnsettable(false);
	m_informationItem_EReference_represented->setUnique(true);
	m_informationItem_EReference_represented->setDerived(false);
	m_informationItem_EReference_represented->setOrdered(false);
	m_informationItem_EReference_represented->setContainment(false);
	m_informationItem_EReference_represented->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_informationItem_EReference_represented->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_informationItem_EReference_represented->setEOpposite(otherEnd);
	    }
	}
	
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setName("has_no");
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setUnique(true);
	m_informationItem_EOperation_has_no_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_has_no_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_has_no_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setName("not_instantiable");
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setUnique(true);
	m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_not_instantiable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setName("sources_and_targets");
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setLowerBound(0);
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setUpperBound(1);
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setUnique(true);
	m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_informationItem_EOperation_sources_and_targets_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInitialNodeContent()
{
	m_initialNode_EClass->setName("InitialNode");
	m_initialNode_EClass->setAbstract(false);
	m_initialNode_EClass->setInterface(false);
	
	
	
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setName("control_edges");
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setUnique(true);
	m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_initialNode_EOperation_control_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setName("no_incoming_edges");
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUnique(true);
	m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_initialNode_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInputPinContent()
{
	m_inputPin_EClass->setName("InputPin");
	m_inputPin_EClass->setAbstract(false);
	m_inputPin_EClass->setInterface(false);
	
	
	m_inputPin_EReference_callOperationAction->setName("callOperationAction");
	m_inputPin_EReference_callOperationAction->setEType(getCallOperationAction_EClass());
	m_inputPin_EReference_callOperationAction->setLowerBound(0);
	m_inputPin_EReference_callOperationAction->setUpperBound(1);
	m_inputPin_EReference_callOperationAction->setTransient(false);
	m_inputPin_EReference_callOperationAction->setVolatile(false);
	m_inputPin_EReference_callOperationAction->setChangeable(true);
	m_inputPin_EReference_callOperationAction->setUnsettable(false);
	m_inputPin_EReference_callOperationAction->setUnique(true);
	m_inputPin_EReference_callOperationAction->setDerived(false);
	m_inputPin_EReference_callOperationAction->setOrdered(true);
	m_inputPin_EReference_callOperationAction->setContainment(false);
	m_inputPin_EReference_callOperationAction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_inputPin_EReference_callOperationAction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getCallOperationAction_EReference_target();
		if (otherEnd != nullptr)
	    {
	   		m_inputPin_EReference_callOperationAction->setEOpposite(otherEnd);
	    }
	}
	m_inputPin_EReference_invocationAction->setName("invocationAction");
	m_inputPin_EReference_invocationAction->setEType(getInvocationAction_EClass());
	m_inputPin_EReference_invocationAction->setLowerBound(0);
	m_inputPin_EReference_invocationAction->setUpperBound(1);
	m_inputPin_EReference_invocationAction->setTransient(false);
	m_inputPin_EReference_invocationAction->setVolatile(false);
	m_inputPin_EReference_invocationAction->setChangeable(true);
	m_inputPin_EReference_invocationAction->setUnsettable(false);
	m_inputPin_EReference_invocationAction->setUnique(true);
	m_inputPin_EReference_invocationAction->setDerived(false);
	m_inputPin_EReference_invocationAction->setOrdered(true);
	m_inputPin_EReference_invocationAction->setContainment(false);
	m_inputPin_EReference_invocationAction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_inputPin_EReference_invocationAction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInvocationAction_EReference_argument();
		if (otherEnd != nullptr)
	    {
	   		m_inputPin_EReference_invocationAction->setEOpposite(otherEnd);
	    }
	}
	m_inputPin_EReference_structuralFeatureAction->setName("structuralFeatureAction");
	m_inputPin_EReference_structuralFeatureAction->setEType(getStructuralFeatureAction_EClass());
	m_inputPin_EReference_structuralFeatureAction->setLowerBound(0);
	m_inputPin_EReference_structuralFeatureAction->setUpperBound(1);
	m_inputPin_EReference_structuralFeatureAction->setTransient(false);
	m_inputPin_EReference_structuralFeatureAction->setVolatile(false);
	m_inputPin_EReference_structuralFeatureAction->setChangeable(true);
	m_inputPin_EReference_structuralFeatureAction->setUnsettable(false);
	m_inputPin_EReference_structuralFeatureAction->setUnique(true);
	m_inputPin_EReference_structuralFeatureAction->setDerived(false);
	m_inputPin_EReference_structuralFeatureAction->setOrdered(true);
	m_inputPin_EReference_structuralFeatureAction->setContainment(false);
	m_inputPin_EReference_structuralFeatureAction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_inputPin_EReference_structuralFeatureAction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStructuralFeatureAction_EReference_object();
		if (otherEnd != nullptr)
	    {
	   		m_inputPin_EReference_structuralFeatureAction->setEOpposite(otherEnd);
	    }
	}
	
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setName("outgoing_edges_structured_only");
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setLowerBound(0);
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setUpperBound(1);
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setUnique(true);
	m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_inputPin_EOperation_outgoing_edges_structured_only_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInstanceSpecificationContent()
{
	m_instanceSpecification_EClass->setName("InstanceSpecification");
	m_instanceSpecification_EClass->setAbstract(false);
	m_instanceSpecification_EClass->setInterface(false);
	
	
	m_instanceSpecification_EReference_classifier->setName("classifier");
	m_instanceSpecification_EReference_classifier->setEType(getClassifier_EClass());
	m_instanceSpecification_EReference_classifier->setLowerBound(0);
	m_instanceSpecification_EReference_classifier->setUpperBound(-1);
	m_instanceSpecification_EReference_classifier->setTransient(false);
	m_instanceSpecification_EReference_classifier->setVolatile(false);
	m_instanceSpecification_EReference_classifier->setChangeable(true);
	m_instanceSpecification_EReference_classifier->setUnsettable(false);
	m_instanceSpecification_EReference_classifier->setUnique(true);
	m_instanceSpecification_EReference_classifier->setDerived(false);
	m_instanceSpecification_EReference_classifier->setOrdered(false);
	m_instanceSpecification_EReference_classifier->setContainment(false);
	m_instanceSpecification_EReference_classifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_instanceSpecification_EReference_classifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_instanceSpecification_EReference_classifier->setEOpposite(otherEnd);
	    }
	}
	m_instanceSpecification_EReference_slot->setName("slot");
	m_instanceSpecification_EReference_slot->setEType(getSlot_EClass());
	m_instanceSpecification_EReference_slot->setLowerBound(0);
	m_instanceSpecification_EReference_slot->setUpperBound(-1);
	m_instanceSpecification_EReference_slot->setTransient(false);
	m_instanceSpecification_EReference_slot->setVolatile(false);
	m_instanceSpecification_EReference_slot->setChangeable(true);
	m_instanceSpecification_EReference_slot->setUnsettable(false);
	m_instanceSpecification_EReference_slot->setUnique(true);
	m_instanceSpecification_EReference_slot->setDerived(false);
	m_instanceSpecification_EReference_slot->setOrdered(false);
	m_instanceSpecification_EReference_slot->setContainment(true);
	m_instanceSpecification_EReference_slot->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_instanceSpecification_EReference_slot->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getSlot_EReference_owningInstance();
		if (otherEnd != nullptr)
	    {
	   		m_instanceSpecification_EReference_slot->setEOpposite(otherEnd);
	    }
	}
	m_instanceSpecification_EReference_specification->setName("specification");
	m_instanceSpecification_EReference_specification->setEType(getValueSpecification_EClass());
	m_instanceSpecification_EReference_specification->setLowerBound(0);
	m_instanceSpecification_EReference_specification->setUpperBound(1);
	m_instanceSpecification_EReference_specification->setTransient(false);
	m_instanceSpecification_EReference_specification->setVolatile(false);
	m_instanceSpecification_EReference_specification->setChangeable(true);
	m_instanceSpecification_EReference_specification->setUnsettable(false);
	m_instanceSpecification_EReference_specification->setUnique(true);
	m_instanceSpecification_EReference_specification->setDerived(false);
	m_instanceSpecification_EReference_specification->setOrdered(false);
	m_instanceSpecification_EReference_specification->setContainment(true);
	m_instanceSpecification_EReference_specification->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_instanceSpecification_EReference_specification->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_instanceSpecification_EReference_specification->setEOpposite(otherEnd);
	    }
	}
	
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setName("defining_feature");
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setLowerBound(0);
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setUpperBound(1);
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setUnique(true);
	m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_defining_feature_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setName("deployment_artifact");
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setLowerBound(0);
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setUpperBound(1);
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setUnique(true);
	m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_deployment_artifact_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setName("deployment_target");
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setUnique(true);
	m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setName("structural_feature");
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setLowerBound(0);
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setUpperBound(1);
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setUnique(true);
	m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_instanceSpecification_EOperation_structural_feature_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInstanceValueContent()
{
	m_instanceValue_EClass->setName("InstanceValue");
	m_instanceValue_EClass->setAbstract(false);
	m_instanceValue_EClass->setInterface(false);
	
	
	m_instanceValue_EReference_instance->setName("instance");
	m_instanceValue_EReference_instance->setEType(getInstanceSpecification_EClass());
	m_instanceValue_EReference_instance->setLowerBound(1);
	m_instanceValue_EReference_instance->setUpperBound(1);
	m_instanceValue_EReference_instance->setTransient(false);
	m_instanceValue_EReference_instance->setVolatile(false);
	m_instanceValue_EReference_instance->setChangeable(true);
	m_instanceValue_EReference_instance->setUnsettable(false);
	m_instanceValue_EReference_instance->setUnique(true);
	m_instanceValue_EReference_instance->setDerived(false);
	m_instanceValue_EReference_instance->setOrdered(false);
	m_instanceValue_EReference_instance->setContainment(false);
	m_instanceValue_EReference_instance->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_instanceValue_EReference_instance->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_instanceValue_EReference_instance->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeInteractionContent()
{
	m_interaction_EClass->setName("Interaction");
	m_interaction_EClass->setAbstract(false);
	m_interaction_EClass->setInterface(false);
	
	
	m_interaction_EReference_action->setName("action");
	m_interaction_EReference_action->setEType(getAction_EClass());
	m_interaction_EReference_action->setLowerBound(0);
	m_interaction_EReference_action->setUpperBound(-1);
	m_interaction_EReference_action->setTransient(false);
	m_interaction_EReference_action->setVolatile(false);
	m_interaction_EReference_action->setChangeable(true);
	m_interaction_EReference_action->setUnsettable(false);
	m_interaction_EReference_action->setUnique(true);
	m_interaction_EReference_action->setDerived(false);
	m_interaction_EReference_action->setOrdered(false);
	m_interaction_EReference_action->setContainment(true);
	m_interaction_EReference_action->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interaction_EReference_action->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interaction_EReference_action->setEOpposite(otherEnd);
	    }
	}
	m_interaction_EReference_formalGate->setName("formalGate");
	m_interaction_EReference_formalGate->setEType(getGate_EClass());
	m_interaction_EReference_formalGate->setLowerBound(0);
	m_interaction_EReference_formalGate->setUpperBound(-1);
	m_interaction_EReference_formalGate->setTransient(false);
	m_interaction_EReference_formalGate->setVolatile(false);
	m_interaction_EReference_formalGate->setChangeable(true);
	m_interaction_EReference_formalGate->setUnsettable(false);
	m_interaction_EReference_formalGate->setUnique(true);
	m_interaction_EReference_formalGate->setDerived(false);
	m_interaction_EReference_formalGate->setOrdered(false);
	m_interaction_EReference_formalGate->setContainment(true);
	m_interaction_EReference_formalGate->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interaction_EReference_formalGate->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interaction_EReference_formalGate->setEOpposite(otherEnd);
	    }
	}
	m_interaction_EReference_fragment->setName("fragment");
	m_interaction_EReference_fragment->setEType(getInteractionFragment_EClass());
	m_interaction_EReference_fragment->setLowerBound(0);
	m_interaction_EReference_fragment->setUpperBound(-1);
	m_interaction_EReference_fragment->setTransient(false);
	m_interaction_EReference_fragment->setVolatile(false);
	m_interaction_EReference_fragment->setChangeable(true);
	m_interaction_EReference_fragment->setUnsettable(false);
	m_interaction_EReference_fragment->setUnique(true);
	m_interaction_EReference_fragment->setDerived(false);
	m_interaction_EReference_fragment->setOrdered(true);
	m_interaction_EReference_fragment->setContainment(true);
	m_interaction_EReference_fragment->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interaction_EReference_fragment->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteractionFragment_EReference_enclosingInteraction();
		if (otherEnd != nullptr)
	    {
	   		m_interaction_EReference_fragment->setEOpposite(otherEnd);
	    }
	}
	m_interaction_EReference_lifeline->setName("lifeline");
	m_interaction_EReference_lifeline->setEType(getLifeline_EClass());
	m_interaction_EReference_lifeline->setLowerBound(0);
	m_interaction_EReference_lifeline->setUpperBound(-1);
	m_interaction_EReference_lifeline->setTransient(false);
	m_interaction_EReference_lifeline->setVolatile(false);
	m_interaction_EReference_lifeline->setChangeable(true);
	m_interaction_EReference_lifeline->setUnsettable(false);
	m_interaction_EReference_lifeline->setUnique(true);
	m_interaction_EReference_lifeline->setDerived(false);
	m_interaction_EReference_lifeline->setOrdered(false);
	m_interaction_EReference_lifeline->setContainment(true);
	m_interaction_EReference_lifeline->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interaction_EReference_lifeline->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getLifeline_EReference_interaction();
		if (otherEnd != nullptr)
	    {
	   		m_interaction_EReference_lifeline->setEOpposite(otherEnd);
	    }
	}
	m_interaction_EReference_message->setName("message");
	m_interaction_EReference_message->setEType(getMessage_EClass());
	m_interaction_EReference_message->setLowerBound(0);
	m_interaction_EReference_message->setUpperBound(-1);
	m_interaction_EReference_message->setTransient(false);
	m_interaction_EReference_message->setVolatile(false);
	m_interaction_EReference_message->setChangeable(true);
	m_interaction_EReference_message->setUnsettable(false);
	m_interaction_EReference_message->setUnique(true);
	m_interaction_EReference_message->setDerived(false);
	m_interaction_EReference_message->setOrdered(false);
	m_interaction_EReference_message->setContainment(true);
	m_interaction_EReference_message->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interaction_EReference_message->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getMessage_EReference_interaction();
		if (otherEnd != nullptr)
	    {
	   		m_interaction_EReference_message->setEOpposite(otherEnd);
	    }
	}
	
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setName("not_contained");
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setLowerBound(0);
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setUpperBound(1);
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setUnique(true);
	m_interaction_EOperation_not_contained_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interaction_EOperation_not_contained_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interaction_EOperation_not_contained_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInteractionConstraintContent()
{
	m_interactionConstraint_EClass->setName("InteractionConstraint");
	m_interactionConstraint_EClass->setAbstract(false);
	m_interactionConstraint_EClass->setInterface(false);
	
	
	m_interactionConstraint_EReference_maxint->setName("maxint");
	m_interactionConstraint_EReference_maxint->setEType(getValueSpecification_EClass());
	m_interactionConstraint_EReference_maxint->setLowerBound(0);
	m_interactionConstraint_EReference_maxint->setUpperBound(1);
	m_interactionConstraint_EReference_maxint->setTransient(false);
	m_interactionConstraint_EReference_maxint->setVolatile(false);
	m_interactionConstraint_EReference_maxint->setChangeable(true);
	m_interactionConstraint_EReference_maxint->setUnsettable(false);
	m_interactionConstraint_EReference_maxint->setUnique(true);
	m_interactionConstraint_EReference_maxint->setDerived(false);
	m_interactionConstraint_EReference_maxint->setOrdered(false);
	m_interactionConstraint_EReference_maxint->setContainment(true);
	m_interactionConstraint_EReference_maxint->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionConstraint_EReference_maxint->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionConstraint_EReference_maxint->setEOpposite(otherEnd);
	    }
	}
	m_interactionConstraint_EReference_minint->setName("minint");
	m_interactionConstraint_EReference_minint->setEType(getValueSpecification_EClass());
	m_interactionConstraint_EReference_minint->setLowerBound(0);
	m_interactionConstraint_EReference_minint->setUpperBound(1);
	m_interactionConstraint_EReference_minint->setTransient(false);
	m_interactionConstraint_EReference_minint->setVolatile(false);
	m_interactionConstraint_EReference_minint->setChangeable(true);
	m_interactionConstraint_EReference_minint->setUnsettable(false);
	m_interactionConstraint_EReference_minint->setUnique(true);
	m_interactionConstraint_EReference_minint->setDerived(false);
	m_interactionConstraint_EReference_minint->setOrdered(false);
	m_interactionConstraint_EReference_minint->setContainment(true);
	m_interactionConstraint_EReference_minint->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionConstraint_EReference_minint->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionConstraint_EReference_minint->setEOpposite(otherEnd);
	    }
	}
	
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setName("dynamic_variables");
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_dynamic_variables_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setName("global_data");
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_global_data_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setName("maxint_greater_equal_minint");
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_maxint_greater_equal_minint_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setName("maxint_positive");
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_maxint_positive_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setName("minint_maxint");
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_minint_maxint_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setName("minint_non_negative");
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setUnique(true);
	m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionConstraint_EOperation_minint_non_negative_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInteractionFragmentContent()
{
	m_interactionFragment_EClass->setName("InteractionFragment");
	m_interactionFragment_EClass->setAbstract(true);
	m_interactionFragment_EClass->setInterface(false);
	
	
	m_interactionFragment_EReference_covered->setName("covered");
	m_interactionFragment_EReference_covered->setEType(getLifeline_EClass());
	m_interactionFragment_EReference_covered->setLowerBound(0);
	m_interactionFragment_EReference_covered->setUpperBound(-1);
	m_interactionFragment_EReference_covered->setTransient(false);
	m_interactionFragment_EReference_covered->setVolatile(false);
	m_interactionFragment_EReference_covered->setChangeable(true);
	m_interactionFragment_EReference_covered->setUnsettable(false);
	m_interactionFragment_EReference_covered->setUnique(true);
	m_interactionFragment_EReference_covered->setDerived(false);
	m_interactionFragment_EReference_covered->setOrdered(false);
	m_interactionFragment_EReference_covered->setContainment(false);
	m_interactionFragment_EReference_covered->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionFragment_EReference_covered->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getLifeline_EReference_coveredBy();
		if (otherEnd != nullptr)
	    {
	   		m_interactionFragment_EReference_covered->setEOpposite(otherEnd);
	    }
	}
	m_interactionFragment_EReference_enclosingInteraction->setName("enclosingInteraction");
	m_interactionFragment_EReference_enclosingInteraction->setEType(getInteraction_EClass());
	m_interactionFragment_EReference_enclosingInteraction->setLowerBound(0);
	m_interactionFragment_EReference_enclosingInteraction->setUpperBound(1);
	m_interactionFragment_EReference_enclosingInteraction->setTransient(false);
	m_interactionFragment_EReference_enclosingInteraction->setVolatile(false);
	m_interactionFragment_EReference_enclosingInteraction->setChangeable(true);
	m_interactionFragment_EReference_enclosingInteraction->setUnsettable(false);
	m_interactionFragment_EReference_enclosingInteraction->setUnique(true);
	m_interactionFragment_EReference_enclosingInteraction->setDerived(false);
	m_interactionFragment_EReference_enclosingInteraction->setOrdered(false);
	m_interactionFragment_EReference_enclosingInteraction->setContainment(false);
	m_interactionFragment_EReference_enclosingInteraction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionFragment_EReference_enclosingInteraction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteraction_EReference_fragment();
		if (otherEnd != nullptr)
	    {
	   		m_interactionFragment_EReference_enclosingInteraction->setEOpposite(otherEnd);
	    }
	}
	m_interactionFragment_EReference_enclosingOperand->setName("enclosingOperand");
	m_interactionFragment_EReference_enclosingOperand->setEType(getInteractionOperand_EClass());
	m_interactionFragment_EReference_enclosingOperand->setLowerBound(0);
	m_interactionFragment_EReference_enclosingOperand->setUpperBound(1);
	m_interactionFragment_EReference_enclosingOperand->setTransient(false);
	m_interactionFragment_EReference_enclosingOperand->setVolatile(false);
	m_interactionFragment_EReference_enclosingOperand->setChangeable(true);
	m_interactionFragment_EReference_enclosingOperand->setUnsettable(false);
	m_interactionFragment_EReference_enclosingOperand->setUnique(true);
	m_interactionFragment_EReference_enclosingOperand->setDerived(false);
	m_interactionFragment_EReference_enclosingOperand->setOrdered(false);
	m_interactionFragment_EReference_enclosingOperand->setContainment(false);
	m_interactionFragment_EReference_enclosingOperand->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionFragment_EReference_enclosingOperand->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteractionOperand_EReference_fragment();
		if (otherEnd != nullptr)
	    {
	   		m_interactionFragment_EReference_enclosingOperand->setEOpposite(otherEnd);
	    }
	}
	m_interactionFragment_EReference_generalOrdering->setName("generalOrdering");
	m_interactionFragment_EReference_generalOrdering->setEType(getGeneralOrdering_EClass());
	m_interactionFragment_EReference_generalOrdering->setLowerBound(0);
	m_interactionFragment_EReference_generalOrdering->setUpperBound(-1);
	m_interactionFragment_EReference_generalOrdering->setTransient(false);
	m_interactionFragment_EReference_generalOrdering->setVolatile(false);
	m_interactionFragment_EReference_generalOrdering->setChangeable(true);
	m_interactionFragment_EReference_generalOrdering->setUnsettable(false);
	m_interactionFragment_EReference_generalOrdering->setUnique(true);
	m_interactionFragment_EReference_generalOrdering->setDerived(false);
	m_interactionFragment_EReference_generalOrdering->setOrdered(false);
	m_interactionFragment_EReference_generalOrdering->setContainment(true);
	m_interactionFragment_EReference_generalOrdering->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionFragment_EReference_generalOrdering->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionFragment_EReference_generalOrdering->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeInteractionOperandContent()
{
	m_interactionOperand_EClass->setName("InteractionOperand");
	m_interactionOperand_EClass->setAbstract(false);
	m_interactionOperand_EClass->setInterface(false);
	
	
	m_interactionOperand_EReference_fragment->setName("fragment");
	m_interactionOperand_EReference_fragment->setEType(getInteractionFragment_EClass());
	m_interactionOperand_EReference_fragment->setLowerBound(0);
	m_interactionOperand_EReference_fragment->setUpperBound(-1);
	m_interactionOperand_EReference_fragment->setTransient(false);
	m_interactionOperand_EReference_fragment->setVolatile(false);
	m_interactionOperand_EReference_fragment->setChangeable(true);
	m_interactionOperand_EReference_fragment->setUnsettable(false);
	m_interactionOperand_EReference_fragment->setUnique(true);
	m_interactionOperand_EReference_fragment->setDerived(false);
	m_interactionOperand_EReference_fragment->setOrdered(true);
	m_interactionOperand_EReference_fragment->setContainment(true);
	m_interactionOperand_EReference_fragment->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionOperand_EReference_fragment->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteractionFragment_EReference_enclosingOperand();
		if (otherEnd != nullptr)
	    {
	   		m_interactionOperand_EReference_fragment->setEOpposite(otherEnd);
	    }
	}
	m_interactionOperand_EReference_guard->setName("guard");
	m_interactionOperand_EReference_guard->setEType(getInteractionConstraint_EClass());
	m_interactionOperand_EReference_guard->setLowerBound(0);
	m_interactionOperand_EReference_guard->setUpperBound(1);
	m_interactionOperand_EReference_guard->setTransient(false);
	m_interactionOperand_EReference_guard->setVolatile(false);
	m_interactionOperand_EReference_guard->setChangeable(true);
	m_interactionOperand_EReference_guard->setUnsettable(false);
	m_interactionOperand_EReference_guard->setUnique(true);
	m_interactionOperand_EReference_guard->setDerived(false);
	m_interactionOperand_EReference_guard->setOrdered(false);
	m_interactionOperand_EReference_guard->setContainment(true);
	m_interactionOperand_EReference_guard->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionOperand_EReference_guard->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionOperand_EReference_guard->setEOpposite(otherEnd);
	    }
	}
	
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setName("guard_contain_references");
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setUnique(true);
	m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionOperand_EOperation_guard_contain_references_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setName("guard_directly_prior");
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setUnique(true);
	m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionOperand_EOperation_guard_directly_prior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInteractionUseContent()
{
	m_interactionUse_EClass->setName("InteractionUse");
	m_interactionUse_EClass->setAbstract(false);
	m_interactionUse_EClass->setInterface(false);
	
	
	m_interactionUse_EReference_actualGate->setName("actualGate");
	m_interactionUse_EReference_actualGate->setEType(getGate_EClass());
	m_interactionUse_EReference_actualGate->setLowerBound(0);
	m_interactionUse_EReference_actualGate->setUpperBound(-1);
	m_interactionUse_EReference_actualGate->setTransient(false);
	m_interactionUse_EReference_actualGate->setVolatile(false);
	m_interactionUse_EReference_actualGate->setChangeable(true);
	m_interactionUse_EReference_actualGate->setUnsettable(false);
	m_interactionUse_EReference_actualGate->setUnique(true);
	m_interactionUse_EReference_actualGate->setDerived(false);
	m_interactionUse_EReference_actualGate->setOrdered(false);
	m_interactionUse_EReference_actualGate->setContainment(true);
	m_interactionUse_EReference_actualGate->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionUse_EReference_actualGate->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionUse_EReference_actualGate->setEOpposite(otherEnd);
	    }
	}
	m_interactionUse_EReference_argument->setName("argument");
	m_interactionUse_EReference_argument->setEType(getValueSpecification_EClass());
	m_interactionUse_EReference_argument->setLowerBound(0);
	m_interactionUse_EReference_argument->setUpperBound(-1);
	m_interactionUse_EReference_argument->setTransient(false);
	m_interactionUse_EReference_argument->setVolatile(false);
	m_interactionUse_EReference_argument->setChangeable(true);
	m_interactionUse_EReference_argument->setUnsettable(false);
	m_interactionUse_EReference_argument->setUnique(true);
	m_interactionUse_EReference_argument->setDerived(false);
	m_interactionUse_EReference_argument->setOrdered(true);
	m_interactionUse_EReference_argument->setContainment(true);
	m_interactionUse_EReference_argument->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionUse_EReference_argument->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionUse_EReference_argument->setEOpposite(otherEnd);
	    }
	}
	m_interactionUse_EReference_refersTo->setName("refersTo");
	m_interactionUse_EReference_refersTo->setEType(getInteraction_EClass());
	m_interactionUse_EReference_refersTo->setLowerBound(1);
	m_interactionUse_EReference_refersTo->setUpperBound(1);
	m_interactionUse_EReference_refersTo->setTransient(false);
	m_interactionUse_EReference_refersTo->setVolatile(false);
	m_interactionUse_EReference_refersTo->setChangeable(true);
	m_interactionUse_EReference_refersTo->setUnsettable(false);
	m_interactionUse_EReference_refersTo->setUnique(true);
	m_interactionUse_EReference_refersTo->setDerived(false);
	m_interactionUse_EReference_refersTo->setOrdered(false);
	m_interactionUse_EReference_refersTo->setContainment(false);
	m_interactionUse_EReference_refersTo->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionUse_EReference_refersTo->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionUse_EReference_refersTo->setEOpposite(otherEnd);
	    }
	}
	m_interactionUse_EReference_returnValue->setName("returnValue");
	m_interactionUse_EReference_returnValue->setEType(getValueSpecification_EClass());
	m_interactionUse_EReference_returnValue->setLowerBound(0);
	m_interactionUse_EReference_returnValue->setUpperBound(1);
	m_interactionUse_EReference_returnValue->setTransient(false);
	m_interactionUse_EReference_returnValue->setVolatile(false);
	m_interactionUse_EReference_returnValue->setChangeable(true);
	m_interactionUse_EReference_returnValue->setUnsettable(false);
	m_interactionUse_EReference_returnValue->setUnique(true);
	m_interactionUse_EReference_returnValue->setDerived(false);
	m_interactionUse_EReference_returnValue->setOrdered(false);
	m_interactionUse_EReference_returnValue->setContainment(true);
	m_interactionUse_EReference_returnValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionUse_EReference_returnValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionUse_EReference_returnValue->setEOpposite(otherEnd);
	    }
	}
	m_interactionUse_EReference_returnValueRecipient->setName("returnValueRecipient");
	m_interactionUse_EReference_returnValueRecipient->setEType(getProperty_EClass());
	m_interactionUse_EReference_returnValueRecipient->setLowerBound(0);
	m_interactionUse_EReference_returnValueRecipient->setUpperBound(1);
	m_interactionUse_EReference_returnValueRecipient->setTransient(false);
	m_interactionUse_EReference_returnValueRecipient->setVolatile(false);
	m_interactionUse_EReference_returnValueRecipient->setChangeable(true);
	m_interactionUse_EReference_returnValueRecipient->setUnsettable(false);
	m_interactionUse_EReference_returnValueRecipient->setUnique(true);
	m_interactionUse_EReference_returnValueRecipient->setDerived(false);
	m_interactionUse_EReference_returnValueRecipient->setOrdered(false);
	m_interactionUse_EReference_returnValueRecipient->setContainment(false);
	m_interactionUse_EReference_returnValueRecipient->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interactionUse_EReference_returnValueRecipient->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interactionUse_EReference_returnValueRecipient->setEOpposite(otherEnd);
	    }
	}
	
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setName("all_lifelines");
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_all_lifelines_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setName("arguments_are_constants");
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_arguments_are_constants_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setName("arguments_correspond_to_parameters");
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_arguments_correspond_to_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setName("gates_match");
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_gates_match_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setName("returnValueRecipient_coverage");
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_returnValueRecipient_coverage_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setName("returnValue_type_recipient_correspondence");
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setLowerBound(0);
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setUpperBound(1);
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setUnique(true);
	m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interactionUse_EOperation_returnValue_type_recipient_correspondence_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInterfaceContent()
{
	m_interface_EClass->setName("Interface");
	m_interface_EClass->setAbstract(false);
	m_interface_EClass->setInterface(false);
	
	
	m_interface_EReference_nestedClassifier->setName("nestedClassifier");
	m_interface_EReference_nestedClassifier->setEType(getClassifier_EClass());
	m_interface_EReference_nestedClassifier->setLowerBound(0);
	m_interface_EReference_nestedClassifier->setUpperBound(-1);
	m_interface_EReference_nestedClassifier->setTransient(false);
	m_interface_EReference_nestedClassifier->setVolatile(false);
	m_interface_EReference_nestedClassifier->setChangeable(true);
	m_interface_EReference_nestedClassifier->setUnsettable(false);
	m_interface_EReference_nestedClassifier->setUnique(true);
	m_interface_EReference_nestedClassifier->setDerived(false);
	m_interface_EReference_nestedClassifier->setOrdered(true);
	m_interface_EReference_nestedClassifier->setContainment(true);
	m_interface_EReference_nestedClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_nestedClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_nestedClassifier->setEOpposite(otherEnd);
	    }
	}
	m_interface_EReference_ownedAttribute->setName("ownedAttribute");
	m_interface_EReference_ownedAttribute->setEType(getProperty_EClass());
	m_interface_EReference_ownedAttribute->setLowerBound(0);
	m_interface_EReference_ownedAttribute->setUpperBound(-1);
	m_interface_EReference_ownedAttribute->setTransient(false);
	m_interface_EReference_ownedAttribute->setVolatile(false);
	m_interface_EReference_ownedAttribute->setChangeable(true);
	m_interface_EReference_ownedAttribute->setUnsettable(false);
	m_interface_EReference_ownedAttribute->setUnique(true);
	m_interface_EReference_ownedAttribute->setDerived(false);
	m_interface_EReference_ownedAttribute->setOrdered(true);
	m_interface_EReference_ownedAttribute->setContainment(true);
	m_interface_EReference_ownedAttribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_ownedAttribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_interface();
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_ownedAttribute->setEOpposite(otherEnd);
	    }
	}
	m_interface_EReference_ownedOperation->setName("ownedOperation");
	m_interface_EReference_ownedOperation->setEType(getOperation_EClass());
	m_interface_EReference_ownedOperation->setLowerBound(0);
	m_interface_EReference_ownedOperation->setUpperBound(-1);
	m_interface_EReference_ownedOperation->setTransient(false);
	m_interface_EReference_ownedOperation->setVolatile(false);
	m_interface_EReference_ownedOperation->setChangeable(true);
	m_interface_EReference_ownedOperation->setUnsettable(false);
	m_interface_EReference_ownedOperation->setUnique(true);
	m_interface_EReference_ownedOperation->setDerived(false);
	m_interface_EReference_ownedOperation->setOrdered(true);
	m_interface_EReference_ownedOperation->setContainment(true);
	m_interface_EReference_ownedOperation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_ownedOperation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getOperation_EReference_interface();
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_ownedOperation->setEOpposite(otherEnd);
	    }
	}
	m_interface_EReference_ownedReception->setName("ownedReception");
	m_interface_EReference_ownedReception->setEType(getReception_EClass());
	m_interface_EReference_ownedReception->setLowerBound(0);
	m_interface_EReference_ownedReception->setUpperBound(-1);
	m_interface_EReference_ownedReception->setTransient(false);
	m_interface_EReference_ownedReception->setVolatile(false);
	m_interface_EReference_ownedReception->setChangeable(true);
	m_interface_EReference_ownedReception->setUnsettable(false);
	m_interface_EReference_ownedReception->setUnique(true);
	m_interface_EReference_ownedReception->setDerived(false);
	m_interface_EReference_ownedReception->setOrdered(false);
	m_interface_EReference_ownedReception->setContainment(true);
	m_interface_EReference_ownedReception->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_ownedReception->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_ownedReception->setEOpposite(otherEnd);
	    }
	}
	m_interface_EReference_protocol->setName("protocol");
	m_interface_EReference_protocol->setEType(getProtocolStateMachine_EClass());
	m_interface_EReference_protocol->setLowerBound(0);
	m_interface_EReference_protocol->setUpperBound(1);
	m_interface_EReference_protocol->setTransient(false);
	m_interface_EReference_protocol->setVolatile(false);
	m_interface_EReference_protocol->setChangeable(true);
	m_interface_EReference_protocol->setUnsettable(false);
	m_interface_EReference_protocol->setUnique(true);
	m_interface_EReference_protocol->setDerived(false);
	m_interface_EReference_protocol->setOrdered(false);
	m_interface_EReference_protocol->setContainment(true);
	m_interface_EReference_protocol->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_protocol->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_protocol->setEOpposite(otherEnd);
	    }
	}
	m_interface_EReference_redefinedInterface->setName("redefinedInterface");
	m_interface_EReference_redefinedInterface->setEType(getInterface_EClass());
	m_interface_EReference_redefinedInterface->setLowerBound(0);
	m_interface_EReference_redefinedInterface->setUpperBound(-1);
	m_interface_EReference_redefinedInterface->setTransient(false);
	m_interface_EReference_redefinedInterface->setVolatile(false);
	m_interface_EReference_redefinedInterface->setChangeable(true);
	m_interface_EReference_redefinedInterface->setUnsettable(false);
	m_interface_EReference_redefinedInterface->setUnique(true);
	m_interface_EReference_redefinedInterface->setDerived(false);
	m_interface_EReference_redefinedInterface->setOrdered(false);
	m_interface_EReference_redefinedInterface->setContainment(false);
	m_interface_EReference_redefinedInterface->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interface_EReference_redefinedInterface->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interface_EReference_redefinedInterface->setEOpposite(otherEnd);
	    }
	}
	
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setEType(getProperty_EClass());
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setName("createOwnedAttribute");
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setLowerBound(1);
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUpperBound(1);
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUnique(true);
	m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interface_EOperation_createOwnedOperation_String_Type->setEType(getOperation_EClass());
	m_interface_EOperation_createOwnedOperation_String_Type->setName("createOwnedOperation");
	m_interface_EOperation_createOwnedOperation_String_Type->setLowerBound(1);
	m_interface_EOperation_createOwnedOperation_String_Type->setUpperBound(1);
	m_interface_EOperation_createOwnedOperation_String_Type->setUnique(true);
	m_interface_EOperation_createOwnedOperation_String_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedOperation_String_Type);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterNames");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedOperation_String_Type);
		parameter->setName("parameterTypes");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_createOwnedOperation_String_Type);
		parameter->setName("returnType");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setName("visibility");
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setLowerBound(0);
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setUpperBound(1);
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setUnique(true);
	m_interface_EOperation_visibility_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interface_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeInterfaceRealizationContent()
{
	m_interfaceRealization_EClass->setName("InterfaceRealization");
	m_interfaceRealization_EClass->setAbstract(false);
	m_interfaceRealization_EClass->setInterface(false);
	
	
	m_interfaceRealization_EReference_contract->setName("contract");
	m_interfaceRealization_EReference_contract->setEType(getInterface_EClass());
	m_interfaceRealization_EReference_contract->setLowerBound(1);
	m_interfaceRealization_EReference_contract->setUpperBound(1);
	m_interfaceRealization_EReference_contract->setTransient(false);
	m_interfaceRealization_EReference_contract->setVolatile(false);
	m_interfaceRealization_EReference_contract->setChangeable(true);
	m_interfaceRealization_EReference_contract->setUnsettable(false);
	m_interfaceRealization_EReference_contract->setUnique(true);
	m_interfaceRealization_EReference_contract->setDerived(false);
	m_interfaceRealization_EReference_contract->setOrdered(false);
	m_interfaceRealization_EReference_contract->setContainment(false);
	m_interfaceRealization_EReference_contract->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interfaceRealization_EReference_contract->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interfaceRealization_EReference_contract->setEOpposite(otherEnd);
	    }
	}
	m_interfaceRealization_EReference_implementingClassifier->setName("implementingClassifier");
	m_interfaceRealization_EReference_implementingClassifier->setEType(getBehavioredClassifier_EClass());
	m_interfaceRealization_EReference_implementingClassifier->setLowerBound(1);
	m_interfaceRealization_EReference_implementingClassifier->setUpperBound(1);
	m_interfaceRealization_EReference_implementingClassifier->setTransient(false);
	m_interfaceRealization_EReference_implementingClassifier->setVolatile(false);
	m_interfaceRealization_EReference_implementingClassifier->setChangeable(true);
	m_interfaceRealization_EReference_implementingClassifier->setUnsettable(false);
	m_interfaceRealization_EReference_implementingClassifier->setUnique(true);
	m_interfaceRealization_EReference_implementingClassifier->setDerived(false);
	m_interfaceRealization_EReference_implementingClassifier->setOrdered(false);
	m_interfaceRealization_EReference_implementingClassifier->setContainment(false);
	m_interfaceRealization_EReference_implementingClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interfaceRealization_EReference_implementingClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavioredClassifier_EReference_interfaceRealization();
		if (otherEnd != nullptr)
	    {
	   		m_interfaceRealization_EReference_implementingClassifier->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeInterruptibleActivityRegionContent()
{
	m_interruptibleActivityRegion_EClass->setName("InterruptibleActivityRegion");
	m_interruptibleActivityRegion_EClass->setAbstract(false);
	m_interruptibleActivityRegion_EClass->setInterface(false);
	
	
	m_interruptibleActivityRegion_EReference_interruptingEdge->setName("interruptingEdge");
	m_interruptibleActivityRegion_EReference_interruptingEdge->setEType(getActivityEdge_EClass());
	m_interruptibleActivityRegion_EReference_interruptingEdge->setLowerBound(0);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setUpperBound(-1);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setTransient(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setVolatile(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setChangeable(true);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setUnsettable(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setUnique(true);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setDerived(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setOrdered(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setContainment(false);
	m_interruptibleActivityRegion_EReference_interruptingEdge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interruptibleActivityRegion_EReference_interruptingEdge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_interrupts();
		if (otherEnd != nullptr)
	    {
	   		m_interruptibleActivityRegion_EReference_interruptingEdge->setEOpposite(otherEnd);
	    }
	}
	m_interruptibleActivityRegion_EReference_node->setName("node");
	m_interruptibleActivityRegion_EReference_node->setEType(getActivityNode_EClass());
	m_interruptibleActivityRegion_EReference_node->setLowerBound(0);
	m_interruptibleActivityRegion_EReference_node->setUpperBound(-1);
	m_interruptibleActivityRegion_EReference_node->setTransient(false);
	m_interruptibleActivityRegion_EReference_node->setVolatile(false);
	m_interruptibleActivityRegion_EReference_node->setChangeable(true);
	m_interruptibleActivityRegion_EReference_node->setUnsettable(false);
	m_interruptibleActivityRegion_EReference_node->setUnique(true);
	m_interruptibleActivityRegion_EReference_node->setDerived(false);
	m_interruptibleActivityRegion_EReference_node->setOrdered(false);
	m_interruptibleActivityRegion_EReference_node->setContainment(false);
	m_interruptibleActivityRegion_EReference_node->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interruptibleActivityRegion_EReference_node->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_inInterruptibleRegion();
		if (otherEnd != nullptr)
	    {
	   		m_interruptibleActivityRegion_EReference_node->setEOpposite(otherEnd);
	    }
	}
	
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setName("interrupting_edges");
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setUnique(true);
	m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_interruptibleActivityRegion_EOperation_interrupting_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeIntervalContent()
{
	m_interval_EClass->setName("Interval");
	m_interval_EClass->setAbstract(false);
	m_interval_EClass->setInterface(false);
	
	
	m_interval_EReference_max->setName("max");
	m_interval_EReference_max->setEType(getValueSpecification_EClass());
	m_interval_EReference_max->setLowerBound(1);
	m_interval_EReference_max->setUpperBound(1);
	m_interval_EReference_max->setTransient(false);
	m_interval_EReference_max->setVolatile(false);
	m_interval_EReference_max->setChangeable(true);
	m_interval_EReference_max->setUnsettable(false);
	m_interval_EReference_max->setUnique(true);
	m_interval_EReference_max->setDerived(false);
	m_interval_EReference_max->setOrdered(false);
	m_interval_EReference_max->setContainment(false);
	m_interval_EReference_max->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interval_EReference_max->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interval_EReference_max->setEOpposite(otherEnd);
	    }
	}
	m_interval_EReference_min->setName("min");
	m_interval_EReference_min->setEType(getValueSpecification_EClass());
	m_interval_EReference_min->setLowerBound(1);
	m_interval_EReference_min->setUpperBound(1);
	m_interval_EReference_min->setTransient(false);
	m_interval_EReference_min->setVolatile(false);
	m_interval_EReference_min->setChangeable(true);
	m_interval_EReference_min->setUnsettable(false);
	m_interval_EReference_min->setUnique(true);
	m_interval_EReference_min->setDerived(false);
	m_interval_EReference_min->setOrdered(false);
	m_interval_EReference_min->setContainment(false);
	m_interval_EReference_min->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_interval_EReference_min->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_interval_EReference_min->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeIntervalConstraintContent()
{
	m_intervalConstraint_EClass->setName("IntervalConstraint");
	m_intervalConstraint_EClass->setAbstract(false);
	m_intervalConstraint_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeInvocationActionContent()
{
	m_invocationAction_EClass->setName("InvocationAction");
	m_invocationAction_EClass->setAbstract(true);
	m_invocationAction_EClass->setInterface(false);
	
	
	m_invocationAction_EReference_argument->setName("argument");
	m_invocationAction_EReference_argument->setEType(getInputPin_EClass());
	m_invocationAction_EReference_argument->setLowerBound(0);
	m_invocationAction_EReference_argument->setUpperBound(-1);
	m_invocationAction_EReference_argument->setTransient(false);
	m_invocationAction_EReference_argument->setVolatile(false);
	m_invocationAction_EReference_argument->setChangeable(true);
	m_invocationAction_EReference_argument->setUnsettable(false);
	m_invocationAction_EReference_argument->setUnique(true);
	m_invocationAction_EReference_argument->setDerived(false);
	m_invocationAction_EReference_argument->setOrdered(true);
	m_invocationAction_EReference_argument->setContainment(true);
	m_invocationAction_EReference_argument->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_invocationAction_EReference_argument->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInputPin_EReference_invocationAction();
		if (otherEnd != nullptr)
	    {
	   		m_invocationAction_EReference_argument->setEOpposite(otherEnd);
	    }
	}
	m_invocationAction_EReference_onPort->setName("onPort");
	m_invocationAction_EReference_onPort->setEType(getPort_EClass());
	m_invocationAction_EReference_onPort->setLowerBound(0);
	m_invocationAction_EReference_onPort->setUpperBound(1);
	m_invocationAction_EReference_onPort->setTransient(false);
	m_invocationAction_EReference_onPort->setVolatile(false);
	m_invocationAction_EReference_onPort->setChangeable(true);
	m_invocationAction_EReference_onPort->setUnsettable(false);
	m_invocationAction_EReference_onPort->setUnique(true);
	m_invocationAction_EReference_onPort->setDerived(false);
	m_invocationAction_EReference_onPort->setOrdered(false);
	m_invocationAction_EReference_onPort->setContainment(false);
	m_invocationAction_EReference_onPort->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_invocationAction_EReference_onPort->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_invocationAction_EReference_onPort->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeJoinNodeContent()
{
	m_joinNode_EClass->setName("JoinNode");
	m_joinNode_EClass->setAbstract(false);
	m_joinNode_EClass->setInterface(false);
	
	m_joinNode_EAttribute_isCombineDuplicate = getJoinNode_EAttribute_isCombineDuplicate();
	m_joinNode_EAttribute_isCombineDuplicate->setName("isCombineDuplicate");
	m_joinNode_EAttribute_isCombineDuplicate->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_joinNode_EAttribute_isCombineDuplicate->setLowerBound(1);
	m_joinNode_EAttribute_isCombineDuplicate->setUpperBound(1);
	m_joinNode_EAttribute_isCombineDuplicate->setTransient(false);
	m_joinNode_EAttribute_isCombineDuplicate->setVolatile(false);
	m_joinNode_EAttribute_isCombineDuplicate->setChangeable(true);
	m_joinNode_EAttribute_isCombineDuplicate->setUnsettable(false);
	m_joinNode_EAttribute_isCombineDuplicate->setUnique(true);
	m_joinNode_EAttribute_isCombineDuplicate->setDerived(false);
	m_joinNode_EAttribute_isCombineDuplicate->setOrdered(false);
	m_joinNode_EAttribute_isCombineDuplicate->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_joinNode_EAttribute_isCombineDuplicate->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_joinNode_EReference_joinSpec->setName("joinSpec");
	m_joinNode_EReference_joinSpec->setEType(getValueSpecification_EClass());
	m_joinNode_EReference_joinSpec->setLowerBound(0);
	m_joinNode_EReference_joinSpec->setUpperBound(1);
	m_joinNode_EReference_joinSpec->setTransient(false);
	m_joinNode_EReference_joinSpec->setVolatile(false);
	m_joinNode_EReference_joinSpec->setChangeable(true);
	m_joinNode_EReference_joinSpec->setUnsettable(false);
	m_joinNode_EReference_joinSpec->setUnique(true);
	m_joinNode_EReference_joinSpec->setDerived(false);
	m_joinNode_EReference_joinSpec->setOrdered(false);
	m_joinNode_EReference_joinSpec->setContainment(true);
	m_joinNode_EReference_joinSpec->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_joinNode_EReference_joinSpec->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_joinNode_EReference_joinSpec->setEOpposite(otherEnd);
	    }
	}
	
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setName("incoming_object_flow");
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setLowerBound(0);
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setUpperBound(1);
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setUnique(true);
	m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_joinNode_EOperation_incoming_object_flow_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setName("one_outgoing_edge");
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setLowerBound(0);
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setUpperBound(1);
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setUnique(true);
	m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_joinNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLifelineContent()
{
	m_lifeline_EClass->setName("Lifeline");
	m_lifeline_EClass->setAbstract(false);
	m_lifeline_EClass->setInterface(false);
	
	
	m_lifeline_EReference_coveredBy->setName("coveredBy");
	m_lifeline_EReference_coveredBy->setEType(getInteractionFragment_EClass());
	m_lifeline_EReference_coveredBy->setLowerBound(0);
	m_lifeline_EReference_coveredBy->setUpperBound(-1);
	m_lifeline_EReference_coveredBy->setTransient(false);
	m_lifeline_EReference_coveredBy->setVolatile(false);
	m_lifeline_EReference_coveredBy->setChangeable(true);
	m_lifeline_EReference_coveredBy->setUnsettable(false);
	m_lifeline_EReference_coveredBy->setUnique(true);
	m_lifeline_EReference_coveredBy->setDerived(false);
	m_lifeline_EReference_coveredBy->setOrdered(false);
	m_lifeline_EReference_coveredBy->setContainment(false);
	m_lifeline_EReference_coveredBy->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_lifeline_EReference_coveredBy->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteractionFragment_EReference_covered();
		if (otherEnd != nullptr)
	    {
	   		m_lifeline_EReference_coveredBy->setEOpposite(otherEnd);
	    }
	}
	m_lifeline_EReference_decomposedAs->setName("decomposedAs");
	m_lifeline_EReference_decomposedAs->setEType(getPartDecomposition_EClass());
	m_lifeline_EReference_decomposedAs->setLowerBound(0);
	m_lifeline_EReference_decomposedAs->setUpperBound(1);
	m_lifeline_EReference_decomposedAs->setTransient(false);
	m_lifeline_EReference_decomposedAs->setVolatile(false);
	m_lifeline_EReference_decomposedAs->setChangeable(true);
	m_lifeline_EReference_decomposedAs->setUnsettable(false);
	m_lifeline_EReference_decomposedAs->setUnique(true);
	m_lifeline_EReference_decomposedAs->setDerived(false);
	m_lifeline_EReference_decomposedAs->setOrdered(false);
	m_lifeline_EReference_decomposedAs->setContainment(false);
	m_lifeline_EReference_decomposedAs->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_lifeline_EReference_decomposedAs->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_lifeline_EReference_decomposedAs->setEOpposite(otherEnd);
	    }
	}
	m_lifeline_EReference_interaction->setName("interaction");
	m_lifeline_EReference_interaction->setEType(getInteraction_EClass());
	m_lifeline_EReference_interaction->setLowerBound(1);
	m_lifeline_EReference_interaction->setUpperBound(1);
	m_lifeline_EReference_interaction->setTransient(false);
	m_lifeline_EReference_interaction->setVolatile(false);
	m_lifeline_EReference_interaction->setChangeable(true);
	m_lifeline_EReference_interaction->setUnsettable(false);
	m_lifeline_EReference_interaction->setUnique(true);
	m_lifeline_EReference_interaction->setDerived(false);
	m_lifeline_EReference_interaction->setOrdered(false);
	m_lifeline_EReference_interaction->setContainment(false);
	m_lifeline_EReference_interaction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_lifeline_EReference_interaction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteraction_EReference_lifeline();
		if (otherEnd != nullptr)
	    {
	   		m_lifeline_EReference_interaction->setEOpposite(otherEnd);
	    }
	}
	m_lifeline_EReference_represents->setName("represents");
	m_lifeline_EReference_represents->setEType(getConnectableElement_EClass());
	m_lifeline_EReference_represents->setLowerBound(0);
	m_lifeline_EReference_represents->setUpperBound(1);
	m_lifeline_EReference_represents->setTransient(false);
	m_lifeline_EReference_represents->setVolatile(false);
	m_lifeline_EReference_represents->setChangeable(true);
	m_lifeline_EReference_represents->setUnsettable(false);
	m_lifeline_EReference_represents->setUnique(true);
	m_lifeline_EReference_represents->setDerived(false);
	m_lifeline_EReference_represents->setOrdered(false);
	m_lifeline_EReference_represents->setContainment(false);
	m_lifeline_EReference_represents->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_lifeline_EReference_represents->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_lifeline_EReference_represents->setEOpposite(otherEnd);
	    }
	}
	m_lifeline_EReference_selector->setName("selector");
	m_lifeline_EReference_selector->setEType(getValueSpecification_EClass());
	m_lifeline_EReference_selector->setLowerBound(0);
	m_lifeline_EReference_selector->setUpperBound(1);
	m_lifeline_EReference_selector->setTransient(false);
	m_lifeline_EReference_selector->setVolatile(false);
	m_lifeline_EReference_selector->setChangeable(true);
	m_lifeline_EReference_selector->setUnsettable(false);
	m_lifeline_EReference_selector->setUnique(true);
	m_lifeline_EReference_selector->setDerived(false);
	m_lifeline_EReference_selector->setOrdered(false);
	m_lifeline_EReference_selector->setContainment(true);
	m_lifeline_EReference_selector->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_lifeline_EReference_selector->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_lifeline_EReference_selector->setEOpposite(otherEnd);
	    }
	}
	
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setName("interaction_uses_share_lifeline");
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setLowerBound(0);
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setUpperBound(1);
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setUnique(true);
	m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_interaction_uses_share_lifeline_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setName("same_classifier");
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_same_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setName("selector_int_or_string");
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setLowerBound(0);
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setUpperBound(1);
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setUnique(true);
	m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_selector_int_or_string_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setName("selector_specified");
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setLowerBound(0);
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setUpperBound(1);
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setUnique(true);
	m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_lifeline_EOperation_selector_specified_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLinkActionContent()
{
	m_linkAction_EClass->setName("LinkAction");
	m_linkAction_EClass->setAbstract(true);
	m_linkAction_EClass->setInterface(false);
	
	
	m_linkAction_EReference_endData->setName("endData");
	m_linkAction_EReference_endData->setEType(getLinkEndData_EClass());
	m_linkAction_EReference_endData->setLowerBound(2);
	m_linkAction_EReference_endData->setUpperBound(-1);
	m_linkAction_EReference_endData->setTransient(false);
	m_linkAction_EReference_endData->setVolatile(false);
	m_linkAction_EReference_endData->setChangeable(true);
	m_linkAction_EReference_endData->setUnsettable(false);
	m_linkAction_EReference_endData->setUnique(true);
	m_linkAction_EReference_endData->setDerived(false);
	m_linkAction_EReference_endData->setOrdered(false);
	m_linkAction_EReference_endData->setContainment(true);
	m_linkAction_EReference_endData->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkAction_EReference_endData->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkAction_EReference_endData->setEOpposite(otherEnd);
	    }
	}
	m_linkAction_EReference_inputValue->setName("inputValue");
	m_linkAction_EReference_inputValue->setEType(getInputPin_EClass());
	m_linkAction_EReference_inputValue->setLowerBound(1);
	m_linkAction_EReference_inputValue->setUpperBound(-1);
	m_linkAction_EReference_inputValue->setTransient(false);
	m_linkAction_EReference_inputValue->setVolatile(false);
	m_linkAction_EReference_inputValue->setChangeable(true);
	m_linkAction_EReference_inputValue->setUnsettable(false);
	m_linkAction_EReference_inputValue->setUnique(true);
	m_linkAction_EReference_inputValue->setDerived(false);
	m_linkAction_EReference_inputValue->setOrdered(false);
	m_linkAction_EReference_inputValue->setContainment(true);
	m_linkAction_EReference_inputValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkAction_EReference_inputValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkAction_EReference_inputValue->setEOpposite(otherEnd);
	    }
	}
	
	m_linkAction_EOperation_association->setEType(getAssociation_EClass());
	m_linkAction_EOperation_association->setName("association");
	m_linkAction_EOperation_association->setLowerBound(1);
	m_linkAction_EOperation_association->setUpperBound(1);
	m_linkAction_EOperation_association->setUnique(true);
	m_linkAction_EOperation_association->setOrdered(false);
	
	
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setName("not_static");
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setUnique(true);
	m_linkAction_EOperation_not_static_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setName("same_association");
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setUnique(true);
	m_linkAction_EOperation_same_association_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_same_association_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_same_association_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setName("same_pins");
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setUnique(true);
	m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkAction_EOperation_same_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLinkEndCreationDataContent()
{
	m_linkEndCreationData_EClass->setName("LinkEndCreationData");
	m_linkEndCreationData_EClass->setAbstract(false);
	m_linkEndCreationData_EClass->setInterface(false);
	
	m_linkEndCreationData_EAttribute_isReplaceAll = getLinkEndCreationData_EAttribute_isReplaceAll();
	m_linkEndCreationData_EAttribute_isReplaceAll->setName("isReplaceAll");
	m_linkEndCreationData_EAttribute_isReplaceAll->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_linkEndCreationData_EAttribute_isReplaceAll->setLowerBound(1);
	m_linkEndCreationData_EAttribute_isReplaceAll->setUpperBound(1);
	m_linkEndCreationData_EAttribute_isReplaceAll->setTransient(false);
	m_linkEndCreationData_EAttribute_isReplaceAll->setVolatile(false);
	m_linkEndCreationData_EAttribute_isReplaceAll->setChangeable(true);
	m_linkEndCreationData_EAttribute_isReplaceAll->setUnsettable(false);
	m_linkEndCreationData_EAttribute_isReplaceAll->setUnique(true);
	m_linkEndCreationData_EAttribute_isReplaceAll->setDerived(false);
	m_linkEndCreationData_EAttribute_isReplaceAll->setOrdered(false);
	m_linkEndCreationData_EAttribute_isReplaceAll->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_linkEndCreationData_EAttribute_isReplaceAll->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_linkEndCreationData_EReference_insertAt->setName("insertAt");
	m_linkEndCreationData_EReference_insertAt->setEType(getInputPin_EClass());
	m_linkEndCreationData_EReference_insertAt->setLowerBound(0);
	m_linkEndCreationData_EReference_insertAt->setUpperBound(1);
	m_linkEndCreationData_EReference_insertAt->setTransient(false);
	m_linkEndCreationData_EReference_insertAt->setVolatile(false);
	m_linkEndCreationData_EReference_insertAt->setChangeable(true);
	m_linkEndCreationData_EReference_insertAt->setUnsettable(false);
	m_linkEndCreationData_EReference_insertAt->setUnique(true);
	m_linkEndCreationData_EReference_insertAt->setDerived(false);
	m_linkEndCreationData_EReference_insertAt->setOrdered(false);
	m_linkEndCreationData_EReference_insertAt->setContainment(false);
	m_linkEndCreationData_EReference_insertAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkEndCreationData_EReference_insertAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkEndCreationData_EReference_insertAt->setEOpposite(otherEnd);
	    }
	}
	
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setName("insertAt_pin");
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndCreationData_EOperation_insertAt_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLinkEndDataContent()
{
	m_linkEndData_EClass->setName("LinkEndData");
	m_linkEndData_EClass->setAbstract(false);
	m_linkEndData_EClass->setInterface(false);
	
	
	m_linkEndData_EReference_end->setName("end");
	m_linkEndData_EReference_end->setEType(getProperty_EClass());
	m_linkEndData_EReference_end->setLowerBound(1);
	m_linkEndData_EReference_end->setUpperBound(1);
	m_linkEndData_EReference_end->setTransient(false);
	m_linkEndData_EReference_end->setVolatile(false);
	m_linkEndData_EReference_end->setChangeable(true);
	m_linkEndData_EReference_end->setUnsettable(false);
	m_linkEndData_EReference_end->setUnique(true);
	m_linkEndData_EReference_end->setDerived(false);
	m_linkEndData_EReference_end->setOrdered(false);
	m_linkEndData_EReference_end->setContainment(false);
	m_linkEndData_EReference_end->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkEndData_EReference_end->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkEndData_EReference_end->setEOpposite(otherEnd);
	    }
	}
	m_linkEndData_EReference_qualifier->setName("qualifier");
	m_linkEndData_EReference_qualifier->setEType(getQualifierValue_EClass());
	m_linkEndData_EReference_qualifier->setLowerBound(0);
	m_linkEndData_EReference_qualifier->setUpperBound(-1);
	m_linkEndData_EReference_qualifier->setTransient(false);
	m_linkEndData_EReference_qualifier->setVolatile(false);
	m_linkEndData_EReference_qualifier->setChangeable(true);
	m_linkEndData_EReference_qualifier->setUnsettable(false);
	m_linkEndData_EReference_qualifier->setUnique(true);
	m_linkEndData_EReference_qualifier->setDerived(false);
	m_linkEndData_EReference_qualifier->setOrdered(false);
	m_linkEndData_EReference_qualifier->setContainment(true);
	m_linkEndData_EReference_qualifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkEndData_EReference_qualifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkEndData_EReference_qualifier->setEOpposite(otherEnd);
	    }
	}
	m_linkEndData_EReference_value->setName("value");
	m_linkEndData_EReference_value->setEType(getInputPin_EClass());
	m_linkEndData_EReference_value->setLowerBound(0);
	m_linkEndData_EReference_value->setUpperBound(1);
	m_linkEndData_EReference_value->setTransient(false);
	m_linkEndData_EReference_value->setVolatile(false);
	m_linkEndData_EReference_value->setChangeable(true);
	m_linkEndData_EReference_value->setUnsettable(false);
	m_linkEndData_EReference_value->setUnique(true);
	m_linkEndData_EReference_value->setDerived(false);
	m_linkEndData_EReference_value->setOrdered(false);
	m_linkEndData_EReference_value->setContainment(false);
	m_linkEndData_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkEndData_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkEndData_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_linkEndData_EOperation_allPins->setEType(getInputPin_EClass());
	m_linkEndData_EOperation_allPins->setName("allPins");
	m_linkEndData_EOperation_allPins->setLowerBound(0);
	m_linkEndData_EOperation_allPins->setUpperBound(-1);
	m_linkEndData_EOperation_allPins->setUnique(false);
	m_linkEndData_EOperation_allPins->setOrdered(false);
	
	
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setName("end_object_input_pin");
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_end_object_input_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setName("property_is_association_end");
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_property_is_association_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setName("qualifiers");
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_qualifiers_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setName("same_type");
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndData_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLinkEndDestructionDataContent()
{
	m_linkEndDestructionData_EClass->setName("LinkEndDestructionData");
	m_linkEndDestructionData_EClass->setAbstract(false);
	m_linkEndDestructionData_EClass->setInterface(false);
	
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates = getLinkEndDestructionData_EAttribute_isDestroyDuplicates();
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setName("isDestroyDuplicates");
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setLowerBound(1);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setUpperBound(1);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setTransient(false);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setVolatile(false);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setChangeable(true);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setUnsettable(false);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setUnique(true);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setDerived(false);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setOrdered(false);
	m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_linkEndDestructionData_EAttribute_isDestroyDuplicates->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_linkEndDestructionData_EReference_destroyAt->setName("destroyAt");
	m_linkEndDestructionData_EReference_destroyAt->setEType(getInputPin_EClass());
	m_linkEndDestructionData_EReference_destroyAt->setLowerBound(0);
	m_linkEndDestructionData_EReference_destroyAt->setUpperBound(1);
	m_linkEndDestructionData_EReference_destroyAt->setTransient(false);
	m_linkEndDestructionData_EReference_destroyAt->setVolatile(false);
	m_linkEndDestructionData_EReference_destroyAt->setChangeable(true);
	m_linkEndDestructionData_EReference_destroyAt->setUnsettable(false);
	m_linkEndDestructionData_EReference_destroyAt->setUnique(true);
	m_linkEndDestructionData_EReference_destroyAt->setDerived(false);
	m_linkEndDestructionData_EReference_destroyAt->setOrdered(false);
	m_linkEndDestructionData_EReference_destroyAt->setContainment(false);
	m_linkEndDestructionData_EReference_destroyAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_linkEndDestructionData_EReference_destroyAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_linkEndDestructionData_EReference_destroyAt->setEOpposite(otherEnd);
	    }
	}
	
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setName("destroyAt_pin");
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setUnique(true);
	m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_linkEndDestructionData_EOperation_destroyAt_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeLiteralBooleanContent()
{
	m_literalBoolean_EClass->setName("LiteralBoolean");
	m_literalBoolean_EClass->setAbstract(false);
	m_literalBoolean_EClass->setInterface(false);
	
	m_literalBoolean_EAttribute_value = getLiteralBoolean_EAttribute_value();
	m_literalBoolean_EAttribute_value->setName("value");
	m_literalBoolean_EAttribute_value->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_literalBoolean_EAttribute_value->setLowerBound(1);
	m_literalBoolean_EAttribute_value->setUpperBound(1);
	m_literalBoolean_EAttribute_value->setTransient(false);
	m_literalBoolean_EAttribute_value->setVolatile(false);
	m_literalBoolean_EAttribute_value->setChangeable(true);
	m_literalBoolean_EAttribute_value->setUnsettable(false);
	m_literalBoolean_EAttribute_value->setUnique(true);
	m_literalBoolean_EAttribute_value->setDerived(false);
	m_literalBoolean_EAttribute_value->setOrdered(false);
	m_literalBoolean_EAttribute_value->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_literalBoolean_EAttribute_value->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeLiteralIntegerContent()
{
	m_literalInteger_EClass->setName("LiteralInteger");
	m_literalInteger_EClass->setAbstract(false);
	m_literalInteger_EClass->setInterface(false);
	
	m_literalInteger_EAttribute_value = getLiteralInteger_EAttribute_value();
	m_literalInteger_EAttribute_value->setName("value");
	m_literalInteger_EAttribute_value->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_literalInteger_EAttribute_value->setLowerBound(1);
	m_literalInteger_EAttribute_value->setUpperBound(1);
	m_literalInteger_EAttribute_value->setTransient(false);
	m_literalInteger_EAttribute_value->setVolatile(false);
	m_literalInteger_EAttribute_value->setChangeable(true);
	m_literalInteger_EAttribute_value->setUnsettable(false);
	m_literalInteger_EAttribute_value->setUnique(true);
	m_literalInteger_EAttribute_value->setDerived(false);
	m_literalInteger_EAttribute_value->setOrdered(false);
	m_literalInteger_EAttribute_value->setID(false);
	{
		std::string defaultValue = "0";
		if (!defaultValue.empty())
		{
		   m_literalInteger_EAttribute_value->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeLiteralNullContent()
{
	m_literalNull_EClass->setName("LiteralNull");
	m_literalNull_EClass->setAbstract(false);
	m_literalNull_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeLiteralRealContent()
{
	m_literalReal_EClass->setName("LiteralReal");
	m_literalReal_EClass->setAbstract(false);
	m_literalReal_EClass->setInterface(false);
	
	m_literalReal_EAttribute_value = getLiteralReal_EAttribute_value();
	m_literalReal_EAttribute_value->setName("value");
	m_literalReal_EAttribute_value->setEType(types::TypesPackage::eInstance()->getReal_EDataType());
	m_literalReal_EAttribute_value->setLowerBound(1);
	m_literalReal_EAttribute_value->setUpperBound(1);
	m_literalReal_EAttribute_value->setTransient(false);
	m_literalReal_EAttribute_value->setVolatile(false);
	m_literalReal_EAttribute_value->setChangeable(true);
	m_literalReal_EAttribute_value->setUnsettable(false);
	m_literalReal_EAttribute_value->setUnique(true);
	m_literalReal_EAttribute_value->setDerived(false);
	m_literalReal_EAttribute_value->setOrdered(false);
	m_literalReal_EAttribute_value->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_literalReal_EAttribute_value->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeLiteralSpecificationContent()
{
	m_literalSpecification_EClass->setName("LiteralSpecification");
	m_literalSpecification_EClass->setAbstract(true);
	m_literalSpecification_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeLiteralStringContent()
{
	m_literalString_EClass->setName("LiteralString");
	m_literalString_EClass->setAbstract(false);
	m_literalString_EClass->setInterface(false);
	
	m_literalString_EAttribute_value = getLiteralString_EAttribute_value();
	m_literalString_EAttribute_value->setName("value");
	m_literalString_EAttribute_value->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_literalString_EAttribute_value->setLowerBound(0);
	m_literalString_EAttribute_value->setUpperBound(1);
	m_literalString_EAttribute_value->setTransient(false);
	m_literalString_EAttribute_value->setVolatile(false);
	m_literalString_EAttribute_value->setChangeable(true);
	m_literalString_EAttribute_value->setUnsettable(true);
	m_literalString_EAttribute_value->setUnique(true);
	m_literalString_EAttribute_value->setDerived(false);
	m_literalString_EAttribute_value->setOrdered(false);
	m_literalString_EAttribute_value->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_literalString_EAttribute_value->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeLiteralUnlimitedNaturalContent()
{
	m_literalUnlimitedNatural_EClass->setName("LiteralUnlimitedNatural");
	m_literalUnlimitedNatural_EClass->setAbstract(false);
	m_literalUnlimitedNatural_EClass->setInterface(false);
	
	m_literalUnlimitedNatural_EAttribute_value = getLiteralUnlimitedNatural_EAttribute_value();
	m_literalUnlimitedNatural_EAttribute_value->setName("value");
	m_literalUnlimitedNatural_EAttribute_value->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_literalUnlimitedNatural_EAttribute_value->setLowerBound(1);
	m_literalUnlimitedNatural_EAttribute_value->setUpperBound(1);
	m_literalUnlimitedNatural_EAttribute_value->setTransient(false);
	m_literalUnlimitedNatural_EAttribute_value->setVolatile(false);
	m_literalUnlimitedNatural_EAttribute_value->setChangeable(true);
	m_literalUnlimitedNatural_EAttribute_value->setUnsettable(false);
	m_literalUnlimitedNatural_EAttribute_value->setUnique(true);
	m_literalUnlimitedNatural_EAttribute_value->setDerived(false);
	m_literalUnlimitedNatural_EAttribute_value->setOrdered(false);
	m_literalUnlimitedNatural_EAttribute_value->setID(false);
	{
		std::string defaultValue = "0";
		if (!defaultValue.empty())
		{
		   m_literalUnlimitedNatural_EAttribute_value->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeLoopNodeContent()
{
	m_loopNode_EClass->setName("LoopNode");
	m_loopNode_EClass->setAbstract(false);
	m_loopNode_EClass->setInterface(false);
	
	m_loopNode_EAttribute_isTestedFirst = getLoopNode_EAttribute_isTestedFirst();
	m_loopNode_EAttribute_isTestedFirst->setName("isTestedFirst");
	m_loopNode_EAttribute_isTestedFirst->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_loopNode_EAttribute_isTestedFirst->setLowerBound(1);
	m_loopNode_EAttribute_isTestedFirst->setUpperBound(1);
	m_loopNode_EAttribute_isTestedFirst->setTransient(false);
	m_loopNode_EAttribute_isTestedFirst->setVolatile(false);
	m_loopNode_EAttribute_isTestedFirst->setChangeable(true);
	m_loopNode_EAttribute_isTestedFirst->setUnsettable(false);
	m_loopNode_EAttribute_isTestedFirst->setUnique(true);
	m_loopNode_EAttribute_isTestedFirst->setDerived(false);
	m_loopNode_EAttribute_isTestedFirst->setOrdered(false);
	m_loopNode_EAttribute_isTestedFirst->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_loopNode_EAttribute_isTestedFirst->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_loopNode_EReference_bodyOutput->setName("bodyOutput");
	m_loopNode_EReference_bodyOutput->setEType(getOutputPin_EClass());
	m_loopNode_EReference_bodyOutput->setLowerBound(0);
	m_loopNode_EReference_bodyOutput->setUpperBound(-1);
	m_loopNode_EReference_bodyOutput->setTransient(false);
	m_loopNode_EReference_bodyOutput->setVolatile(false);
	m_loopNode_EReference_bodyOutput->setChangeable(true);
	m_loopNode_EReference_bodyOutput->setUnsettable(false);
	m_loopNode_EReference_bodyOutput->setUnique(true);
	m_loopNode_EReference_bodyOutput->setDerived(false);
	m_loopNode_EReference_bodyOutput->setOrdered(true);
	m_loopNode_EReference_bodyOutput->setContainment(false);
	m_loopNode_EReference_bodyOutput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_bodyOutput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_bodyOutput->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_bodyPart->setName("bodyPart");
	m_loopNode_EReference_bodyPart->setEType(getExecutableNode_EClass());
	m_loopNode_EReference_bodyPart->setLowerBound(0);
	m_loopNode_EReference_bodyPart->setUpperBound(-1);
	m_loopNode_EReference_bodyPart->setTransient(false);
	m_loopNode_EReference_bodyPart->setVolatile(false);
	m_loopNode_EReference_bodyPart->setChangeable(true);
	m_loopNode_EReference_bodyPart->setUnsettable(false);
	m_loopNode_EReference_bodyPart->setUnique(true);
	m_loopNode_EReference_bodyPart->setDerived(false);
	m_loopNode_EReference_bodyPart->setOrdered(false);
	m_loopNode_EReference_bodyPart->setContainment(false);
	m_loopNode_EReference_bodyPart->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_bodyPart->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_bodyPart->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_decider->setName("decider");
	m_loopNode_EReference_decider->setEType(getOutputPin_EClass());
	m_loopNode_EReference_decider->setLowerBound(1);
	m_loopNode_EReference_decider->setUpperBound(1);
	m_loopNode_EReference_decider->setTransient(false);
	m_loopNode_EReference_decider->setVolatile(false);
	m_loopNode_EReference_decider->setChangeable(true);
	m_loopNode_EReference_decider->setUnsettable(false);
	m_loopNode_EReference_decider->setUnique(true);
	m_loopNode_EReference_decider->setDerived(false);
	m_loopNode_EReference_decider->setOrdered(false);
	m_loopNode_EReference_decider->setContainment(false);
	m_loopNode_EReference_decider->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_decider->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_decider->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_loopVariable->setName("loopVariable");
	m_loopNode_EReference_loopVariable->setEType(getOutputPin_EClass());
	m_loopNode_EReference_loopVariable->setLowerBound(0);
	m_loopNode_EReference_loopVariable->setUpperBound(-1);
	m_loopNode_EReference_loopVariable->setTransient(false);
	m_loopNode_EReference_loopVariable->setVolatile(false);
	m_loopNode_EReference_loopVariable->setChangeable(true);
	m_loopNode_EReference_loopVariable->setUnsettable(false);
	m_loopNode_EReference_loopVariable->setUnique(true);
	m_loopNode_EReference_loopVariable->setDerived(false);
	m_loopNode_EReference_loopVariable->setOrdered(true);
	m_loopNode_EReference_loopVariable->setContainment(true);
	m_loopNode_EReference_loopVariable->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_loopVariable->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_loopVariable->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_loopVariableInput->setName("loopVariableInput");
	m_loopNode_EReference_loopVariableInput->setEType(getInputPin_EClass());
	m_loopNode_EReference_loopVariableInput->setLowerBound(0);
	m_loopNode_EReference_loopVariableInput->setUpperBound(-1);
	m_loopNode_EReference_loopVariableInput->setTransient(false);
	m_loopNode_EReference_loopVariableInput->setVolatile(false);
	m_loopNode_EReference_loopVariableInput->setChangeable(true);
	m_loopNode_EReference_loopVariableInput->setUnsettable(false);
	m_loopNode_EReference_loopVariableInput->setUnique(true);
	m_loopNode_EReference_loopVariableInput->setDerived(false);
	m_loopNode_EReference_loopVariableInput->setOrdered(true);
	m_loopNode_EReference_loopVariableInput->setContainment(true);
	m_loopNode_EReference_loopVariableInput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_loopVariableInput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_loopVariableInput->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_result->setName("result");
	m_loopNode_EReference_result->setEType(getOutputPin_EClass());
	m_loopNode_EReference_result->setLowerBound(0);
	m_loopNode_EReference_result->setUpperBound(-1);
	m_loopNode_EReference_result->setTransient(false);
	m_loopNode_EReference_result->setVolatile(false);
	m_loopNode_EReference_result->setChangeable(true);
	m_loopNode_EReference_result->setUnsettable(false);
	m_loopNode_EReference_result->setUnique(true);
	m_loopNode_EReference_result->setDerived(false);
	m_loopNode_EReference_result->setOrdered(true);
	m_loopNode_EReference_result->setContainment(true);
	m_loopNode_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_setupPart->setName("setupPart");
	m_loopNode_EReference_setupPart->setEType(getExecutableNode_EClass());
	m_loopNode_EReference_setupPart->setLowerBound(0);
	m_loopNode_EReference_setupPart->setUpperBound(-1);
	m_loopNode_EReference_setupPart->setTransient(false);
	m_loopNode_EReference_setupPart->setVolatile(false);
	m_loopNode_EReference_setupPart->setChangeable(true);
	m_loopNode_EReference_setupPart->setUnsettable(false);
	m_loopNode_EReference_setupPart->setUnique(true);
	m_loopNode_EReference_setupPart->setDerived(false);
	m_loopNode_EReference_setupPart->setOrdered(false);
	m_loopNode_EReference_setupPart->setContainment(false);
	m_loopNode_EReference_setupPart->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_setupPart->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_setupPart->setEOpposite(otherEnd);
	    }
	}
	m_loopNode_EReference_test->setName("test");
	m_loopNode_EReference_test->setEType(getExecutableNode_EClass());
	m_loopNode_EReference_test->setLowerBound(1);
	m_loopNode_EReference_test->setUpperBound(-1);
	m_loopNode_EReference_test->setTransient(false);
	m_loopNode_EReference_test->setVolatile(false);
	m_loopNode_EReference_test->setChangeable(true);
	m_loopNode_EReference_test->setUnsettable(false);
	m_loopNode_EReference_test->setUnique(true);
	m_loopNode_EReference_test->setDerived(false);
	m_loopNode_EReference_test->setOrdered(false);
	m_loopNode_EReference_test->setContainment(false);
	m_loopNode_EReference_test->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_loopNode_EReference_test->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_loopNode_EReference_test->setEOpposite(otherEnd);
	    }
	}
	
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setName("body_output_pins");
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_body_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setName("executable_nodes");
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setName("input_edges");
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_input_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setName("loop_variable_outgoing");
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_loop_variable_outgoing_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setName("matching_loop_variables");
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_loop_variables_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setName("matching_output_pins");
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_output_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setName("matching_result_pins");
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_matching_result_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setName("result_no_incoming");
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_result_no_incoming_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setName("setup_test_and_body");
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setLowerBound(0);
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setUpperBound(1);
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setUnique(true);
	m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_loopNode_EOperation_setup_test_and_body_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeManifestationContent()
{
	m_manifestation_EClass->setName("Manifestation");
	m_manifestation_EClass->setAbstract(false);
	m_manifestation_EClass->setInterface(false);
	
	
	m_manifestation_EReference_utilizedElement->setName("utilizedElement");
	m_manifestation_EReference_utilizedElement->setEType(getPackageableElement_EClass());
	m_manifestation_EReference_utilizedElement->setLowerBound(1);
	m_manifestation_EReference_utilizedElement->setUpperBound(1);
	m_manifestation_EReference_utilizedElement->setTransient(false);
	m_manifestation_EReference_utilizedElement->setVolatile(false);
	m_manifestation_EReference_utilizedElement->setChangeable(true);
	m_manifestation_EReference_utilizedElement->setUnsettable(false);
	m_manifestation_EReference_utilizedElement->setUnique(true);
	m_manifestation_EReference_utilizedElement->setDerived(false);
	m_manifestation_EReference_utilizedElement->setOrdered(false);
	m_manifestation_EReference_utilizedElement->setContainment(false);
	m_manifestation_EReference_utilizedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_manifestation_EReference_utilizedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_manifestation_EReference_utilizedElement->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeMergeNodeContent()
{
	m_mergeNode_EClass->setName("MergeNode");
	m_mergeNode_EClass->setAbstract(false);
	m_mergeNode_EClass->setInterface(false);
	
	
	
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setName("edges");
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setUnique(true);
	m_mergeNode_EOperation_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_mergeNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_mergeNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setName("one_outgoing_edge");
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setLowerBound(0);
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setUpperBound(1);
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setUnique(true);
	m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_mergeNode_EOperation_one_outgoing_edge_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeMessageContent()
{
	m_message_EClass->setName("Message");
	m_message_EClass->setAbstract(false);
	m_message_EClass->setInterface(false);
	
	m_message_EAttribute_messageKind = getMessage_EAttribute_messageKind();
	m_message_EAttribute_messageKind->setName("messageKind");
	m_message_EAttribute_messageKind->setEType(getMessageKind_EEnum());
	m_message_EAttribute_messageKind->setLowerBound(1);
	m_message_EAttribute_messageKind->setUpperBound(1);
	m_message_EAttribute_messageKind->setTransient(true);
	m_message_EAttribute_messageKind->setVolatile(true);
	m_message_EAttribute_messageKind->setChangeable(false);
	m_message_EAttribute_messageKind->setUnsettable(false);
	m_message_EAttribute_messageKind->setUnique(true);
	m_message_EAttribute_messageKind->setDerived(true);
	m_message_EAttribute_messageKind->setOrdered(false);
	m_message_EAttribute_messageKind->setID(false);
	{
		std::string defaultValue = "unknown";
		if (!defaultValue.empty())
		{
		   m_message_EAttribute_messageKind->setDefaultValueLiteral(defaultValue);
		}
	}
	m_message_EAttribute_messageSort = getMessage_EAttribute_messageSort();
	m_message_EAttribute_messageSort->setName("messageSort");
	m_message_EAttribute_messageSort->setEType(getMessageSort_EEnum());
	m_message_EAttribute_messageSort->setLowerBound(1);
	m_message_EAttribute_messageSort->setUpperBound(1);
	m_message_EAttribute_messageSort->setTransient(false);
	m_message_EAttribute_messageSort->setVolatile(false);
	m_message_EAttribute_messageSort->setChangeable(true);
	m_message_EAttribute_messageSort->setUnsettable(false);
	m_message_EAttribute_messageSort->setUnique(true);
	m_message_EAttribute_messageSort->setDerived(false);
	m_message_EAttribute_messageSort->setOrdered(false);
	m_message_EAttribute_messageSort->setID(false);
	{
		std::string defaultValue = "synchCall";
		if (!defaultValue.empty())
		{
		   m_message_EAttribute_messageSort->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_message_EReference_argument->setName("argument");
	m_message_EReference_argument->setEType(getValueSpecification_EClass());
	m_message_EReference_argument->setLowerBound(0);
	m_message_EReference_argument->setUpperBound(-1);
	m_message_EReference_argument->setTransient(false);
	m_message_EReference_argument->setVolatile(false);
	m_message_EReference_argument->setChangeable(true);
	m_message_EReference_argument->setUnsettable(false);
	m_message_EReference_argument->setUnique(true);
	m_message_EReference_argument->setDerived(false);
	m_message_EReference_argument->setOrdered(true);
	m_message_EReference_argument->setContainment(true);
	m_message_EReference_argument->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_argument->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_argument->setEOpposite(otherEnd);
	    }
	}
	m_message_EReference_connector->setName("connector");
	m_message_EReference_connector->setEType(getConnector_EClass());
	m_message_EReference_connector->setLowerBound(0);
	m_message_EReference_connector->setUpperBound(1);
	m_message_EReference_connector->setTransient(false);
	m_message_EReference_connector->setVolatile(false);
	m_message_EReference_connector->setChangeable(true);
	m_message_EReference_connector->setUnsettable(false);
	m_message_EReference_connector->setUnique(true);
	m_message_EReference_connector->setDerived(false);
	m_message_EReference_connector->setOrdered(false);
	m_message_EReference_connector->setContainment(false);
	m_message_EReference_connector->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_connector->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_connector->setEOpposite(otherEnd);
	    }
	}
	m_message_EReference_interaction->setName("interaction");
	m_message_EReference_interaction->setEType(getInteraction_EClass());
	m_message_EReference_interaction->setLowerBound(1);
	m_message_EReference_interaction->setUpperBound(1);
	m_message_EReference_interaction->setTransient(false);
	m_message_EReference_interaction->setVolatile(false);
	m_message_EReference_interaction->setChangeable(true);
	m_message_EReference_interaction->setUnsettable(false);
	m_message_EReference_interaction->setUnique(true);
	m_message_EReference_interaction->setDerived(false);
	m_message_EReference_interaction->setOrdered(false);
	m_message_EReference_interaction->setContainment(false);
	m_message_EReference_interaction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_interaction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInteraction_EReference_message();
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_interaction->setEOpposite(otherEnd);
	    }
	}
	m_message_EReference_receiveEvent->setName("receiveEvent");
	m_message_EReference_receiveEvent->setEType(getMessageEnd_EClass());
	m_message_EReference_receiveEvent->setLowerBound(0);
	m_message_EReference_receiveEvent->setUpperBound(1);
	m_message_EReference_receiveEvent->setTransient(false);
	m_message_EReference_receiveEvent->setVolatile(false);
	m_message_EReference_receiveEvent->setChangeable(true);
	m_message_EReference_receiveEvent->setUnsettable(false);
	m_message_EReference_receiveEvent->setUnique(true);
	m_message_EReference_receiveEvent->setDerived(false);
	m_message_EReference_receiveEvent->setOrdered(false);
	m_message_EReference_receiveEvent->setContainment(false);
	m_message_EReference_receiveEvent->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_receiveEvent->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_receiveEvent->setEOpposite(otherEnd);
	    }
	}
	m_message_EReference_sendEvent->setName("sendEvent");
	m_message_EReference_sendEvent->setEType(getMessageEnd_EClass());
	m_message_EReference_sendEvent->setLowerBound(0);
	m_message_EReference_sendEvent->setUpperBound(1);
	m_message_EReference_sendEvent->setTransient(false);
	m_message_EReference_sendEvent->setVolatile(false);
	m_message_EReference_sendEvent->setChangeable(true);
	m_message_EReference_sendEvent->setUnsettable(false);
	m_message_EReference_sendEvent->setUnique(true);
	m_message_EReference_sendEvent->setDerived(false);
	m_message_EReference_sendEvent->setOrdered(false);
	m_message_EReference_sendEvent->setContainment(false);
	m_message_EReference_sendEvent->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_sendEvent->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_sendEvent->setEOpposite(otherEnd);
	    }
	}
	m_message_EReference_signature->setName("signature");
	m_message_EReference_signature->setEType(getNamedElement_EClass());
	m_message_EReference_signature->setLowerBound(0);
	m_message_EReference_signature->setUpperBound(1);
	m_message_EReference_signature->setTransient(false);
	m_message_EReference_signature->setVolatile(false);
	m_message_EReference_signature->setChangeable(true);
	m_message_EReference_signature->setUnsettable(false);
	m_message_EReference_signature->setUnique(true);
	m_message_EReference_signature->setDerived(false);
	m_message_EReference_signature->setOrdered(false);
	m_message_EReference_signature->setContainment(false);
	m_message_EReference_signature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_message_EReference_signature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_message_EReference_signature->setEOpposite(otherEnd);
	    }
	}
	
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setName("arguments");
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_arguments_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_arguments_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_arguments_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setName("cannot_cross_boundaries");
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_cannot_cross_boundaries_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_getMessageKind->setEType(getMessageKind_EEnum());
	m_message_EOperation_getMessageKind->setName("getMessageKind");
	m_message_EOperation_getMessageKind->setLowerBound(1);
	m_message_EOperation_getMessageKind->setUpperBound(1);
	m_message_EOperation_getMessageKind->setUnique(true);
	m_message_EOperation_getMessageKind->setOrdered(false);
	
	
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setName("occurrence_specifications");
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_occurrence_specifications_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setName("sending_receiving_message_event");
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_sending_receiving_message_event_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setName("signature_is_operation_reply");
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_operation_reply_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setName("signature_is_operation_request");
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_operation_request_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setName("signature_is_signal");
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_is_signal_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setName("signature_refer_to");
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setLowerBound(0);
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setUpperBound(1);
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setUnique(true);
	m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_message_EOperation_signature_refer_to_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeMessageEndContent()
{
	m_messageEnd_EClass->setName("MessageEnd");
	m_messageEnd_EClass->setAbstract(true);
	m_messageEnd_EClass->setInterface(false);
	
	
	m_messageEnd_EReference_message->setName("message");
	m_messageEnd_EReference_message->setEType(getMessage_EClass());
	m_messageEnd_EReference_message->setLowerBound(0);
	m_messageEnd_EReference_message->setUpperBound(1);
	m_messageEnd_EReference_message->setTransient(false);
	m_messageEnd_EReference_message->setVolatile(false);
	m_messageEnd_EReference_message->setChangeable(true);
	m_messageEnd_EReference_message->setUnsettable(false);
	m_messageEnd_EReference_message->setUnique(true);
	m_messageEnd_EReference_message->setDerived(false);
	m_messageEnd_EReference_message->setOrdered(false);
	m_messageEnd_EReference_message->setContainment(false);
	m_messageEnd_EReference_message->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_messageEnd_EReference_message->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_messageEnd_EReference_message->setEOpposite(otherEnd);
	    }
	}
	
	m_messageEnd_EOperation_enclosingFragment->setEType(getInteractionFragment_EClass());
	m_messageEnd_EOperation_enclosingFragment->setName("enclosingFragment");
	m_messageEnd_EOperation_enclosingFragment->setLowerBound(0);
	m_messageEnd_EOperation_enclosingFragment->setUpperBound(-1);
	m_messageEnd_EOperation_enclosingFragment->setUnique(true);
	m_messageEnd_EOperation_enclosingFragment->setOrdered(false);
	
	
	m_messageEnd_EOperation_isReceive->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_messageEnd_EOperation_isReceive->setName("isReceive");
	m_messageEnd_EOperation_isReceive->setLowerBound(1);
	m_messageEnd_EOperation_isReceive->setUpperBound(1);
	m_messageEnd_EOperation_isReceive->setUnique(true);
	m_messageEnd_EOperation_isReceive->setOrdered(false);
	
	
	m_messageEnd_EOperation_isSend->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_messageEnd_EOperation_isSend->setName("isSend");
	m_messageEnd_EOperation_isSend->setLowerBound(1);
	m_messageEnd_EOperation_isSend->setUpperBound(1);
	m_messageEnd_EOperation_isSend->setUnique(true);
	m_messageEnd_EOperation_isSend->setOrdered(false);
	
	
	m_messageEnd_EOperation_oppositeEnd->setEType(getMessageEnd_EClass());
	m_messageEnd_EOperation_oppositeEnd->setName("oppositeEnd");
	m_messageEnd_EOperation_oppositeEnd->setLowerBound(0);
	m_messageEnd_EOperation_oppositeEnd->setUpperBound(-1);
	m_messageEnd_EOperation_oppositeEnd->setUnique(true);
	m_messageEnd_EOperation_oppositeEnd->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeMessageEventContent()
{
	m_messageEvent_EClass->setName("MessageEvent");
	m_messageEvent_EClass->setAbstract(true);
	m_messageEvent_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeMessageOccurrenceSpecificationContent()
{
	m_messageOccurrenceSpecification_EClass->setName("MessageOccurrenceSpecification");
	m_messageOccurrenceSpecification_EClass->setAbstract(false);
	m_messageOccurrenceSpecification_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeModelContent()
{
	m_model_EClass->setName("Model");
	m_model_EClass->setAbstract(false);
	m_model_EClass->setInterface(false);
	
	m_model_EAttribute_viewpoint = getModel_EAttribute_viewpoint();
	m_model_EAttribute_viewpoint->setName("viewpoint");
	m_model_EAttribute_viewpoint->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_model_EAttribute_viewpoint->setLowerBound(0);
	m_model_EAttribute_viewpoint->setUpperBound(1);
	m_model_EAttribute_viewpoint->setTransient(false);
	m_model_EAttribute_viewpoint->setVolatile(false);
	m_model_EAttribute_viewpoint->setChangeable(true);
	m_model_EAttribute_viewpoint->setUnsettable(true);
	m_model_EAttribute_viewpoint->setUnique(true);
	m_model_EAttribute_viewpoint->setDerived(false);
	m_model_EAttribute_viewpoint->setOrdered(false);
	m_model_EAttribute_viewpoint->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_model_EAttribute_viewpoint->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	m_model_EOperation_isMetamodel->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_model_EOperation_isMetamodel->setName("isMetamodel");
	m_model_EOperation_isMetamodel->setLowerBound(1);
	m_model_EOperation_isMetamodel->setUpperBound(1);
	m_model_EOperation_isMetamodel->setUnique(true);
	m_model_EOperation_isMetamodel->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeMultiplicityElementContent()
{
	m_multiplicityElement_EClass->setName("MultiplicityElement");
	m_multiplicityElement_EClass->setAbstract(true);
	m_multiplicityElement_EClass->setInterface(false);
	
	m_multiplicityElement_EAttribute_isOrdered = getMultiplicityElement_EAttribute_isOrdered();
	m_multiplicityElement_EAttribute_isOrdered->setName("isOrdered");
	m_multiplicityElement_EAttribute_isOrdered->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EAttribute_isOrdered->setLowerBound(1);
	m_multiplicityElement_EAttribute_isOrdered->setUpperBound(1);
	m_multiplicityElement_EAttribute_isOrdered->setTransient(false);
	m_multiplicityElement_EAttribute_isOrdered->setVolatile(false);
	m_multiplicityElement_EAttribute_isOrdered->setChangeable(true);
	m_multiplicityElement_EAttribute_isOrdered->setUnsettable(false);
	m_multiplicityElement_EAttribute_isOrdered->setUnique(true);
	m_multiplicityElement_EAttribute_isOrdered->setDerived(false);
	m_multiplicityElement_EAttribute_isOrdered->setOrdered(false);
	m_multiplicityElement_EAttribute_isOrdered->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_multiplicityElement_EAttribute_isOrdered->setDefaultValueLiteral(defaultValue);
		}
	}
	m_multiplicityElement_EAttribute_isUnique = getMultiplicityElement_EAttribute_isUnique();
	m_multiplicityElement_EAttribute_isUnique->setName("isUnique");
	m_multiplicityElement_EAttribute_isUnique->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EAttribute_isUnique->setLowerBound(1);
	m_multiplicityElement_EAttribute_isUnique->setUpperBound(1);
	m_multiplicityElement_EAttribute_isUnique->setTransient(false);
	m_multiplicityElement_EAttribute_isUnique->setVolatile(false);
	m_multiplicityElement_EAttribute_isUnique->setChangeable(true);
	m_multiplicityElement_EAttribute_isUnique->setUnsettable(false);
	m_multiplicityElement_EAttribute_isUnique->setUnique(true);
	m_multiplicityElement_EAttribute_isUnique->setDerived(false);
	m_multiplicityElement_EAttribute_isUnique->setOrdered(false);
	m_multiplicityElement_EAttribute_isUnique->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_multiplicityElement_EAttribute_isUnique->setDefaultValueLiteral(defaultValue);
		}
	}
	m_multiplicityElement_EAttribute_lower = getMultiplicityElement_EAttribute_lower();
	m_multiplicityElement_EAttribute_lower->setName("lower");
	m_multiplicityElement_EAttribute_lower->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_multiplicityElement_EAttribute_lower->setLowerBound(0);
	m_multiplicityElement_EAttribute_lower->setUpperBound(1);
	m_multiplicityElement_EAttribute_lower->setTransient(true);
	m_multiplicityElement_EAttribute_lower->setVolatile(true);
	m_multiplicityElement_EAttribute_lower->setChangeable(true);
	m_multiplicityElement_EAttribute_lower->setUnsettable(false);
	m_multiplicityElement_EAttribute_lower->setUnique(true);
	m_multiplicityElement_EAttribute_lower->setDerived(true);
	m_multiplicityElement_EAttribute_lower->setOrdered(false);
	m_multiplicityElement_EAttribute_lower->setID(false);
	{
		std::string defaultValue = "1";
		if (!defaultValue.empty())
		{
		   m_multiplicityElement_EAttribute_lower->setDefaultValueLiteral(defaultValue);
		}
	}
	m_multiplicityElement_EAttribute_upper = getMultiplicityElement_EAttribute_upper();
	m_multiplicityElement_EAttribute_upper->setName("upper");
	m_multiplicityElement_EAttribute_upper->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_multiplicityElement_EAttribute_upper->setLowerBound(1);
	m_multiplicityElement_EAttribute_upper->setUpperBound(1);
	m_multiplicityElement_EAttribute_upper->setTransient(true);
	m_multiplicityElement_EAttribute_upper->setVolatile(true);
	m_multiplicityElement_EAttribute_upper->setChangeable(true);
	m_multiplicityElement_EAttribute_upper->setUnsettable(false);
	m_multiplicityElement_EAttribute_upper->setUnique(true);
	m_multiplicityElement_EAttribute_upper->setDerived(true);
	m_multiplicityElement_EAttribute_upper->setOrdered(false);
	m_multiplicityElement_EAttribute_upper->setID(false);
	{
		std::string defaultValue = "1";
		if (!defaultValue.empty())
		{
		   m_multiplicityElement_EAttribute_upper->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_multiplicityElement_EReference_lowerValue->setName("lowerValue");
	m_multiplicityElement_EReference_lowerValue->setEType(getValueSpecification_EClass());
	m_multiplicityElement_EReference_lowerValue->setLowerBound(0);
	m_multiplicityElement_EReference_lowerValue->setUpperBound(1);
	m_multiplicityElement_EReference_lowerValue->setTransient(false);
	m_multiplicityElement_EReference_lowerValue->setVolatile(false);
	m_multiplicityElement_EReference_lowerValue->setChangeable(true);
	m_multiplicityElement_EReference_lowerValue->setUnsettable(false);
	m_multiplicityElement_EReference_lowerValue->setUnique(true);
	m_multiplicityElement_EReference_lowerValue->setDerived(false);
	m_multiplicityElement_EReference_lowerValue->setOrdered(false);
	m_multiplicityElement_EReference_lowerValue->setContainment(true);
	m_multiplicityElement_EReference_lowerValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_multiplicityElement_EReference_lowerValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_multiplicityElement_EReference_lowerValue->setEOpposite(otherEnd);
	    }
	}
	m_multiplicityElement_EReference_upperValue->setName("upperValue");
	m_multiplicityElement_EReference_upperValue->setEType(getValueSpecification_EClass());
	m_multiplicityElement_EReference_upperValue->setLowerBound(0);
	m_multiplicityElement_EReference_upperValue->setUpperBound(1);
	m_multiplicityElement_EReference_upperValue->setTransient(false);
	m_multiplicityElement_EReference_upperValue->setVolatile(false);
	m_multiplicityElement_EReference_upperValue->setChangeable(true);
	m_multiplicityElement_EReference_upperValue->setUnsettable(false);
	m_multiplicityElement_EReference_upperValue->setUnique(true);
	m_multiplicityElement_EReference_upperValue->setDerived(false);
	m_multiplicityElement_EReference_upperValue->setOrdered(false);
	m_multiplicityElement_EReference_upperValue->setContainment(true);
	m_multiplicityElement_EReference_upperValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_multiplicityElement_EReference_upperValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_multiplicityElement_EReference_upperValue->setEOpposite(otherEnd);
	    }
	}
	
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setName("compatibleWith");
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setLowerBound(1);
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setUpperBound(1);
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setUnique(true);
	m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_compatibleWith_MultiplicityElement);
		parameter->setName("other");
		parameter->setEType(getMultiplicityElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setName("includesMultiplicity");
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setLowerBound(1);
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setUpperBound(1);
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setUnique(true);
	m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_includesMultiplicity_MultiplicityElement);
		parameter->setName("M");
		parameter->setEType(getMultiplicityElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setName("is");
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setLowerBound(1);
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setUpperBound(1);
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setUnique(true);
	m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural);
		parameter->setName("lowerbound");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_is_Integer_UnlimitedNatural);
		parameter->setName("upperbound");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_isMultivalued->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_multiplicityElement_EOperation_isMultivalued->setName("isMultivalued");
	m_multiplicityElement_EOperation_isMultivalued->setLowerBound(1);
	m_multiplicityElement_EOperation_isMultivalued->setUpperBound(1);
	m_multiplicityElement_EOperation_isMultivalued->setUnique(true);
	m_multiplicityElement_EOperation_isMultivalued->setOrdered(false);
	
	
	m_multiplicityElement_EOperation_lowerBound->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_multiplicityElement_EOperation_lowerBound->setName("lowerBound");
	m_multiplicityElement_EOperation_lowerBound->setLowerBound(0);
	m_multiplicityElement_EOperation_lowerBound->setUpperBound(1);
	m_multiplicityElement_EOperation_lowerBound->setUnique(true);
	m_multiplicityElement_EOperation_lowerBound->setOrdered(false);
	
	
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setName("lower_ge_0");
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_lower_ge_0_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setName("lower_is_integer");
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_lower_is_integer_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_upperBound->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_multiplicityElement_EOperation_upperBound->setName("upperBound");
	m_multiplicityElement_EOperation_upperBound->setLowerBound(1);
	m_multiplicityElement_EOperation_upperBound->setUpperBound(1);
	m_multiplicityElement_EOperation_upperBound->setUnique(true);
	m_multiplicityElement_EOperation_upperBound->setOrdered(false);
	
	
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setName("upper_ge_lower");
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_upper_ge_lower_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setName("upper_is_unlimitedNatural");
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_upper_is_unlimitedNatural_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setName("value_specification_constant");
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_value_specification_constant_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setName("value_specification_no_side_effects");
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setLowerBound(0);
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setUpperBound(1);
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setUnique(true);
	m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_multiplicityElement_EOperation_value_specification_no_side_effects_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeNamedElementContent()
{
	m_namedElement_EClass->setName("NamedElement");
	m_namedElement_EClass->setAbstract(true);
	m_namedElement_EClass->setInterface(false);
	
	m_namedElement_EAttribute_name = getNamedElement_EAttribute_name();
	m_namedElement_EAttribute_name->setName("name");
	m_namedElement_EAttribute_name->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EAttribute_name->setLowerBound(0);
	m_namedElement_EAttribute_name->setUpperBound(1);
	m_namedElement_EAttribute_name->setTransient(false);
	m_namedElement_EAttribute_name->setVolatile(false);
	m_namedElement_EAttribute_name->setChangeable(true);
	m_namedElement_EAttribute_name->setUnsettable(true);
	m_namedElement_EAttribute_name->setUnique(true);
	m_namedElement_EAttribute_name->setDerived(false);
	m_namedElement_EAttribute_name->setOrdered(false);
	m_namedElement_EAttribute_name->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_namedElement_EAttribute_name->setDefaultValueLiteral(defaultValue);
		}
	}
	m_namedElement_EAttribute_qualifiedName = getNamedElement_EAttribute_qualifiedName();
	m_namedElement_EAttribute_qualifiedName->setName("qualifiedName");
	m_namedElement_EAttribute_qualifiedName->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EAttribute_qualifiedName->setLowerBound(0);
	m_namedElement_EAttribute_qualifiedName->setUpperBound(1);
	m_namedElement_EAttribute_qualifiedName->setTransient(true);
	m_namedElement_EAttribute_qualifiedName->setVolatile(true);
	m_namedElement_EAttribute_qualifiedName->setChangeable(false);
	m_namedElement_EAttribute_qualifiedName->setUnsettable(false);
	m_namedElement_EAttribute_qualifiedName->setUnique(true);
	m_namedElement_EAttribute_qualifiedName->setDerived(true);
	m_namedElement_EAttribute_qualifiedName->setOrdered(false);
	m_namedElement_EAttribute_qualifiedName->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_namedElement_EAttribute_qualifiedName->setDefaultValueLiteral(defaultValue);
		}
	}
	m_namedElement_EAttribute_visibility = getNamedElement_EAttribute_visibility();
	m_namedElement_EAttribute_visibility->setName("visibility");
	m_namedElement_EAttribute_visibility->setEType(getVisibilityKind_EEnum());
	m_namedElement_EAttribute_visibility->setLowerBound(0);
	m_namedElement_EAttribute_visibility->setUpperBound(1);
	m_namedElement_EAttribute_visibility->setTransient(false);
	m_namedElement_EAttribute_visibility->setVolatile(false);
	m_namedElement_EAttribute_visibility->setChangeable(true);
	m_namedElement_EAttribute_visibility->setUnsettable(true);
	m_namedElement_EAttribute_visibility->setUnique(true);
	m_namedElement_EAttribute_visibility->setDerived(false);
	m_namedElement_EAttribute_visibility->setOrdered(false);
	m_namedElement_EAttribute_visibility->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_namedElement_EAttribute_visibility->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_namedElement_EReference_clientDependency->setName("clientDependency");
	m_namedElement_EReference_clientDependency->setEType(getDependency_EClass());
	m_namedElement_EReference_clientDependency->setLowerBound(0);
	m_namedElement_EReference_clientDependency->setUpperBound(-1);
	m_namedElement_EReference_clientDependency->setTransient(true);
	m_namedElement_EReference_clientDependency->setVolatile(true);
	m_namedElement_EReference_clientDependency->setChangeable(false);
	m_namedElement_EReference_clientDependency->setUnsettable(false);
	m_namedElement_EReference_clientDependency->setUnique(true);
	m_namedElement_EReference_clientDependency->setDerived(true);
	m_namedElement_EReference_clientDependency->setOrdered(false);
	m_namedElement_EReference_clientDependency->setContainment(false);
	m_namedElement_EReference_clientDependency->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namedElement_EReference_clientDependency->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_namedElement_EReference_clientDependency->setEOpposite(otherEnd);
	    }
	}
	m_namedElement_EReference_nameExpression->setName("nameExpression");
	m_namedElement_EReference_nameExpression->setEType(getStringExpression_EClass());
	m_namedElement_EReference_nameExpression->setLowerBound(0);
	m_namedElement_EReference_nameExpression->setUpperBound(1);
	m_namedElement_EReference_nameExpression->setTransient(false);
	m_namedElement_EReference_nameExpression->setVolatile(false);
	m_namedElement_EReference_nameExpression->setChangeable(true);
	m_namedElement_EReference_nameExpression->setUnsettable(false);
	m_namedElement_EReference_nameExpression->setUnique(true);
	m_namedElement_EReference_nameExpression->setDerived(false);
	m_namedElement_EReference_nameExpression->setOrdered(false);
	m_namedElement_EReference_nameExpression->setContainment(true);
	m_namedElement_EReference_nameExpression->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namedElement_EReference_nameExpression->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_namedElement_EReference_nameExpression->setEOpposite(otherEnd);
	    }
	}
	m_namedElement_EReference_namespace->setName("namespace");
	m_namedElement_EReference_namespace->setEType(getNamespace_EClass());
	m_namedElement_EReference_namespace->setLowerBound(0);
	m_namedElement_EReference_namespace->setUpperBound(1);
	m_namedElement_EReference_namespace->setTransient(true);
	m_namedElement_EReference_namespace->setVolatile(true);
	m_namedElement_EReference_namespace->setChangeable(false);
	m_namedElement_EReference_namespace->setUnsettable(false);
	m_namedElement_EReference_namespace->setUnique(true);
	m_namedElement_EReference_namespace->setDerived(true);
	m_namedElement_EReference_namespace->setOrdered(false);
	m_namedElement_EReference_namespace->setContainment(false);
	m_namedElement_EReference_namespace->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namedElement_EReference_namespace->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getNamespace_EReference_ownedMember();
		if (otherEnd != nullptr)
	    {
	   		m_namedElement_EReference_namespace->setEOpposite(otherEnd);
	    }
	}
	
	m_namedElement_EOperation_allNamespaces->setEType(getNamespace_EClass());
	m_namedElement_EOperation_allNamespaces->setName("allNamespaces");
	m_namedElement_EOperation_allNamespaces->setLowerBound(0);
	m_namedElement_EOperation_allNamespaces->setUpperBound(-1);
	m_namedElement_EOperation_allNamespaces->setUnique(true);
	m_namedElement_EOperation_allNamespaces->setOrdered(true);
	
	
	m_namedElement_EOperation_allOwningPackages->setEType(getPackage_EClass());
	m_namedElement_EOperation_allOwningPackages->setName("allOwningPackages");
	m_namedElement_EOperation_allOwningPackages->setLowerBound(0);
	m_namedElement_EOperation_allOwningPackages->setUpperBound(-1);
	m_namedElement_EOperation_allOwningPackages->setUnique(true);
	m_namedElement_EOperation_allOwningPackages->setOrdered(false);
	
	
	m_namedElement_EOperation_createDependency_NamedElement->setEType(getDependency_EClass());
	m_namedElement_EOperation_createDependency_NamedElement->setName("createDependency");
	m_namedElement_EOperation_createDependency_NamedElement->setLowerBound(1);
	m_namedElement_EOperation_createDependency_NamedElement->setUpperBound(1);
	m_namedElement_EOperation_createDependency_NamedElement->setUnique(true);
	m_namedElement_EOperation_createDependency_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_createDependency_NamedElement);
		parameter->setName("supplier");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_createUsage_NamedElement->setEType(getUsage_EClass());
	m_namedElement_EOperation_createUsage_NamedElement->setName("createUsage");
	m_namedElement_EOperation_createUsage_NamedElement->setLowerBound(1);
	m_namedElement_EOperation_createUsage_NamedElement->setUpperBound(1);
	m_namedElement_EOperation_createUsage_NamedElement->setUnique(true);
	m_namedElement_EOperation_createUsage_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_createUsage_NamedElement);
		parameter->setName("supplier");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_getClientDependencies->setEType(getDependency_EClass());
	m_namedElement_EOperation_getClientDependencies->setName("getClientDependencies");
	m_namedElement_EOperation_getClientDependencies->setLowerBound(0);
	m_namedElement_EOperation_getClientDependencies->setUpperBound(-1);
	m_namedElement_EOperation_getClientDependencies->setUnique(true);
	m_namedElement_EOperation_getClientDependencies->setOrdered(false);
	
	
	m_namedElement_EOperation_getLabel->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EOperation_getLabel->setName("getLabel");
	m_namedElement_EOperation_getLabel->setLowerBound(0);
	m_namedElement_EOperation_getLabel->setUpperBound(1);
	m_namedElement_EOperation_getLabel->setUnique(true);
	m_namedElement_EOperation_getLabel->setOrdered(false);
	
	
	m_namedElement_EOperation_getLabel_Boolean->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EOperation_getLabel_Boolean->setName("getLabel");
	m_namedElement_EOperation_getLabel_Boolean->setLowerBound(0);
	m_namedElement_EOperation_getLabel_Boolean->setUpperBound(1);
	m_namedElement_EOperation_getLabel_Boolean->setUnique(true);
	m_namedElement_EOperation_getLabel_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_getLabel_Boolean);
		parameter->setName("localize");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_getNamespace->setEType(getNamespace_EClass());
	m_namedElement_EOperation_getNamespace->setName("getNamespace");
	m_namedElement_EOperation_getNamespace->setLowerBound(0);
	m_namedElement_EOperation_getNamespace->setUpperBound(1);
	m_namedElement_EOperation_getNamespace->setUnique(true);
	m_namedElement_EOperation_getNamespace->setOrdered(false);
	
	
	m_namedElement_EOperation_getQualifiedName->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EOperation_getQualifiedName->setName("getQualifiedName");
	m_namedElement_EOperation_getQualifiedName->setLowerBound(0);
	m_namedElement_EOperation_getQualifiedName->setUpperBound(1);
	m_namedElement_EOperation_getQualifiedName->setUnique(true);
	m_namedElement_EOperation_getQualifiedName->setOrdered(false);
	
	
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setName("has_no_qualified_name");
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setUnique(true);
	m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_has_no_qualified_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setName("has_qualified_name");
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setUnique(true);
	m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_has_qualified_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setName("isDistinguishableFrom");
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setLowerBound(1);
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setUpperBound(1);
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setUnique(true);
	m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace);
		parameter->setName("n");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_isDistinguishableFrom_NamedElement_Namespace);
		parameter->setName("ns");
		parameter->setEType(getNamespace_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namedElement_EOperation_separator->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namedElement_EOperation_separator->setName("separator");
	m_namedElement_EOperation_separator->setLowerBound(1);
	m_namedElement_EOperation_separator->setUpperBound(1);
	m_namedElement_EOperation_separator->setUnique(true);
	m_namedElement_EOperation_separator->setOrdered(false);
	
	
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setName("visibility_needs_ownership");
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setLowerBound(0);
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setUpperBound(1);
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setUnique(true);
	m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namedElement_EOperation_visibility_needs_ownership_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeNamespaceContent()
{
	m_namespace_EClass->setName("Namespace");
	m_namespace_EClass->setAbstract(true);
	m_namespace_EClass->setInterface(false);
	
	
	m_namespace_EReference_elementImport->setName("elementImport");
	m_namespace_EReference_elementImport->setEType(getElementImport_EClass());
	m_namespace_EReference_elementImport->setLowerBound(0);
	m_namespace_EReference_elementImport->setUpperBound(-1);
	m_namespace_EReference_elementImport->setTransient(false);
	m_namespace_EReference_elementImport->setVolatile(false);
	m_namespace_EReference_elementImport->setChangeable(true);
	m_namespace_EReference_elementImport->setUnsettable(false);
	m_namespace_EReference_elementImport->setUnique(true);
	m_namespace_EReference_elementImport->setDerived(false);
	m_namespace_EReference_elementImport->setOrdered(false);
	m_namespace_EReference_elementImport->setContainment(true);
	m_namespace_EReference_elementImport->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_elementImport->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getElementImport_EReference_importingNamespace();
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_elementImport->setEOpposite(otherEnd);
	    }
	}
	m_namespace_EReference_importedMember->setName("importedMember");
	m_namespace_EReference_importedMember->setEType(getPackageableElement_EClass());
	m_namespace_EReference_importedMember->setLowerBound(0);
	m_namespace_EReference_importedMember->setUpperBound(-1);
	m_namespace_EReference_importedMember->setTransient(true);
	m_namespace_EReference_importedMember->setVolatile(true);
	m_namespace_EReference_importedMember->setChangeable(false);
	m_namespace_EReference_importedMember->setUnsettable(false);
	m_namespace_EReference_importedMember->setUnique(true);
	m_namespace_EReference_importedMember->setDerived(true);
	m_namespace_EReference_importedMember->setOrdered(false);
	m_namespace_EReference_importedMember->setContainment(false);
	m_namespace_EReference_importedMember->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_importedMember->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_importedMember->setEOpposite(otherEnd);
	    }
	}
	m_namespace_EReference_member->setName("member");
	m_namespace_EReference_member->setEType(getNamedElement_EClass());
	m_namespace_EReference_member->setLowerBound(0);
	m_namespace_EReference_member->setUpperBound(-1);
	m_namespace_EReference_member->setTransient(true);
	m_namespace_EReference_member->setVolatile(true);
	m_namespace_EReference_member->setChangeable(false);
	m_namespace_EReference_member->setUnsettable(false);
	m_namespace_EReference_member->setUnique(true);
	m_namespace_EReference_member->setDerived(true);
	m_namespace_EReference_member->setOrdered(false);
	m_namespace_EReference_member->setContainment(false);
	m_namespace_EReference_member->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_member->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_member->setEOpposite(otherEnd);
	    }
	}
	m_namespace_EReference_ownedMember->setName("ownedMember");
	m_namespace_EReference_ownedMember->setEType(getNamedElement_EClass());
	m_namespace_EReference_ownedMember->setLowerBound(0);
	m_namespace_EReference_ownedMember->setUpperBound(-1);
	m_namespace_EReference_ownedMember->setTransient(true);
	m_namespace_EReference_ownedMember->setVolatile(true);
	m_namespace_EReference_ownedMember->setChangeable(false);
	m_namespace_EReference_ownedMember->setUnsettable(false);
	m_namespace_EReference_ownedMember->setUnique(true);
	m_namespace_EReference_ownedMember->setDerived(true);
	m_namespace_EReference_ownedMember->setOrdered(false);
	m_namespace_EReference_ownedMember->setContainment(true);
	m_namespace_EReference_ownedMember->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_ownedMember->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getNamedElement_EReference_namespace();
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_ownedMember->setEOpposite(otherEnd);
	    }
	}
	m_namespace_EReference_ownedRule->setName("ownedRule");
	m_namespace_EReference_ownedRule->setEType(getConstraint_EClass());
	m_namespace_EReference_ownedRule->setLowerBound(0);
	m_namespace_EReference_ownedRule->setUpperBound(-1);
	m_namespace_EReference_ownedRule->setTransient(false);
	m_namespace_EReference_ownedRule->setVolatile(false);
	m_namespace_EReference_ownedRule->setChangeable(true);
	m_namespace_EReference_ownedRule->setUnsettable(false);
	m_namespace_EReference_ownedRule->setUnique(true);
	m_namespace_EReference_ownedRule->setDerived(false);
	m_namespace_EReference_ownedRule->setOrdered(false);
	m_namespace_EReference_ownedRule->setContainment(true);
	m_namespace_EReference_ownedRule->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_ownedRule->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getConstraint_EReference_context();
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_ownedRule->setEOpposite(otherEnd);
	    }
	}
	m_namespace_EReference_packageImport->setName("packageImport");
	m_namespace_EReference_packageImport->setEType(getPackageImport_EClass());
	m_namespace_EReference_packageImport->setLowerBound(0);
	m_namespace_EReference_packageImport->setUpperBound(-1);
	m_namespace_EReference_packageImport->setTransient(false);
	m_namespace_EReference_packageImport->setVolatile(false);
	m_namespace_EReference_packageImport->setChangeable(true);
	m_namespace_EReference_packageImport->setUnsettable(false);
	m_namespace_EReference_packageImport->setUnique(true);
	m_namespace_EReference_packageImport->setDerived(false);
	m_namespace_EReference_packageImport->setOrdered(false);
	m_namespace_EReference_packageImport->setContainment(true);
	m_namespace_EReference_packageImport->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_namespace_EReference_packageImport->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackageImport_EReference_importingNamespace();
		if (otherEnd != nullptr)
	    {
	   		m_namespace_EReference_packageImport->setEOpposite(otherEnd);
	    }
	}
	
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setName("cannot_import_ownedMembers");
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setLowerBound(0);
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setUpperBound(1);
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setUnique(true);
	m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_cannot_import_ownedMembers_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setName("cannot_import_self");
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setLowerBound(0);
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setUpperBound(1);
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setUnique(true);
	m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_cannot_import_self_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setEType(getElementImport_EClass());
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setName("createElementImport");
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setLowerBound(1);
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setUpperBound(1);
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setUnique(true);
	m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind);
		parameter->setName("element");
		parameter->setEType(getPackageableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_createElementImport_PackageableElement_VisibilityKind);
		parameter->setName("visibility");
		parameter->setEType(getVisibilityKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setEType(getPackageImport_EClass());
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setName("createPackageImport");
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setLowerBound(1);
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setUpperBound(1);
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setUnique(true);
	m_namespace_EOperation_createPackageImport_Package_VisibilityKind->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_createPackageImport_Package_VisibilityKind);
		parameter->setName("package_");
		parameter->setEType(getPackage_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_createPackageImport_Package_VisibilityKind);
		parameter->setName("visibility");
		parameter->setEType(getVisibilityKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_excludeCollisions_PackageableElement->setEType(getPackageableElement_EClass());
	m_namespace_EOperation_excludeCollisions_PackageableElement->setName("excludeCollisions");
	m_namespace_EOperation_excludeCollisions_PackageableElement->setLowerBound(0);
	m_namespace_EOperation_excludeCollisions_PackageableElement->setUpperBound(-1);
	m_namespace_EOperation_excludeCollisions_PackageableElement->setUnique(true);
	m_namespace_EOperation_excludeCollisions_PackageableElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_excludeCollisions_PackageableElement);
		parameter->setName("imps");
		parameter->setEType(getPackageableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_getImportedElements->setEType(getPackageableElement_EClass());
	m_namespace_EOperation_getImportedElements->setName("getImportedElements");
	m_namespace_EOperation_getImportedElements->setLowerBound(0);
	m_namespace_EOperation_getImportedElements->setUpperBound(-1);
	m_namespace_EOperation_getImportedElements->setUnique(true);
	m_namespace_EOperation_getImportedElements->setOrdered(false);
	
	
	m_namespace_EOperation_getImportedMembers->setEType(getPackageableElement_EClass());
	m_namespace_EOperation_getImportedMembers->setName("getImportedMembers");
	m_namespace_EOperation_getImportedMembers->setLowerBound(0);
	m_namespace_EOperation_getImportedMembers->setUpperBound(-1);
	m_namespace_EOperation_getImportedMembers->setUnique(true);
	m_namespace_EOperation_getImportedMembers->setOrdered(false);
	
	
	m_namespace_EOperation_getImportedPackages->setEType(getPackage_EClass());
	m_namespace_EOperation_getImportedPackages->setName("getImportedPackages");
	m_namespace_EOperation_getImportedPackages->setLowerBound(0);
	m_namespace_EOperation_getImportedPackages->setUpperBound(-1);
	m_namespace_EOperation_getImportedPackages->setUnique(true);
	m_namespace_EOperation_getImportedPackages->setOrdered(false);
	
	
	m_namespace_EOperation_getNamesOfMember_NamedElement->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_namespace_EOperation_getNamesOfMember_NamedElement->setName("getNamesOfMember");
	m_namespace_EOperation_getNamesOfMember_NamedElement->setLowerBound(0);
	m_namespace_EOperation_getNamesOfMember_NamedElement->setUpperBound(-1);
	m_namespace_EOperation_getNamesOfMember_NamedElement->setUnique(true);
	m_namespace_EOperation_getNamesOfMember_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_getNamesOfMember_NamedElement);
		parameter->setName("element");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_getOwnedMembers->setEType(getNamedElement_EClass());
	m_namespace_EOperation_getOwnedMembers->setName("getOwnedMembers");
	m_namespace_EOperation_getOwnedMembers->setLowerBound(0);
	m_namespace_EOperation_getOwnedMembers->setUpperBound(-1);
	m_namespace_EOperation_getOwnedMembers->setUnique(true);
	m_namespace_EOperation_getOwnedMembers->setOrdered(false);
	
	
	m_namespace_EOperation_importMembers_PackageableElement->setEType(getPackageableElement_EClass());
	m_namespace_EOperation_importMembers_PackageableElement->setName("importMembers");
	m_namespace_EOperation_importMembers_PackageableElement->setLowerBound(0);
	m_namespace_EOperation_importMembers_PackageableElement->setUpperBound(-1);
	m_namespace_EOperation_importMembers_PackageableElement->setUnique(true);
	m_namespace_EOperation_importMembers_PackageableElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_importMembers_PackageableElement);
		parameter->setName("imps");
		parameter->setEType(getPackageableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_namespace_EOperation_membersAreDistinguishable->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_namespace_EOperation_membersAreDistinguishable->setName("membersAreDistinguishable");
	m_namespace_EOperation_membersAreDistinguishable->setLowerBound(1);
	m_namespace_EOperation_membersAreDistinguishable->setUpperBound(1);
	m_namespace_EOperation_membersAreDistinguishable->setUnique(true);
	m_namespace_EOperation_membersAreDistinguishable->setOrdered(false);
	
	
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setName("members_distinguishable");
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setLowerBound(0);
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setUpperBound(1);
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setUnique(true);
	m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_namespace_EOperation_members_distinguishable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeNodeContent()
{
	m_node_EClass->setName("Node");
	m_node_EClass->setAbstract(false);
	m_node_EClass->setInterface(false);
	
	
	m_node_EReference_nestedNode->setName("nestedNode");
	m_node_EReference_nestedNode->setEType(getNode_EClass());
	m_node_EReference_nestedNode->setLowerBound(0);
	m_node_EReference_nestedNode->setUpperBound(-1);
	m_node_EReference_nestedNode->setTransient(false);
	m_node_EReference_nestedNode->setVolatile(false);
	m_node_EReference_nestedNode->setChangeable(true);
	m_node_EReference_nestedNode->setUnsettable(false);
	m_node_EReference_nestedNode->setUnique(true);
	m_node_EReference_nestedNode->setDerived(false);
	m_node_EReference_nestedNode->setOrdered(false);
	m_node_EReference_nestedNode->setContainment(true);
	m_node_EReference_nestedNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_node_EReference_nestedNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_node_EReference_nestedNode->setEOpposite(otherEnd);
	    }
	}
	
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setEType(getCommunicationPath_EClass());
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setName("createCommunicationPath");
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setLowerBound(1);
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setUpperBound(1);
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setUnique(true);
	m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1IsNavigable");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1Aggregation");
		parameter->setEType(getAggregationKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1Name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1Lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1Upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end1Node");
		parameter->setEType(getNode_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end2IsNavigable");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end2Aggregation");
		parameter->setEType(getAggregationKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end2Name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end2Lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_createCommunicationPath_Boolean_UnlimitedNatural);
		parameter->setName("end2Upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_node_EOperation_getCommunicationPaths->setEType(getCommunicationPath_EClass());
	m_node_EOperation_getCommunicationPaths->setName("getCommunicationPaths");
	m_node_EOperation_getCommunicationPaths->setLowerBound(0);
	m_node_EOperation_getCommunicationPaths->setUpperBound(-1);
	m_node_EOperation_getCommunicationPaths->setUnique(true);
	m_node_EOperation_getCommunicationPaths->setOrdered(false);
	
	
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setName("internal_structure");
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setLowerBound(0);
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setUpperBound(1);
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setUnique(true);
	m_node_EOperation_internal_structure_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_internal_structure_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_node_EOperation_internal_structure_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeObjectContent()
{
	m_object_EClass->setName("Object");
	m_object_EClass->setAbstract(false);
	m_object_EClass->setInterface(false);
	
	
	
	m_object_EOperation_get_Property->setEType(ecore::EcorePackage::eInstance()->getEJavaObject_EDataType());
	m_object_EOperation_get_Property->setName("get");
	m_object_EOperation_get_Property->setLowerBound(0);
	m_object_EOperation_get_Property->setUpperBound(1);
	m_object_EOperation_get_Property->setUnique(true);
	m_object_EOperation_get_Property->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_object_EOperation_get_Property);
		parameter->setName("property");
		parameter->setEType(getProperty_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_object_EOperation_set_Property_EJavaObject->setEType(nullptr);
	m_object_EOperation_set_Property_EJavaObject->setName("set");
	m_object_EOperation_set_Property_EJavaObject->setLowerBound(0);
	m_object_EOperation_set_Property_EJavaObject->setUpperBound(1);
	m_object_EOperation_set_Property_EJavaObject->setUnique(true);
	m_object_EOperation_set_Property_EJavaObject->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_object_EOperation_set_Property_EJavaObject);
		parameter->setName("property");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_object_EOperation_set_Property_EJavaObject);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_object_EOperation_unset_Property->setEType(nullptr);
	m_object_EOperation_unset_Property->setName("unset");
	m_object_EOperation_unset_Property->setLowerBound(0);
	m_object_EOperation_unset_Property->setUpperBound(1);
	m_object_EOperation_unset_Property->setUnique(true);
	m_object_EOperation_unset_Property->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_object_EOperation_unset_Property);
		parameter->setName("property");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeObjectFlowContent()
{
	m_objectFlow_EClass->setName("ObjectFlow");
	m_objectFlow_EClass->setAbstract(false);
	m_objectFlow_EClass->setInterface(false);
	
	m_objectFlow_EAttribute_isMulticast = getObjectFlow_EAttribute_isMulticast();
	m_objectFlow_EAttribute_isMulticast->setName("isMulticast");
	m_objectFlow_EAttribute_isMulticast->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_objectFlow_EAttribute_isMulticast->setLowerBound(1);
	m_objectFlow_EAttribute_isMulticast->setUpperBound(1);
	m_objectFlow_EAttribute_isMulticast->setTransient(false);
	m_objectFlow_EAttribute_isMulticast->setVolatile(false);
	m_objectFlow_EAttribute_isMulticast->setChangeable(true);
	m_objectFlow_EAttribute_isMulticast->setUnsettable(false);
	m_objectFlow_EAttribute_isMulticast->setUnique(true);
	m_objectFlow_EAttribute_isMulticast->setDerived(false);
	m_objectFlow_EAttribute_isMulticast->setOrdered(false);
	m_objectFlow_EAttribute_isMulticast->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_objectFlow_EAttribute_isMulticast->setDefaultValueLiteral(defaultValue);
		}
	}
	m_objectFlow_EAttribute_isMultireceive = getObjectFlow_EAttribute_isMultireceive();
	m_objectFlow_EAttribute_isMultireceive->setName("isMultireceive");
	m_objectFlow_EAttribute_isMultireceive->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_objectFlow_EAttribute_isMultireceive->setLowerBound(1);
	m_objectFlow_EAttribute_isMultireceive->setUpperBound(1);
	m_objectFlow_EAttribute_isMultireceive->setTransient(false);
	m_objectFlow_EAttribute_isMultireceive->setVolatile(false);
	m_objectFlow_EAttribute_isMultireceive->setChangeable(true);
	m_objectFlow_EAttribute_isMultireceive->setUnsettable(false);
	m_objectFlow_EAttribute_isMultireceive->setUnique(true);
	m_objectFlow_EAttribute_isMultireceive->setDerived(false);
	m_objectFlow_EAttribute_isMultireceive->setOrdered(false);
	m_objectFlow_EAttribute_isMultireceive->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_objectFlow_EAttribute_isMultireceive->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_objectFlow_EReference_selection->setName("selection");
	m_objectFlow_EReference_selection->setEType(getBehavior_EClass());
	m_objectFlow_EReference_selection->setLowerBound(0);
	m_objectFlow_EReference_selection->setUpperBound(1);
	m_objectFlow_EReference_selection->setTransient(false);
	m_objectFlow_EReference_selection->setVolatile(false);
	m_objectFlow_EReference_selection->setChangeable(true);
	m_objectFlow_EReference_selection->setUnsettable(false);
	m_objectFlow_EReference_selection->setUnique(true);
	m_objectFlow_EReference_selection->setDerived(false);
	m_objectFlow_EReference_selection->setOrdered(false);
	m_objectFlow_EReference_selection->setContainment(false);
	m_objectFlow_EReference_selection->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_objectFlow_EReference_selection->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_objectFlow_EReference_selection->setEOpposite(otherEnd);
	    }
	}
	m_objectFlow_EReference_transformation->setName("transformation");
	m_objectFlow_EReference_transformation->setEType(getBehavior_EClass());
	m_objectFlow_EReference_transformation->setLowerBound(0);
	m_objectFlow_EReference_transformation->setUpperBound(1);
	m_objectFlow_EReference_transformation->setTransient(false);
	m_objectFlow_EReference_transformation->setVolatile(false);
	m_objectFlow_EReference_transformation->setChangeable(true);
	m_objectFlow_EReference_transformation->setUnsettable(false);
	m_objectFlow_EReference_transformation->setUnique(true);
	m_objectFlow_EReference_transformation->setDerived(false);
	m_objectFlow_EReference_transformation->setOrdered(false);
	m_objectFlow_EReference_transformation->setContainment(false);
	m_objectFlow_EReference_transformation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_objectFlow_EReference_transformation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_objectFlow_EReference_transformation->setEOpposite(otherEnd);
	    }
	}
	
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setName("compatible_types");
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_compatible_types_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setName("input_and_output_parameter");
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_input_and_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setName("is_multicast_or_is_multireceive");
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_is_multicast_or_is_multireceive_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setName("no_executable_nodes");
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_no_executable_nodes_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setName("same_upper_bounds");
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_same_upper_bounds_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setName("selection_behavior");
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_selection_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setName("target");
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setName("transformation_behavior");
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectFlow_EOperation_transformation_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeObjectNodeContent()
{
	m_objectNode_EClass->setName("ObjectNode");
	m_objectNode_EClass->setAbstract(true);
	m_objectNode_EClass->setInterface(false);
	
	m_objectNode_EAttribute_isControlType = getObjectNode_EAttribute_isControlType();
	m_objectNode_EAttribute_isControlType->setName("isControlType");
	m_objectNode_EAttribute_isControlType->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_objectNode_EAttribute_isControlType->setLowerBound(1);
	m_objectNode_EAttribute_isControlType->setUpperBound(1);
	m_objectNode_EAttribute_isControlType->setTransient(false);
	m_objectNode_EAttribute_isControlType->setVolatile(false);
	m_objectNode_EAttribute_isControlType->setChangeable(true);
	m_objectNode_EAttribute_isControlType->setUnsettable(false);
	m_objectNode_EAttribute_isControlType->setUnique(true);
	m_objectNode_EAttribute_isControlType->setDerived(false);
	m_objectNode_EAttribute_isControlType->setOrdered(false);
	m_objectNode_EAttribute_isControlType->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_objectNode_EAttribute_isControlType->setDefaultValueLiteral(defaultValue);
		}
	}
	m_objectNode_EAttribute_ordering = getObjectNode_EAttribute_ordering();
	m_objectNode_EAttribute_ordering->setName("ordering");
	m_objectNode_EAttribute_ordering->setEType(getObjectNodeOrderingKind_EEnum());
	m_objectNode_EAttribute_ordering->setLowerBound(1);
	m_objectNode_EAttribute_ordering->setUpperBound(1);
	m_objectNode_EAttribute_ordering->setTransient(false);
	m_objectNode_EAttribute_ordering->setVolatile(false);
	m_objectNode_EAttribute_ordering->setChangeable(true);
	m_objectNode_EAttribute_ordering->setUnsettable(false);
	m_objectNode_EAttribute_ordering->setUnique(true);
	m_objectNode_EAttribute_ordering->setDerived(false);
	m_objectNode_EAttribute_ordering->setOrdered(false);
	m_objectNode_EAttribute_ordering->setID(false);
	{
		std::string defaultValue = "FIFO";
		if (!defaultValue.empty())
		{
		   m_objectNode_EAttribute_ordering->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_objectNode_EReference_inState->setName("inState");
	m_objectNode_EReference_inState->setEType(getState_EClass());
	m_objectNode_EReference_inState->setLowerBound(0);
	m_objectNode_EReference_inState->setUpperBound(-1);
	m_objectNode_EReference_inState->setTransient(false);
	m_objectNode_EReference_inState->setVolatile(false);
	m_objectNode_EReference_inState->setChangeable(true);
	m_objectNode_EReference_inState->setUnsettable(false);
	m_objectNode_EReference_inState->setUnique(true);
	m_objectNode_EReference_inState->setDerived(false);
	m_objectNode_EReference_inState->setOrdered(false);
	m_objectNode_EReference_inState->setContainment(false);
	m_objectNode_EReference_inState->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_objectNode_EReference_inState->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_objectNode_EReference_inState->setEOpposite(otherEnd);
	    }
	}
	m_objectNode_EReference_selection->setName("selection");
	m_objectNode_EReference_selection->setEType(getBehavior_EClass());
	m_objectNode_EReference_selection->setLowerBound(0);
	m_objectNode_EReference_selection->setUpperBound(1);
	m_objectNode_EReference_selection->setTransient(false);
	m_objectNode_EReference_selection->setVolatile(false);
	m_objectNode_EReference_selection->setChangeable(true);
	m_objectNode_EReference_selection->setUnsettable(false);
	m_objectNode_EReference_selection->setUnique(true);
	m_objectNode_EReference_selection->setDerived(false);
	m_objectNode_EReference_selection->setOrdered(false);
	m_objectNode_EReference_selection->setContainment(false);
	m_objectNode_EReference_selection->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_objectNode_EReference_selection->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_objectNode_EReference_selection->setEOpposite(otherEnd);
	    }
	}
	m_objectNode_EReference_upperBound->setName("upperBound");
	m_objectNode_EReference_upperBound->setEType(getValueSpecification_EClass());
	m_objectNode_EReference_upperBound->setLowerBound(0);
	m_objectNode_EReference_upperBound->setUpperBound(1);
	m_objectNode_EReference_upperBound->setTransient(false);
	m_objectNode_EReference_upperBound->setVolatile(false);
	m_objectNode_EReference_upperBound->setChangeable(true);
	m_objectNode_EReference_upperBound->setUnsettable(false);
	m_objectNode_EReference_upperBound->setUnique(true);
	m_objectNode_EReference_upperBound->setDerived(false);
	m_objectNode_EReference_upperBound->setOrdered(false);
	m_objectNode_EReference_upperBound->setContainment(true);
	m_objectNode_EReference_upperBound->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_objectNode_EReference_upperBound->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_objectNode_EReference_upperBound->setEOpposite(otherEnd);
	    }
	}
	
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setName("input_output_parameter");
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_input_output_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setName("object_flow_edges");
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setUnique(true);
	m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_object_flow_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setName("selection_behavior");
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setLowerBound(0);
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setUpperBound(1);
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setUnique(true);
	m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_objectNode_EOperation_selection_behavior_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeObservationContent()
{
	m_observation_EClass->setName("Observation");
	m_observation_EClass->setAbstract(true);
	m_observation_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeOccurrenceSpecificationContent()
{
	m_occurrenceSpecification_EClass->setName("OccurrenceSpecification");
	m_occurrenceSpecification_EClass->setAbstract(false);
	m_occurrenceSpecification_EClass->setInterface(false);
	
	
	m_occurrenceSpecification_EReference_toAfter->setName("toAfter");
	m_occurrenceSpecification_EReference_toAfter->setEType(getGeneralOrdering_EClass());
	m_occurrenceSpecification_EReference_toAfter->setLowerBound(0);
	m_occurrenceSpecification_EReference_toAfter->setUpperBound(-1);
	m_occurrenceSpecification_EReference_toAfter->setTransient(false);
	m_occurrenceSpecification_EReference_toAfter->setVolatile(false);
	m_occurrenceSpecification_EReference_toAfter->setChangeable(true);
	m_occurrenceSpecification_EReference_toAfter->setUnsettable(false);
	m_occurrenceSpecification_EReference_toAfter->setUnique(true);
	m_occurrenceSpecification_EReference_toAfter->setDerived(false);
	m_occurrenceSpecification_EReference_toAfter->setOrdered(false);
	m_occurrenceSpecification_EReference_toAfter->setContainment(false);
	m_occurrenceSpecification_EReference_toAfter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_occurrenceSpecification_EReference_toAfter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralOrdering_EReference_before();
		if (otherEnd != nullptr)
	    {
	   		m_occurrenceSpecification_EReference_toAfter->setEOpposite(otherEnd);
	    }
	}
	m_occurrenceSpecification_EReference_toBefore->setName("toBefore");
	m_occurrenceSpecification_EReference_toBefore->setEType(getGeneralOrdering_EClass());
	m_occurrenceSpecification_EReference_toBefore->setLowerBound(0);
	m_occurrenceSpecification_EReference_toBefore->setUpperBound(-1);
	m_occurrenceSpecification_EReference_toBefore->setTransient(false);
	m_occurrenceSpecification_EReference_toBefore->setVolatile(false);
	m_occurrenceSpecification_EReference_toBefore->setChangeable(true);
	m_occurrenceSpecification_EReference_toBefore->setUnsettable(false);
	m_occurrenceSpecification_EReference_toBefore->setUnique(true);
	m_occurrenceSpecification_EReference_toBefore->setDerived(false);
	m_occurrenceSpecification_EReference_toBefore->setOrdered(false);
	m_occurrenceSpecification_EReference_toBefore->setContainment(false);
	m_occurrenceSpecification_EReference_toBefore->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_occurrenceSpecification_EReference_toBefore->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getGeneralOrdering_EReference_after();
		if (otherEnd != nullptr)
	    {
	   		m_occurrenceSpecification_EReference_toBefore->setEOpposite(otherEnd);
	    }
	}
	
	m_occurrenceSpecification_EOperation_getCovered->setEType(getLifeline_EClass());
	m_occurrenceSpecification_EOperation_getCovered->setName("getCovered");
	m_occurrenceSpecification_EOperation_getCovered->setLowerBound(0);
	m_occurrenceSpecification_EOperation_getCovered->setUpperBound(1);
	m_occurrenceSpecification_EOperation_getCovered->setUnique(true);
	m_occurrenceSpecification_EOperation_getCovered->setOrdered(false);
	
	
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setEType(nullptr);
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setName("setCovered");
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setLowerBound(1);
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setUpperBound(1);
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setUnique(true);
	m_occurrenceSpecification_EOperation_setCovered_Lifeline->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_occurrenceSpecification_EOperation_setCovered_Lifeline);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeOpaqueActionContent()
{
	m_opaqueAction_EClass->setName("OpaqueAction");
	m_opaqueAction_EClass->setAbstract(false);
	m_opaqueAction_EClass->setInterface(false);
	
	m_opaqueAction_EAttribute_body = getOpaqueAction_EAttribute_body();
	m_opaqueAction_EAttribute_body->setName("body");
	m_opaqueAction_EAttribute_body->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueAction_EAttribute_body->setLowerBound(0);
	m_opaqueAction_EAttribute_body->setUpperBound(-1);
	m_opaqueAction_EAttribute_body->setTransient(false);
	m_opaqueAction_EAttribute_body->setVolatile(false);
	m_opaqueAction_EAttribute_body->setChangeable(true);
	m_opaqueAction_EAttribute_body->setUnsettable(true);
	m_opaqueAction_EAttribute_body->setUnique(false);
	m_opaqueAction_EAttribute_body->setDerived(false);
	m_opaqueAction_EAttribute_body->setOrdered(true);
	m_opaqueAction_EAttribute_body->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueAction_EAttribute_body->setDefaultValueLiteral(defaultValue);
		}
	}
	m_opaqueAction_EAttribute_language = getOpaqueAction_EAttribute_language();
	m_opaqueAction_EAttribute_language->setName("language");
	m_opaqueAction_EAttribute_language->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueAction_EAttribute_language->setLowerBound(0);
	m_opaqueAction_EAttribute_language->setUpperBound(-1);
	m_opaqueAction_EAttribute_language->setTransient(false);
	m_opaqueAction_EAttribute_language->setVolatile(false);
	m_opaqueAction_EAttribute_language->setChangeable(true);
	m_opaqueAction_EAttribute_language->setUnsettable(true);
	m_opaqueAction_EAttribute_language->setUnique(true);
	m_opaqueAction_EAttribute_language->setDerived(false);
	m_opaqueAction_EAttribute_language->setOrdered(true);
	m_opaqueAction_EAttribute_language->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueAction_EAttribute_language->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_opaqueAction_EReference_inputValue->setName("inputValue");
	m_opaqueAction_EReference_inputValue->setEType(getInputPin_EClass());
	m_opaqueAction_EReference_inputValue->setLowerBound(0);
	m_opaqueAction_EReference_inputValue->setUpperBound(-1);
	m_opaqueAction_EReference_inputValue->setTransient(false);
	m_opaqueAction_EReference_inputValue->setVolatile(false);
	m_opaqueAction_EReference_inputValue->setChangeable(true);
	m_opaqueAction_EReference_inputValue->setUnsettable(false);
	m_opaqueAction_EReference_inputValue->setUnique(true);
	m_opaqueAction_EReference_inputValue->setDerived(false);
	m_opaqueAction_EReference_inputValue->setOrdered(false);
	m_opaqueAction_EReference_inputValue->setContainment(true);
	m_opaqueAction_EReference_inputValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_opaqueAction_EReference_inputValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_opaqueAction_EReference_inputValue->setEOpposite(otherEnd);
	    }
	}
	m_opaqueAction_EReference_outputValue->setName("outputValue");
	m_opaqueAction_EReference_outputValue->setEType(getOutputPin_EClass());
	m_opaqueAction_EReference_outputValue->setLowerBound(0);
	m_opaqueAction_EReference_outputValue->setUpperBound(-1);
	m_opaqueAction_EReference_outputValue->setTransient(false);
	m_opaqueAction_EReference_outputValue->setVolatile(false);
	m_opaqueAction_EReference_outputValue->setChangeable(true);
	m_opaqueAction_EReference_outputValue->setUnsettable(false);
	m_opaqueAction_EReference_outputValue->setUnique(true);
	m_opaqueAction_EReference_outputValue->setDerived(false);
	m_opaqueAction_EReference_outputValue->setOrdered(false);
	m_opaqueAction_EReference_outputValue->setContainment(true);
	m_opaqueAction_EReference_outputValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_opaqueAction_EReference_outputValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_opaqueAction_EReference_outputValue->setEOpposite(otherEnd);
	    }
	}
	
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setName("language_body_size");
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setLowerBound(0);
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setUpperBound(1);
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setUnique(true);
	m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueAction_EOperation_language_body_size_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeOpaqueBehaviorContent()
{
	m_opaqueBehavior_EClass->setName("OpaqueBehavior");
	m_opaqueBehavior_EClass->setAbstract(false);
	m_opaqueBehavior_EClass->setInterface(false);
	
	m_opaqueBehavior_EAttribute_body = getOpaqueBehavior_EAttribute_body();
	m_opaqueBehavior_EAttribute_body->setName("body");
	m_opaqueBehavior_EAttribute_body->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueBehavior_EAttribute_body->setLowerBound(0);
	m_opaqueBehavior_EAttribute_body->setUpperBound(-1);
	m_opaqueBehavior_EAttribute_body->setTransient(false);
	m_opaqueBehavior_EAttribute_body->setVolatile(false);
	m_opaqueBehavior_EAttribute_body->setChangeable(true);
	m_opaqueBehavior_EAttribute_body->setUnsettable(true);
	m_opaqueBehavior_EAttribute_body->setUnique(false);
	m_opaqueBehavior_EAttribute_body->setDerived(false);
	m_opaqueBehavior_EAttribute_body->setOrdered(true);
	m_opaqueBehavior_EAttribute_body->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueBehavior_EAttribute_body->setDefaultValueLiteral(defaultValue);
		}
	}
	m_opaqueBehavior_EAttribute_language = getOpaqueBehavior_EAttribute_language();
	m_opaqueBehavior_EAttribute_language->setName("language");
	m_opaqueBehavior_EAttribute_language->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueBehavior_EAttribute_language->setLowerBound(0);
	m_opaqueBehavior_EAttribute_language->setUpperBound(-1);
	m_opaqueBehavior_EAttribute_language->setTransient(false);
	m_opaqueBehavior_EAttribute_language->setVolatile(false);
	m_opaqueBehavior_EAttribute_language->setChangeable(true);
	m_opaqueBehavior_EAttribute_language->setUnsettable(true);
	m_opaqueBehavior_EAttribute_language->setUnique(true);
	m_opaqueBehavior_EAttribute_language->setDerived(false);
	m_opaqueBehavior_EAttribute_language->setOrdered(true);
	m_opaqueBehavior_EAttribute_language->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueBehavior_EAttribute_language->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeOpaqueExpressionContent()
{
	m_opaqueExpression_EClass->setName("OpaqueExpression");
	m_opaqueExpression_EClass->setAbstract(false);
	m_opaqueExpression_EClass->setInterface(false);
	
	m_opaqueExpression_EAttribute_body = getOpaqueExpression_EAttribute_body();
	m_opaqueExpression_EAttribute_body->setName("body");
	m_opaqueExpression_EAttribute_body->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueExpression_EAttribute_body->setLowerBound(0);
	m_opaqueExpression_EAttribute_body->setUpperBound(-1);
	m_opaqueExpression_EAttribute_body->setTransient(false);
	m_opaqueExpression_EAttribute_body->setVolatile(false);
	m_opaqueExpression_EAttribute_body->setChangeable(true);
	m_opaqueExpression_EAttribute_body->setUnsettable(true);
	m_opaqueExpression_EAttribute_body->setUnique(false);
	m_opaqueExpression_EAttribute_body->setDerived(false);
	m_opaqueExpression_EAttribute_body->setOrdered(true);
	m_opaqueExpression_EAttribute_body->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueExpression_EAttribute_body->setDefaultValueLiteral(defaultValue);
		}
	}
	m_opaqueExpression_EAttribute_language = getOpaqueExpression_EAttribute_language();
	m_opaqueExpression_EAttribute_language->setName("language");
	m_opaqueExpression_EAttribute_language->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_opaqueExpression_EAttribute_language->setLowerBound(0);
	m_opaqueExpression_EAttribute_language->setUpperBound(-1);
	m_opaqueExpression_EAttribute_language->setTransient(false);
	m_opaqueExpression_EAttribute_language->setVolatile(false);
	m_opaqueExpression_EAttribute_language->setChangeable(true);
	m_opaqueExpression_EAttribute_language->setUnsettable(true);
	m_opaqueExpression_EAttribute_language->setUnique(true);
	m_opaqueExpression_EAttribute_language->setDerived(false);
	m_opaqueExpression_EAttribute_language->setOrdered(true);
	m_opaqueExpression_EAttribute_language->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_opaqueExpression_EAttribute_language->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_opaqueExpression_EReference_behavior->setName("behavior");
	m_opaqueExpression_EReference_behavior->setEType(getBehavior_EClass());
	m_opaqueExpression_EReference_behavior->setLowerBound(0);
	m_opaqueExpression_EReference_behavior->setUpperBound(1);
	m_opaqueExpression_EReference_behavior->setTransient(false);
	m_opaqueExpression_EReference_behavior->setVolatile(false);
	m_opaqueExpression_EReference_behavior->setChangeable(true);
	m_opaqueExpression_EReference_behavior->setUnsettable(false);
	m_opaqueExpression_EReference_behavior->setUnique(true);
	m_opaqueExpression_EReference_behavior->setDerived(false);
	m_opaqueExpression_EReference_behavior->setOrdered(false);
	m_opaqueExpression_EReference_behavior->setContainment(false);
	m_opaqueExpression_EReference_behavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_opaqueExpression_EReference_behavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_opaqueExpression_EReference_behavior->setEOpposite(otherEnd);
	    }
	}
	m_opaqueExpression_EReference_result->setName("result");
	m_opaqueExpression_EReference_result->setEType(getParameter_EClass());
	m_opaqueExpression_EReference_result->setLowerBound(0);
	m_opaqueExpression_EReference_result->setUpperBound(1);
	m_opaqueExpression_EReference_result->setTransient(true);
	m_opaqueExpression_EReference_result->setVolatile(true);
	m_opaqueExpression_EReference_result->setChangeable(false);
	m_opaqueExpression_EReference_result->setUnsettable(false);
	m_opaqueExpression_EReference_result->setUnique(true);
	m_opaqueExpression_EReference_result->setDerived(true);
	m_opaqueExpression_EReference_result->setOrdered(false);
	m_opaqueExpression_EReference_result->setContainment(false);
	m_opaqueExpression_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_opaqueExpression_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_opaqueExpression_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_opaqueExpression_EOperation_getResult->setEType(getParameter_EClass());
	m_opaqueExpression_EOperation_getResult->setName("getResult");
	m_opaqueExpression_EOperation_getResult->setLowerBound(0);
	m_opaqueExpression_EOperation_getResult->setUpperBound(1);
	m_opaqueExpression_EOperation_getResult->setUnique(true);
	m_opaqueExpression_EOperation_getResult->setOrdered(false);
	
	
	m_opaqueExpression_EOperation_isIntegral->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_opaqueExpression_EOperation_isIntegral->setName("isIntegral");
	m_opaqueExpression_EOperation_isIntegral->setLowerBound(1);
	m_opaqueExpression_EOperation_isIntegral->setUpperBound(1);
	m_opaqueExpression_EOperation_isIntegral->setUnique(true);
	m_opaqueExpression_EOperation_isIntegral->setOrdered(false);
	
	
	m_opaqueExpression_EOperation_isNonNegative->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_opaqueExpression_EOperation_isNonNegative->setName("isNonNegative");
	m_opaqueExpression_EOperation_isNonNegative->setLowerBound(1);
	m_opaqueExpression_EOperation_isNonNegative->setUpperBound(1);
	m_opaqueExpression_EOperation_isNonNegative->setUnique(true);
	m_opaqueExpression_EOperation_isNonNegative->setOrdered(false);
	
	
	m_opaqueExpression_EOperation_isPositive->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_opaqueExpression_EOperation_isPositive->setName("isPositive");
	m_opaqueExpression_EOperation_isPositive->setLowerBound(1);
	m_opaqueExpression_EOperation_isPositive->setUpperBound(1);
	m_opaqueExpression_EOperation_isPositive->setUnique(true);
	m_opaqueExpression_EOperation_isPositive->setOrdered(false);
	
	
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setName("language_body_size");
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setLowerBound(0);
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setUpperBound(1);
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setUnique(true);
	m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_language_body_size_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setName("one_return_result_parameter");
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_one_return_result_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setName("only_return_result_parameters");
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_opaqueExpression_EOperation_only_return_result_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_opaqueExpression_EOperation_value->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_opaqueExpression_EOperation_value->setName("value");
	m_opaqueExpression_EOperation_value->setLowerBound(1);
	m_opaqueExpression_EOperation_value->setUpperBound(1);
	m_opaqueExpression_EOperation_value->setUnique(true);
	m_opaqueExpression_EOperation_value->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeOperationContent()
{
	m_operation_EClass->setName("Operation");
	m_operation_EClass->setAbstract(false);
	m_operation_EClass->setInterface(false);
	
	m_operation_EAttribute_isOrdered = getOperation_EAttribute_isOrdered();
	m_operation_EAttribute_isOrdered->setName("isOrdered");
	m_operation_EAttribute_isOrdered->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_operation_EAttribute_isOrdered->setLowerBound(1);
	m_operation_EAttribute_isOrdered->setUpperBound(1);
	m_operation_EAttribute_isOrdered->setTransient(true);
	m_operation_EAttribute_isOrdered->setVolatile(true);
	m_operation_EAttribute_isOrdered->setChangeable(false);
	m_operation_EAttribute_isOrdered->setUnsettable(false);
	m_operation_EAttribute_isOrdered->setUnique(true);
	m_operation_EAttribute_isOrdered->setDerived(true);
	m_operation_EAttribute_isOrdered->setOrdered(false);
	m_operation_EAttribute_isOrdered->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_operation_EAttribute_isOrdered->setDefaultValueLiteral(defaultValue);
		}
	}
	m_operation_EAttribute_isQuery = getOperation_EAttribute_isQuery();
	m_operation_EAttribute_isQuery->setName("isQuery");
	m_operation_EAttribute_isQuery->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_operation_EAttribute_isQuery->setLowerBound(1);
	m_operation_EAttribute_isQuery->setUpperBound(1);
	m_operation_EAttribute_isQuery->setTransient(false);
	m_operation_EAttribute_isQuery->setVolatile(false);
	m_operation_EAttribute_isQuery->setChangeable(true);
	m_operation_EAttribute_isQuery->setUnsettable(false);
	m_operation_EAttribute_isQuery->setUnique(true);
	m_operation_EAttribute_isQuery->setDerived(false);
	m_operation_EAttribute_isQuery->setOrdered(false);
	m_operation_EAttribute_isQuery->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_operation_EAttribute_isQuery->setDefaultValueLiteral(defaultValue);
		}
	}
	m_operation_EAttribute_isUnique = getOperation_EAttribute_isUnique();
	m_operation_EAttribute_isUnique->setName("isUnique");
	m_operation_EAttribute_isUnique->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_operation_EAttribute_isUnique->setLowerBound(1);
	m_operation_EAttribute_isUnique->setUpperBound(1);
	m_operation_EAttribute_isUnique->setTransient(true);
	m_operation_EAttribute_isUnique->setVolatile(true);
	m_operation_EAttribute_isUnique->setChangeable(false);
	m_operation_EAttribute_isUnique->setUnsettable(false);
	m_operation_EAttribute_isUnique->setUnique(true);
	m_operation_EAttribute_isUnique->setDerived(true);
	m_operation_EAttribute_isUnique->setOrdered(false);
	m_operation_EAttribute_isUnique->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_operation_EAttribute_isUnique->setDefaultValueLiteral(defaultValue);
		}
	}
	m_operation_EAttribute_lower = getOperation_EAttribute_lower();
	m_operation_EAttribute_lower->setName("lower");
	m_operation_EAttribute_lower->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_operation_EAttribute_lower->setLowerBound(0);
	m_operation_EAttribute_lower->setUpperBound(1);
	m_operation_EAttribute_lower->setTransient(true);
	m_operation_EAttribute_lower->setVolatile(true);
	m_operation_EAttribute_lower->setChangeable(false);
	m_operation_EAttribute_lower->setUnsettable(false);
	m_operation_EAttribute_lower->setUnique(true);
	m_operation_EAttribute_lower->setDerived(true);
	m_operation_EAttribute_lower->setOrdered(false);
	m_operation_EAttribute_lower->setID(false);
	{
		std::string defaultValue = "1";
		if (!defaultValue.empty())
		{
		   m_operation_EAttribute_lower->setDefaultValueLiteral(defaultValue);
		}
	}
	m_operation_EAttribute_upper = getOperation_EAttribute_upper();
	m_operation_EAttribute_upper->setName("upper");
	m_operation_EAttribute_upper->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_operation_EAttribute_upper->setLowerBound(0);
	m_operation_EAttribute_upper->setUpperBound(1);
	m_operation_EAttribute_upper->setTransient(true);
	m_operation_EAttribute_upper->setVolatile(true);
	m_operation_EAttribute_upper->setChangeable(false);
	m_operation_EAttribute_upper->setUnsettable(false);
	m_operation_EAttribute_upper->setUnique(true);
	m_operation_EAttribute_upper->setDerived(true);
	m_operation_EAttribute_upper->setOrdered(false);
	m_operation_EAttribute_upper->setID(false);
	{
		std::string defaultValue = "1";
		if (!defaultValue.empty())
		{
		   m_operation_EAttribute_upper->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_operation_EReference_bodyCondition->setName("bodyCondition");
	m_operation_EReference_bodyCondition->setEType(getConstraint_EClass());
	m_operation_EReference_bodyCondition->setLowerBound(0);
	m_operation_EReference_bodyCondition->setUpperBound(1);
	m_operation_EReference_bodyCondition->setTransient(false);
	m_operation_EReference_bodyCondition->setVolatile(false);
	m_operation_EReference_bodyCondition->setChangeable(true);
	m_operation_EReference_bodyCondition->setUnsettable(false);
	m_operation_EReference_bodyCondition->setUnique(true);
	m_operation_EReference_bodyCondition->setDerived(false);
	m_operation_EReference_bodyCondition->setOrdered(false);
	m_operation_EReference_bodyCondition->setContainment(false);
	m_operation_EReference_bodyCondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_bodyCondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_bodyCondition->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_class->setName("class");
	m_operation_EReference_class->setEType(getClass_EClass());
	m_operation_EReference_class->setLowerBound(0);
	m_operation_EReference_class->setUpperBound(1);
	m_operation_EReference_class->setTransient(false);
	m_operation_EReference_class->setVolatile(false);
	m_operation_EReference_class->setChangeable(true);
	m_operation_EReference_class->setUnsettable(false);
	m_operation_EReference_class->setUnique(true);
	m_operation_EReference_class->setDerived(false);
	m_operation_EReference_class->setOrdered(false);
	m_operation_EReference_class->setContainment(false);
	m_operation_EReference_class->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_class->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClass_EReference_ownedOperation();
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_class->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_datatype->setName("datatype");
	m_operation_EReference_datatype->setEType(getDataType_EClass());
	m_operation_EReference_datatype->setLowerBound(0);
	m_operation_EReference_datatype->setUpperBound(1);
	m_operation_EReference_datatype->setTransient(false);
	m_operation_EReference_datatype->setVolatile(false);
	m_operation_EReference_datatype->setChangeable(true);
	m_operation_EReference_datatype->setUnsettable(false);
	m_operation_EReference_datatype->setUnique(true);
	m_operation_EReference_datatype->setDerived(false);
	m_operation_EReference_datatype->setOrdered(false);
	m_operation_EReference_datatype->setContainment(false);
	m_operation_EReference_datatype->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_datatype->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDataType_EReference_ownedOperation();
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_datatype->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_interface->setName("interface");
	m_operation_EReference_interface->setEType(getInterface_EClass());
	m_operation_EReference_interface->setLowerBound(0);
	m_operation_EReference_interface->setUpperBound(1);
	m_operation_EReference_interface->setTransient(false);
	m_operation_EReference_interface->setVolatile(false);
	m_operation_EReference_interface->setChangeable(true);
	m_operation_EReference_interface->setUnsettable(false);
	m_operation_EReference_interface->setUnique(true);
	m_operation_EReference_interface->setDerived(false);
	m_operation_EReference_interface->setOrdered(false);
	m_operation_EReference_interface->setContainment(false);
	m_operation_EReference_interface->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_interface->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInterface_EReference_ownedOperation();
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_interface->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_postcondition->setName("postcondition");
	m_operation_EReference_postcondition->setEType(getConstraint_EClass());
	m_operation_EReference_postcondition->setLowerBound(0);
	m_operation_EReference_postcondition->setUpperBound(-1);
	m_operation_EReference_postcondition->setTransient(false);
	m_operation_EReference_postcondition->setVolatile(false);
	m_operation_EReference_postcondition->setChangeable(true);
	m_operation_EReference_postcondition->setUnsettable(false);
	m_operation_EReference_postcondition->setUnique(true);
	m_operation_EReference_postcondition->setDerived(false);
	m_operation_EReference_postcondition->setOrdered(false);
	m_operation_EReference_postcondition->setContainment(false);
	m_operation_EReference_postcondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_postcondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_postcondition->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_precondition->setName("precondition");
	m_operation_EReference_precondition->setEType(getConstraint_EClass());
	m_operation_EReference_precondition->setLowerBound(0);
	m_operation_EReference_precondition->setUpperBound(-1);
	m_operation_EReference_precondition->setTransient(false);
	m_operation_EReference_precondition->setVolatile(false);
	m_operation_EReference_precondition->setChangeable(true);
	m_operation_EReference_precondition->setUnsettable(false);
	m_operation_EReference_precondition->setUnique(true);
	m_operation_EReference_precondition->setDerived(false);
	m_operation_EReference_precondition->setOrdered(false);
	m_operation_EReference_precondition->setContainment(false);
	m_operation_EReference_precondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_precondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_precondition->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_redefinedOperation->setName("redefinedOperation");
	m_operation_EReference_redefinedOperation->setEType(getOperation_EClass());
	m_operation_EReference_redefinedOperation->setLowerBound(0);
	m_operation_EReference_redefinedOperation->setUpperBound(-1);
	m_operation_EReference_redefinedOperation->setTransient(false);
	m_operation_EReference_redefinedOperation->setVolatile(false);
	m_operation_EReference_redefinedOperation->setChangeable(true);
	m_operation_EReference_redefinedOperation->setUnsettable(false);
	m_operation_EReference_redefinedOperation->setUnique(true);
	m_operation_EReference_redefinedOperation->setDerived(false);
	m_operation_EReference_redefinedOperation->setOrdered(false);
	m_operation_EReference_redefinedOperation->setContainment(false);
	m_operation_EReference_redefinedOperation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_redefinedOperation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_redefinedOperation->setEOpposite(otherEnd);
	    }
	}
	m_operation_EReference_type->setName("type");
	m_operation_EReference_type->setEType(getType_EClass());
	m_operation_EReference_type->setLowerBound(0);
	m_operation_EReference_type->setUpperBound(1);
	m_operation_EReference_type->setTransient(true);
	m_operation_EReference_type->setVolatile(true);
	m_operation_EReference_type->setChangeable(false);
	m_operation_EReference_type->setUnsettable(false);
	m_operation_EReference_type->setUnique(true);
	m_operation_EReference_type->setDerived(true);
	m_operation_EReference_type->setOrdered(false);
	m_operation_EReference_type->setContainment(false);
	m_operation_EReference_type->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_operation_EReference_type->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_operation_EReference_type->setEOpposite(otherEnd);
	    }
	}
	
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setName("at_most_one_return");
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setLowerBound(0);
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setUpperBound(1);
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setUnique(true);
	m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_at_most_one_return_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_getLower->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_operation_EOperation_getLower->setName("getLower");
	m_operation_EOperation_getLower->setLowerBound(1);
	m_operation_EOperation_getLower->setUpperBound(1);
	m_operation_EOperation_getLower->setUnique(true);
	m_operation_EOperation_getLower->setOrdered(false);
	
	
	m_operation_EOperation_getReturnResult->setEType(getParameter_EClass());
	m_operation_EOperation_getReturnResult->setName("getReturnResult");
	m_operation_EOperation_getReturnResult->setLowerBound(0);
	m_operation_EOperation_getReturnResult->setUpperBound(1);
	m_operation_EOperation_getReturnResult->setUnique(true);
	m_operation_EOperation_getReturnResult->setOrdered(false);
	
	
	m_operation_EOperation_getType->setEType(getType_EClass());
	m_operation_EOperation_getType->setName("getType");
	m_operation_EOperation_getType->setLowerBound(1);
	m_operation_EOperation_getType->setUpperBound(1);
	m_operation_EOperation_getType->setUnique(true);
	m_operation_EOperation_getType->setOrdered(false);
	
	
	m_operation_EOperation_getUpper->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_operation_EOperation_getUpper->setName("getUpper");
	m_operation_EOperation_getUpper->setLowerBound(1);
	m_operation_EOperation_getUpper->setUpperBound(1);
	m_operation_EOperation_getUpper->setUnique(true);
	m_operation_EOperation_getUpper->setOrdered(false);
	
	
	m_operation_EOperation_isOrdered->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_operation_EOperation_isOrdered->setName("isOrdered");
	m_operation_EOperation_isOrdered->setLowerBound(1);
	m_operation_EOperation_isOrdered->setUpperBound(1);
	m_operation_EOperation_isOrdered->setUnique(true);
	m_operation_EOperation_isOrdered->setOrdered(false);
	
	
	m_operation_EOperation_isUnique->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_operation_EOperation_isUnique->setName("isUnique");
	m_operation_EOperation_isUnique->setLowerBound(1);
	m_operation_EOperation_isUnique->setUpperBound(1);
	m_operation_EOperation_isUnique->setUnique(true);
	m_operation_EOperation_isUnique->setOrdered(false);
	
	
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setName("only_body_for_query");
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setLowerBound(0);
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setUpperBound(1);
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setUnique(true);
	m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_only_body_for_query_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_returnResult->setEType(getParameter_EClass());
	m_operation_EOperation_returnResult->setName("returnResult");
	m_operation_EOperation_returnResult->setLowerBound(0);
	m_operation_EOperation_returnResult->setUpperBound(-1);
	m_operation_EOperation_returnResult->setUnique(true);
	m_operation_EOperation_returnResult->setOrdered(false);
	
	
	m_operation_EOperation_setIsOrdered_Boolean->setEType(nullptr);
	m_operation_EOperation_setIsOrdered_Boolean->setName("setIsOrdered");
	m_operation_EOperation_setIsOrdered_Boolean->setLowerBound(1);
	m_operation_EOperation_setIsOrdered_Boolean->setUpperBound(1);
	m_operation_EOperation_setIsOrdered_Boolean->setUnique(true);
	m_operation_EOperation_setIsOrdered_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_setIsOrdered_Boolean);
		parameter->setName("newIsOrdered");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_setIsUnique_Boolean->setEType(nullptr);
	m_operation_EOperation_setIsUnique_Boolean->setName("setIsUnique");
	m_operation_EOperation_setIsUnique_Boolean->setLowerBound(1);
	m_operation_EOperation_setIsUnique_Boolean->setUpperBound(1);
	m_operation_EOperation_setIsUnique_Boolean->setUnique(true);
	m_operation_EOperation_setIsUnique_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_setIsUnique_Boolean);
		parameter->setName("newIsUnique");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_setLower_Integer->setEType(nullptr);
	m_operation_EOperation_setLower_Integer->setName("setLower");
	m_operation_EOperation_setLower_Integer->setLowerBound(1);
	m_operation_EOperation_setLower_Integer->setUpperBound(1);
	m_operation_EOperation_setLower_Integer->setUnique(true);
	m_operation_EOperation_setLower_Integer->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_setLower_Integer);
		parameter->setName("newLower");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_setType_Type->setEType(nullptr);
	m_operation_EOperation_setType_Type->setName("setType");
	m_operation_EOperation_setType_Type->setLowerBound(1);
	m_operation_EOperation_setType_Type->setUpperBound(1);
	m_operation_EOperation_setType_Type->setUnique(true);
	m_operation_EOperation_setType_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_setType_Type);
		parameter->setName("newType");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_operation_EOperation_setUpper_UnlimitedNatural->setEType(nullptr);
	m_operation_EOperation_setUpper_UnlimitedNatural->setName("setUpper");
	m_operation_EOperation_setUpper_UnlimitedNatural->setLowerBound(1);
	m_operation_EOperation_setUpper_UnlimitedNatural->setUpperBound(1);
	m_operation_EOperation_setUpper_UnlimitedNatural->setUnique(true);
	m_operation_EOperation_setUpper_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operation_EOperation_setUpper_UnlimitedNatural);
		parameter->setName("newUpper");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeOperationTemplateParameterContent()
{
	m_operationTemplateParameter_EClass->setName("OperationTemplateParameter");
	m_operationTemplateParameter_EClass->setAbstract(false);
	m_operationTemplateParameter_EClass->setInterface(false);
	
	
	
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setName("match_default_signature");
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setLowerBound(0);
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setUpperBound(1);
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setUnique(true);
	m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_operationTemplateParameter_EOperation_match_default_signature_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeOutputPinContent()
{
	m_outputPin_EClass->setName("OutputPin");
	m_outputPin_EClass->setAbstract(false);
	m_outputPin_EClass->setInterface(false);
	
	
	m_outputPin_EReference_callAction->setName("callAction");
	m_outputPin_EReference_callAction->setEType(getCallAction_EClass());
	m_outputPin_EReference_callAction->setLowerBound(0);
	m_outputPin_EReference_callAction->setUpperBound(1);
	m_outputPin_EReference_callAction->setTransient(false);
	m_outputPin_EReference_callAction->setVolatile(false);
	m_outputPin_EReference_callAction->setChangeable(true);
	m_outputPin_EReference_callAction->setUnsettable(false);
	m_outputPin_EReference_callAction->setUnique(true);
	m_outputPin_EReference_callAction->setDerived(false);
	m_outputPin_EReference_callAction->setOrdered(true);
	m_outputPin_EReference_callAction->setContainment(false);
	m_outputPin_EReference_callAction->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_outputPin_EReference_callAction->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getCallAction_EReference_result();
		if (otherEnd != nullptr)
	    {
	   		m_outputPin_EReference_callAction->setEOpposite(otherEnd);
	    }
	}
	
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setName("incoming_edges_structured_only");
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setLowerBound(0);
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setUpperBound(1);
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setUnique(true);
	m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_outputPin_EOperation_incoming_edges_structured_only_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePackageContent()
{
	m_package_EClass->setName("Package");
	m_package_EClass->setAbstract(false);
	m_package_EClass->setInterface(false);
	
	m_package_EAttribute_uRI = getPackage_EAttribute_uRI();
	m_package_EAttribute_uRI->setName("URI");
	m_package_EAttribute_uRI->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_package_EAttribute_uRI->setLowerBound(0);
	m_package_EAttribute_uRI->setUpperBound(1);
	m_package_EAttribute_uRI->setTransient(false);
	m_package_EAttribute_uRI->setVolatile(false);
	m_package_EAttribute_uRI->setChangeable(true);
	m_package_EAttribute_uRI->setUnsettable(false);
	m_package_EAttribute_uRI->setUnique(true);
	m_package_EAttribute_uRI->setDerived(false);
	m_package_EAttribute_uRI->setOrdered(false);
	m_package_EAttribute_uRI->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_package_EAttribute_uRI->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_package_EReference_nestedPackage->setName("nestedPackage");
	m_package_EReference_nestedPackage->setEType(getPackage_EClass());
	m_package_EReference_nestedPackage->setLowerBound(0);
	m_package_EReference_nestedPackage->setUpperBound(-1);
	m_package_EReference_nestedPackage->setTransient(true);
	m_package_EReference_nestedPackage->setVolatile(true);
	m_package_EReference_nestedPackage->setChangeable(true);
	m_package_EReference_nestedPackage->setUnsettable(false);
	m_package_EReference_nestedPackage->setUnique(true);
	m_package_EReference_nestedPackage->setDerived(true);
	m_package_EReference_nestedPackage->setOrdered(false);
	m_package_EReference_nestedPackage->setContainment(true);
	m_package_EReference_nestedPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_nestedPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_nestingPackage();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_nestedPackage->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_nestingPackage->setName("nestingPackage");
	m_package_EReference_nestingPackage->setEType(getPackage_EClass());
	m_package_EReference_nestingPackage->setLowerBound(0);
	m_package_EReference_nestingPackage->setUpperBound(1);
	m_package_EReference_nestingPackage->setTransient(true);
	m_package_EReference_nestingPackage->setVolatile(true);
	m_package_EReference_nestingPackage->setChangeable(true);
	m_package_EReference_nestingPackage->setUnsettable(false);
	m_package_EReference_nestingPackage->setUnique(true);
	m_package_EReference_nestingPackage->setDerived(true);
	m_package_EReference_nestingPackage->setOrdered(false);
	m_package_EReference_nestingPackage->setContainment(false);
	m_package_EReference_nestingPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_nestingPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_nestedPackage();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_nestingPackage->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_ownedStereotype->setName("ownedStereotype");
	m_package_EReference_ownedStereotype->setEType(getStereotype_EClass());
	m_package_EReference_ownedStereotype->setLowerBound(0);
	m_package_EReference_ownedStereotype->setUpperBound(-1);
	m_package_EReference_ownedStereotype->setTransient(true);
	m_package_EReference_ownedStereotype->setVolatile(true);
	m_package_EReference_ownedStereotype->setChangeable(false);
	m_package_EReference_ownedStereotype->setUnsettable(false);
	m_package_EReference_ownedStereotype->setUnique(true);
	m_package_EReference_ownedStereotype->setDerived(true);
	m_package_EReference_ownedStereotype->setOrdered(false);
	m_package_EReference_ownedStereotype->setContainment(true);
	m_package_EReference_ownedStereotype->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_ownedStereotype->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_ownedStereotype->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_ownedType->setName("ownedType");
	m_package_EReference_ownedType->setEType(getType_EClass());
	m_package_EReference_ownedType->setLowerBound(0);
	m_package_EReference_ownedType->setUpperBound(-1);
	m_package_EReference_ownedType->setTransient(true);
	m_package_EReference_ownedType->setVolatile(true);
	m_package_EReference_ownedType->setChangeable(true);
	m_package_EReference_ownedType->setUnsettable(false);
	m_package_EReference_ownedType->setUnique(true);
	m_package_EReference_ownedType->setDerived(true);
	m_package_EReference_ownedType->setOrdered(false);
	m_package_EReference_ownedType->setContainment(true);
	m_package_EReference_ownedType->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_ownedType->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getType_EReference_package();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_ownedType->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_packageMerge->setName("packageMerge");
	m_package_EReference_packageMerge->setEType(getPackageMerge_EClass());
	m_package_EReference_packageMerge->setLowerBound(0);
	m_package_EReference_packageMerge->setUpperBound(-1);
	m_package_EReference_packageMerge->setTransient(false);
	m_package_EReference_packageMerge->setVolatile(false);
	m_package_EReference_packageMerge->setChangeable(true);
	m_package_EReference_packageMerge->setUnsettable(false);
	m_package_EReference_packageMerge->setUnique(true);
	m_package_EReference_packageMerge->setDerived(false);
	m_package_EReference_packageMerge->setOrdered(false);
	m_package_EReference_packageMerge->setContainment(true);
	m_package_EReference_packageMerge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_packageMerge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackageMerge_EReference_receivingPackage();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_packageMerge->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_packagedElement->setName("packagedElement");
	m_package_EReference_packagedElement->setEType(getPackageableElement_EClass());
	m_package_EReference_packagedElement->setLowerBound(0);
	m_package_EReference_packagedElement->setUpperBound(-1);
	m_package_EReference_packagedElement->setTransient(false);
	m_package_EReference_packagedElement->setVolatile(false);
	m_package_EReference_packagedElement->setChangeable(true);
	m_package_EReference_packagedElement->setUnsettable(false);
	m_package_EReference_packagedElement->setUnique(true);
	m_package_EReference_packagedElement->setDerived(false);
	m_package_EReference_packagedElement->setOrdered(false);
	m_package_EReference_packagedElement->setContainment(true);
	m_package_EReference_packagedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_packagedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackageableElement_EReference_owningPackage();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_packagedElement->setEOpposite(otherEnd);
	    }
	}
	m_package_EReference_profileApplication->setName("profileApplication");
	m_package_EReference_profileApplication->setEType(getProfileApplication_EClass());
	m_package_EReference_profileApplication->setLowerBound(0);
	m_package_EReference_profileApplication->setUpperBound(-1);
	m_package_EReference_profileApplication->setTransient(false);
	m_package_EReference_profileApplication->setVolatile(false);
	m_package_EReference_profileApplication->setChangeable(true);
	m_package_EReference_profileApplication->setUnsettable(false);
	m_package_EReference_profileApplication->setUnique(true);
	m_package_EReference_profileApplication->setDerived(false);
	m_package_EReference_profileApplication->setOrdered(false);
	m_package_EReference_profileApplication->setContainment(true);
	m_package_EReference_profileApplication->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_package_EReference_profileApplication->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProfileApplication_EReference_applyingPackage();
		if (otherEnd != nullptr)
	    {
	   		m_package_EReference_profileApplication->setEOpposite(otherEnd);
	    }
	}
	
	m_package_EOperation_allApplicableStereotypes->setEType(getStereotype_EClass());
	m_package_EOperation_allApplicableStereotypes->setName("allApplicableStereotypes");
	m_package_EOperation_allApplicableStereotypes->setLowerBound(0);
	m_package_EOperation_allApplicableStereotypes->setUpperBound(-1);
	m_package_EOperation_allApplicableStereotypes->setUnique(true);
	m_package_EOperation_allApplicableStereotypes->setOrdered(false);
	
	
	m_package_EOperation_applyProfile_Profile->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_package_EOperation_applyProfile_Profile->setName("applyProfile");
	m_package_EOperation_applyProfile_Profile->setLowerBound(0);
	m_package_EOperation_applyProfile_Profile->setUpperBound(-1);
	m_package_EOperation_applyProfile_Profile->setUnique(true);
	m_package_EOperation_applyProfile_Profile->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_applyProfile_Profile);
		parameter->setName("profile");
		parameter->setEType(getProfile_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_containingProfile->setEType(getProfile_EClass());
	m_package_EOperation_containingProfile->setName("containingProfile");
	m_package_EOperation_containingProfile->setLowerBound(0);
	m_package_EOperation_containingProfile->setUpperBound(1);
	m_package_EOperation_containingProfile->setUnique(true);
	m_package_EOperation_containingProfile->setOrdered(false);
	
	
	m_package_EOperation_createOwnedClass_String_Boolean->setEType(getClass_EClass());
	m_package_EOperation_createOwnedClass_String_Boolean->setName("createOwnedClass");
	m_package_EOperation_createOwnedClass_String_Boolean->setLowerBound(1);
	m_package_EOperation_createOwnedClass_String_Boolean->setUpperBound(1);
	m_package_EOperation_createOwnedClass_String_Boolean->setUnique(true);
	m_package_EOperation_createOwnedClass_String_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedClass_String_Boolean);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedClass_String_Boolean);
		parameter->setName("isAbstract");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_createOwnedEnumeration_String->setEType(getEnumeration_EClass());
	m_package_EOperation_createOwnedEnumeration_String->setName("createOwnedEnumeration");
	m_package_EOperation_createOwnedEnumeration_String->setLowerBound(1);
	m_package_EOperation_createOwnedEnumeration_String->setUpperBound(1);
	m_package_EOperation_createOwnedEnumeration_String->setUnique(true);
	m_package_EOperation_createOwnedEnumeration_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedEnumeration_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_createOwnedInterface_String->setEType(getInterface_EClass());
	m_package_EOperation_createOwnedInterface_String->setName("createOwnedInterface");
	m_package_EOperation_createOwnedInterface_String->setLowerBound(1);
	m_package_EOperation_createOwnedInterface_String->setUpperBound(1);
	m_package_EOperation_createOwnedInterface_String->setUnique(true);
	m_package_EOperation_createOwnedInterface_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedInterface_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_createOwnedPrimitiveType_String->setEType(getPrimitiveType_EClass());
	m_package_EOperation_createOwnedPrimitiveType_String->setName("createOwnedPrimitiveType");
	m_package_EOperation_createOwnedPrimitiveType_String->setLowerBound(1);
	m_package_EOperation_createOwnedPrimitiveType_String->setUpperBound(1);
	m_package_EOperation_createOwnedPrimitiveType_String->setUnique(true);
	m_package_EOperation_createOwnedPrimitiveType_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedPrimitiveType_String);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_createOwnedStereotype_String_Boolean->setEType(getStereotype_EClass());
	m_package_EOperation_createOwnedStereotype_String_Boolean->setName("createOwnedStereotype");
	m_package_EOperation_createOwnedStereotype_String_Boolean->setLowerBound(1);
	m_package_EOperation_createOwnedStereotype_String_Boolean->setUpperBound(1);
	m_package_EOperation_createOwnedStereotype_String_Boolean->setUnique(true);
	m_package_EOperation_createOwnedStereotype_String_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedStereotype_String_Boolean);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_createOwnedStereotype_String_Boolean);
		parameter->setName("isAbstract");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setName("elements_public_or_private");
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setLowerBound(0);
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setUpperBound(1);
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setUnique(true);
	m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_elements_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_getAllAppliedProfiles->setEType(getProfile_EClass());
	m_package_EOperation_getAllAppliedProfiles->setName("getAllAppliedProfiles");
	m_package_EOperation_getAllAppliedProfiles->setLowerBound(0);
	m_package_EOperation_getAllAppliedProfiles->setUpperBound(-1);
	m_package_EOperation_getAllAppliedProfiles->setUnique(true);
	m_package_EOperation_getAllAppliedProfiles->setOrdered(false);
	
	
	m_package_EOperation_getAllProfileApplications->setEType(getProfileApplication_EClass());
	m_package_EOperation_getAllProfileApplications->setName("getAllProfileApplications");
	m_package_EOperation_getAllProfileApplications->setLowerBound(0);
	m_package_EOperation_getAllProfileApplications->setUpperBound(-1);
	m_package_EOperation_getAllProfileApplications->setUnique(true);
	m_package_EOperation_getAllProfileApplications->setOrdered(false);
	
	
	m_package_EOperation_getAppliedProfile_String->setEType(getProfile_EClass());
	m_package_EOperation_getAppliedProfile_String->setName("getAppliedProfile");
	m_package_EOperation_getAppliedProfile_String->setLowerBound(0);
	m_package_EOperation_getAppliedProfile_String->setUpperBound(1);
	m_package_EOperation_getAppliedProfile_String->setUnique(true);
	m_package_EOperation_getAppliedProfile_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getAppliedProfile_String);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_getAppliedProfile_String_Boolean->setEType(getProfile_EClass());
	m_package_EOperation_getAppliedProfile_String_Boolean->setName("getAppliedProfile");
	m_package_EOperation_getAppliedProfile_String_Boolean->setLowerBound(0);
	m_package_EOperation_getAppliedProfile_String_Boolean->setUpperBound(1);
	m_package_EOperation_getAppliedProfile_String_Boolean->setUnique(true);
	m_package_EOperation_getAppliedProfile_String_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getAppliedProfile_String_Boolean);
		parameter->setName("qualifiedName");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getAppliedProfile_String_Boolean);
		parameter->setName("recurse");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_getAppliedProfiles->setEType(getProfile_EClass());
	m_package_EOperation_getAppliedProfiles->setName("getAppliedProfiles");
	m_package_EOperation_getAppliedProfiles->setLowerBound(0);
	m_package_EOperation_getAppliedProfiles->setUpperBound(-1);
	m_package_EOperation_getAppliedProfiles->setUnique(true);
	m_package_EOperation_getAppliedProfiles->setOrdered(false);
	
	
	m_package_EOperation_getNestedPackages->setEType(getPackage_EClass());
	m_package_EOperation_getNestedPackages->setName("getNestedPackages");
	m_package_EOperation_getNestedPackages->setLowerBound(0);
	m_package_EOperation_getNestedPackages->setUpperBound(-1);
	m_package_EOperation_getNestedPackages->setUnique(true);
	m_package_EOperation_getNestedPackages->setOrdered(false);
	
	
	m_package_EOperation_getOwnedStereotypes->setEType(getStereotype_EClass());
	m_package_EOperation_getOwnedStereotypes->setName("getOwnedStereotypes");
	m_package_EOperation_getOwnedStereotypes->setLowerBound(0);
	m_package_EOperation_getOwnedStereotypes->setUpperBound(-1);
	m_package_EOperation_getOwnedStereotypes->setUnique(true);
	m_package_EOperation_getOwnedStereotypes->setOrdered(false);
	
	
	m_package_EOperation_getOwnedTypes->setEType(getType_EClass());
	m_package_EOperation_getOwnedTypes->setName("getOwnedTypes");
	m_package_EOperation_getOwnedTypes->setLowerBound(0);
	m_package_EOperation_getOwnedTypes->setUpperBound(-1);
	m_package_EOperation_getOwnedTypes->setUnique(true);
	m_package_EOperation_getOwnedTypes->setOrdered(false);
	
	
	m_package_EOperation_getProfileApplication_Profile->setEType(getProfileApplication_EClass());
	m_package_EOperation_getProfileApplication_Profile->setName("getProfileApplication");
	m_package_EOperation_getProfileApplication_Profile->setLowerBound(0);
	m_package_EOperation_getProfileApplication_Profile->setUpperBound(1);
	m_package_EOperation_getProfileApplication_Profile->setUnique(true);
	m_package_EOperation_getProfileApplication_Profile->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getProfileApplication_Profile);
		parameter->setName("profile");
		parameter->setEType(getProfile_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_getProfileApplication_Profile_Boolean->setEType(getProfileApplication_EClass());
	m_package_EOperation_getProfileApplication_Profile_Boolean->setName("getProfileApplication");
	m_package_EOperation_getProfileApplication_Profile_Boolean->setLowerBound(0);
	m_package_EOperation_getProfileApplication_Profile_Boolean->setUpperBound(1);
	m_package_EOperation_getProfileApplication_Profile_Boolean->setUnique(true);
	m_package_EOperation_getProfileApplication_Profile_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getProfileApplication_Profile_Boolean);
		parameter->setName("profile");
		parameter->setEType(getProfile_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_getProfileApplication_Profile_Boolean);
		parameter->setName("recurse");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_isModelLibrary->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_package_EOperation_isModelLibrary->setName("isModelLibrary");
	m_package_EOperation_isModelLibrary->setLowerBound(1);
	m_package_EOperation_isModelLibrary->setUpperBound(1);
	m_package_EOperation_isModelLibrary->setUnique(true);
	m_package_EOperation_isModelLibrary->setOrdered(false);
	
	
	m_package_EOperation_isProfileApplied_Profile->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_package_EOperation_isProfileApplied_Profile->setName("isProfileApplied");
	m_package_EOperation_isProfileApplied_Profile->setLowerBound(1);
	m_package_EOperation_isProfileApplied_Profile->setUpperBound(1);
	m_package_EOperation_isProfileApplied_Profile->setUnique(true);
	m_package_EOperation_isProfileApplied_Profile->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_isProfileApplied_Profile);
		parameter->setName("profile");
		parameter->setEType(getProfile_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_makesVisible_NamedElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_package_EOperation_makesVisible_NamedElement->setName("makesVisible");
	m_package_EOperation_makesVisible_NamedElement->setLowerBound(1);
	m_package_EOperation_makesVisible_NamedElement->setUpperBound(1);
	m_package_EOperation_makesVisible_NamedElement->setUnique(true);
	m_package_EOperation_makesVisible_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_makesVisible_NamedElement);
		parameter->setName("el");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_unapplyProfile_Profile->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_package_EOperation_unapplyProfile_Profile->setName("unapplyProfile");
	m_package_EOperation_unapplyProfile_Profile->setLowerBound(0);
	m_package_EOperation_unapplyProfile_Profile->setUpperBound(-1);
	m_package_EOperation_unapplyProfile_Profile->setUnique(true);
	m_package_EOperation_unapplyProfile_Profile->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_package_EOperation_unapplyProfile_Profile);
		parameter->setName("profile");
		parameter->setEType(getProfile_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_package_EOperation_visibleMembers->setEType(getPackageableElement_EClass());
	m_package_EOperation_visibleMembers->setName("visibleMembers");
	m_package_EOperation_visibleMembers->setLowerBound(0);
	m_package_EOperation_visibleMembers->setUpperBound(-1);
	m_package_EOperation_visibleMembers->setUnique(true);
	m_package_EOperation_visibleMembers->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializePackageImportContent()
{
	m_packageImport_EClass->setName("PackageImport");
	m_packageImport_EClass->setAbstract(false);
	m_packageImport_EClass->setInterface(false);
	
	m_packageImport_EAttribute_visibility = getPackageImport_EAttribute_visibility();
	m_packageImport_EAttribute_visibility->setName("visibility");
	m_packageImport_EAttribute_visibility->setEType(getVisibilityKind_EEnum());
	m_packageImport_EAttribute_visibility->setLowerBound(1);
	m_packageImport_EAttribute_visibility->setUpperBound(1);
	m_packageImport_EAttribute_visibility->setTransient(false);
	m_packageImport_EAttribute_visibility->setVolatile(false);
	m_packageImport_EAttribute_visibility->setChangeable(true);
	m_packageImport_EAttribute_visibility->setUnsettable(false);
	m_packageImport_EAttribute_visibility->setUnique(true);
	m_packageImport_EAttribute_visibility->setDerived(false);
	m_packageImport_EAttribute_visibility->setOrdered(false);
	m_packageImport_EAttribute_visibility->setID(false);
	{
		std::string defaultValue = "public";
		if (!defaultValue.empty())
		{
		   m_packageImport_EAttribute_visibility->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_packageImport_EReference_importedPackage->setName("importedPackage");
	m_packageImport_EReference_importedPackage->setEType(getPackage_EClass());
	m_packageImport_EReference_importedPackage->setLowerBound(1);
	m_packageImport_EReference_importedPackage->setUpperBound(1);
	m_packageImport_EReference_importedPackage->setTransient(false);
	m_packageImport_EReference_importedPackage->setVolatile(false);
	m_packageImport_EReference_importedPackage->setChangeable(true);
	m_packageImport_EReference_importedPackage->setUnsettable(false);
	m_packageImport_EReference_importedPackage->setUnique(true);
	m_packageImport_EReference_importedPackage->setDerived(false);
	m_packageImport_EReference_importedPackage->setOrdered(false);
	m_packageImport_EReference_importedPackage->setContainment(false);
	m_packageImport_EReference_importedPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_packageImport_EReference_importedPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_packageImport_EReference_importedPackage->setEOpposite(otherEnd);
	    }
	}
	m_packageImport_EReference_importingNamespace->setName("importingNamespace");
	m_packageImport_EReference_importingNamespace->setEType(getNamespace_EClass());
	m_packageImport_EReference_importingNamespace->setLowerBound(1);
	m_packageImport_EReference_importingNamespace->setUpperBound(1);
	m_packageImport_EReference_importingNamespace->setTransient(false);
	m_packageImport_EReference_importingNamespace->setVolatile(false);
	m_packageImport_EReference_importingNamespace->setChangeable(true);
	m_packageImport_EReference_importingNamespace->setUnsettable(false);
	m_packageImport_EReference_importingNamespace->setUnique(true);
	m_packageImport_EReference_importingNamespace->setDerived(false);
	m_packageImport_EReference_importingNamespace->setOrdered(false);
	m_packageImport_EReference_importingNamespace->setContainment(false);
	m_packageImport_EReference_importingNamespace->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_packageImport_EReference_importingNamespace->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getNamespace_EReference_packageImport();
		if (otherEnd != nullptr)
	    {
	   		m_packageImport_EReference_importingNamespace->setEOpposite(otherEnd);
	    }
	}
	
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setName("public_or_private");
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setLowerBound(0);
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setUpperBound(1);
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setUnique(true);
	m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_packageImport_EOperation_public_or_private_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePackageMergeContent()
{
	m_packageMerge_EClass->setName("PackageMerge");
	m_packageMerge_EClass->setAbstract(false);
	m_packageMerge_EClass->setInterface(false);
	
	
	m_packageMerge_EReference_mergedPackage->setName("mergedPackage");
	m_packageMerge_EReference_mergedPackage->setEType(getPackage_EClass());
	m_packageMerge_EReference_mergedPackage->setLowerBound(1);
	m_packageMerge_EReference_mergedPackage->setUpperBound(1);
	m_packageMerge_EReference_mergedPackage->setTransient(false);
	m_packageMerge_EReference_mergedPackage->setVolatile(false);
	m_packageMerge_EReference_mergedPackage->setChangeable(true);
	m_packageMerge_EReference_mergedPackage->setUnsettable(false);
	m_packageMerge_EReference_mergedPackage->setUnique(true);
	m_packageMerge_EReference_mergedPackage->setDerived(false);
	m_packageMerge_EReference_mergedPackage->setOrdered(false);
	m_packageMerge_EReference_mergedPackage->setContainment(false);
	m_packageMerge_EReference_mergedPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_packageMerge_EReference_mergedPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_packageMerge_EReference_mergedPackage->setEOpposite(otherEnd);
	    }
	}
	m_packageMerge_EReference_receivingPackage->setName("receivingPackage");
	m_packageMerge_EReference_receivingPackage->setEType(getPackage_EClass());
	m_packageMerge_EReference_receivingPackage->setLowerBound(1);
	m_packageMerge_EReference_receivingPackage->setUpperBound(1);
	m_packageMerge_EReference_receivingPackage->setTransient(false);
	m_packageMerge_EReference_receivingPackage->setVolatile(false);
	m_packageMerge_EReference_receivingPackage->setChangeable(true);
	m_packageMerge_EReference_receivingPackage->setUnsettable(false);
	m_packageMerge_EReference_receivingPackage->setUnique(true);
	m_packageMerge_EReference_receivingPackage->setDerived(false);
	m_packageMerge_EReference_receivingPackage->setOrdered(false);
	m_packageMerge_EReference_receivingPackage->setContainment(false);
	m_packageMerge_EReference_receivingPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_packageMerge_EReference_receivingPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_packageMerge();
		if (otherEnd != nullptr)
	    {
	   		m_packageMerge_EReference_receivingPackage->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializePackageableElementContent()
{
	m_packageableElement_EClass->setName("PackageableElement");
	m_packageableElement_EClass->setAbstract(true);
	m_packageableElement_EClass->setInterface(false);
	
	
	m_packageableElement_EReference_owningPackage->setName("owningPackage");
	m_packageableElement_EReference_owningPackage->setEType(getPackage_EClass());
	m_packageableElement_EReference_owningPackage->setLowerBound(0);
	m_packageableElement_EReference_owningPackage->setUpperBound(1);
	m_packageableElement_EReference_owningPackage->setTransient(false);
	m_packageableElement_EReference_owningPackage->setVolatile(false);
	m_packageableElement_EReference_owningPackage->setChangeable(true);
	m_packageableElement_EReference_owningPackage->setUnsettable(false);
	m_packageableElement_EReference_owningPackage->setUnique(true);
	m_packageableElement_EReference_owningPackage->setDerived(false);
	m_packageableElement_EReference_owningPackage->setOrdered(true);
	m_packageableElement_EReference_owningPackage->setContainment(false);
	m_packageableElement_EReference_owningPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_packageableElement_EReference_owningPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_packagedElement();
		if (otherEnd != nullptr)
	    {
	   		m_packageableElement_EReference_owningPackage->setEOpposite(otherEnd);
	    }
	}
	
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setName("namespace_needs_visibility");
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setLowerBound(0);
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setUpperBound(1);
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setUnique(true);
	m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_packageableElement_EOperation_namespace_needs_visibility_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeParameterContent()
{
	m_parameter_EClass->setName("Parameter");
	m_parameter_EClass->setAbstract(false);
	m_parameter_EClass->setInterface(false);
	
	m_parameter_EAttribute_default = getParameter_EAttribute_default();
	m_parameter_EAttribute_default->setName("default");
	m_parameter_EAttribute_default->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_parameter_EAttribute_default->setLowerBound(0);
	m_parameter_EAttribute_default->setUpperBound(1);
	m_parameter_EAttribute_default->setTransient(true);
	m_parameter_EAttribute_default->setVolatile(true);
	m_parameter_EAttribute_default->setChangeable(true);
	m_parameter_EAttribute_default->setUnsettable(true);
	m_parameter_EAttribute_default->setUnique(true);
	m_parameter_EAttribute_default->setDerived(true);
	m_parameter_EAttribute_default->setOrdered(false);
	m_parameter_EAttribute_default->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_parameter_EAttribute_default->setDefaultValueLiteral(defaultValue);
		}
	}
	m_parameter_EAttribute_direction = getParameter_EAttribute_direction();
	m_parameter_EAttribute_direction->setName("direction");
	m_parameter_EAttribute_direction->setEType(getParameterDirectionKind_EEnum());
	m_parameter_EAttribute_direction->setLowerBound(1);
	m_parameter_EAttribute_direction->setUpperBound(1);
	m_parameter_EAttribute_direction->setTransient(false);
	m_parameter_EAttribute_direction->setVolatile(false);
	m_parameter_EAttribute_direction->setChangeable(true);
	m_parameter_EAttribute_direction->setUnsettable(false);
	m_parameter_EAttribute_direction->setUnique(true);
	m_parameter_EAttribute_direction->setDerived(false);
	m_parameter_EAttribute_direction->setOrdered(false);
	m_parameter_EAttribute_direction->setID(false);
	{
		std::string defaultValue = "in";
		if (!defaultValue.empty())
		{
		   m_parameter_EAttribute_direction->setDefaultValueLiteral(defaultValue);
		}
	}
	m_parameter_EAttribute_effect = getParameter_EAttribute_effect();
	m_parameter_EAttribute_effect->setName("effect");
	m_parameter_EAttribute_effect->setEType(getParameterEffectKind_EEnum());
	m_parameter_EAttribute_effect->setLowerBound(0);
	m_parameter_EAttribute_effect->setUpperBound(1);
	m_parameter_EAttribute_effect->setTransient(false);
	m_parameter_EAttribute_effect->setVolatile(false);
	m_parameter_EAttribute_effect->setChangeable(true);
	m_parameter_EAttribute_effect->setUnsettable(true);
	m_parameter_EAttribute_effect->setUnique(true);
	m_parameter_EAttribute_effect->setDerived(false);
	m_parameter_EAttribute_effect->setOrdered(false);
	m_parameter_EAttribute_effect->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_parameter_EAttribute_effect->setDefaultValueLiteral(defaultValue);
		}
	}
	m_parameter_EAttribute_isException = getParameter_EAttribute_isException();
	m_parameter_EAttribute_isException->setName("isException");
	m_parameter_EAttribute_isException->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_parameter_EAttribute_isException->setLowerBound(1);
	m_parameter_EAttribute_isException->setUpperBound(1);
	m_parameter_EAttribute_isException->setTransient(false);
	m_parameter_EAttribute_isException->setVolatile(false);
	m_parameter_EAttribute_isException->setChangeable(true);
	m_parameter_EAttribute_isException->setUnsettable(false);
	m_parameter_EAttribute_isException->setUnique(true);
	m_parameter_EAttribute_isException->setDerived(false);
	m_parameter_EAttribute_isException->setOrdered(false);
	m_parameter_EAttribute_isException->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_parameter_EAttribute_isException->setDefaultValueLiteral(defaultValue);
		}
	}
	m_parameter_EAttribute_isStream = getParameter_EAttribute_isStream();
	m_parameter_EAttribute_isStream->setName("isStream");
	m_parameter_EAttribute_isStream->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_parameter_EAttribute_isStream->setLowerBound(1);
	m_parameter_EAttribute_isStream->setUpperBound(1);
	m_parameter_EAttribute_isStream->setTransient(false);
	m_parameter_EAttribute_isStream->setVolatile(false);
	m_parameter_EAttribute_isStream->setChangeable(true);
	m_parameter_EAttribute_isStream->setUnsettable(false);
	m_parameter_EAttribute_isStream->setUnique(true);
	m_parameter_EAttribute_isStream->setDerived(false);
	m_parameter_EAttribute_isStream->setOrdered(false);
	m_parameter_EAttribute_isStream->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_parameter_EAttribute_isStream->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_parameter_EReference_behavior->setName("behavior");
	m_parameter_EReference_behavior->setEType(getBehavior_EClass());
	m_parameter_EReference_behavior->setLowerBound(0);
	m_parameter_EReference_behavior->setUpperBound(1);
	m_parameter_EReference_behavior->setTransient(false);
	m_parameter_EReference_behavior->setVolatile(false);
	m_parameter_EReference_behavior->setChangeable(true);
	m_parameter_EReference_behavior->setUnsettable(false);
	m_parameter_EReference_behavior->setUnique(true);
	m_parameter_EReference_behavior->setDerived(false);
	m_parameter_EReference_behavior->setOrdered(true);
	m_parameter_EReference_behavior->setContainment(false);
	m_parameter_EReference_behavior->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameter_EReference_behavior->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavior_EReference_ownedParameter();
		if (otherEnd != nullptr)
	    {
	   		m_parameter_EReference_behavior->setEOpposite(otherEnd);
	    }
	}
	m_parameter_EReference_defaultValue->setName("defaultValue");
	m_parameter_EReference_defaultValue->setEType(getValueSpecification_EClass());
	m_parameter_EReference_defaultValue->setLowerBound(0);
	m_parameter_EReference_defaultValue->setUpperBound(1);
	m_parameter_EReference_defaultValue->setTransient(false);
	m_parameter_EReference_defaultValue->setVolatile(false);
	m_parameter_EReference_defaultValue->setChangeable(true);
	m_parameter_EReference_defaultValue->setUnsettable(false);
	m_parameter_EReference_defaultValue->setUnique(true);
	m_parameter_EReference_defaultValue->setDerived(false);
	m_parameter_EReference_defaultValue->setOrdered(false);
	m_parameter_EReference_defaultValue->setContainment(true);
	m_parameter_EReference_defaultValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameter_EReference_defaultValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_parameter_EReference_defaultValue->setEOpposite(otherEnd);
	    }
	}
	m_parameter_EReference_operation->setName("operation");
	m_parameter_EReference_operation->setEType(getOperation_EClass());
	m_parameter_EReference_operation->setLowerBound(0);
	m_parameter_EReference_operation->setUpperBound(1);
	m_parameter_EReference_operation->setTransient(true);
	m_parameter_EReference_operation->setVolatile(true);
	m_parameter_EReference_operation->setChangeable(false);
	m_parameter_EReference_operation->setUnsettable(false);
	m_parameter_EReference_operation->setUnique(true);
	m_parameter_EReference_operation->setDerived(false);
	m_parameter_EReference_operation->setOrdered(false);
	m_parameter_EReference_operation->setContainment(false);
	m_parameter_EReference_operation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameter_EReference_operation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getBehavioralFeature_EReference_ownedParameter();
		if (otherEnd != nullptr)
	    {
	   		m_parameter_EReference_operation->setEOpposite(otherEnd);
	    }
	}
	m_parameter_EReference_parameterSet->setName("parameterSet");
	m_parameter_EReference_parameterSet->setEType(getParameterSet_EClass());
	m_parameter_EReference_parameterSet->setLowerBound(0);
	m_parameter_EReference_parameterSet->setUpperBound(-1);
	m_parameter_EReference_parameterSet->setTransient(false);
	m_parameter_EReference_parameterSet->setVolatile(false);
	m_parameter_EReference_parameterSet->setChangeable(true);
	m_parameter_EReference_parameterSet->setUnsettable(false);
	m_parameter_EReference_parameterSet->setUnique(true);
	m_parameter_EReference_parameterSet->setDerived(false);
	m_parameter_EReference_parameterSet->setOrdered(false);
	m_parameter_EReference_parameterSet->setContainment(false);
	m_parameter_EReference_parameterSet->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameter_EReference_parameterSet->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameterSet_EReference_parameter();
		if (otherEnd != nullptr)
	    {
	   		m_parameter_EReference_parameterSet->setEOpposite(otherEnd);
	    }
	}
	
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setName("connector_end");
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_connector_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_connector_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_connector_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setName("in_and_out");
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_in_and_out_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_isSetDefault->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_parameter_EOperation_isSetDefault->setName("isSetDefault");
	m_parameter_EOperation_isSetDefault->setLowerBound(1);
	m_parameter_EOperation_isSetDefault->setUpperBound(1);
	m_parameter_EOperation_isSetDefault->setUnique(true);
	m_parameter_EOperation_isSetDefault->setOrdered(false);
	
	
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setName("not_exception");
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_not_exception_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_not_exception_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_not_exception_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setName("object_effect");
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_object_effect_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_object_effect_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_object_effect_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setName("reentrant_behaviors");
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_reentrant_behaviors_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setEType(nullptr);
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setName("setBooleanDefaultValue");
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setLowerBound(1);
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setUpperBound(1);
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setUnique(true);
	m_parameter_EOperation_setBooleanDefaultValue_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_setBooleanDefaultValue_Boolean);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setEType(nullptr);
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setName("setIntegerDefaultValue");
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setLowerBound(1);
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setUpperBound(1);
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setUnique(true);
	m_parameter_EOperation_setIntegerDefaultValue_Integer->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_setIntegerDefaultValue_Integer);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_setNullDefaultValue->setEType(nullptr);
	m_parameter_EOperation_setNullDefaultValue->setName("setNullDefaultValue");
	m_parameter_EOperation_setNullDefaultValue->setLowerBound(1);
	m_parameter_EOperation_setNullDefaultValue->setUpperBound(1);
	m_parameter_EOperation_setNullDefaultValue->setUnique(true);
	m_parameter_EOperation_setNullDefaultValue->setOrdered(false);
	
	
	m_parameter_EOperation_setRealDefaultValue_Real->setEType(nullptr);
	m_parameter_EOperation_setRealDefaultValue_Real->setName("setRealDefaultValue");
	m_parameter_EOperation_setRealDefaultValue_Real->setLowerBound(1);
	m_parameter_EOperation_setRealDefaultValue_Real->setUpperBound(1);
	m_parameter_EOperation_setRealDefaultValue_Real->setUnique(true);
	m_parameter_EOperation_setRealDefaultValue_Real->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_setRealDefaultValue_Real);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_setStringDefaultValue_String->setEType(nullptr);
	m_parameter_EOperation_setStringDefaultValue_String->setName("setStringDefaultValue");
	m_parameter_EOperation_setStringDefaultValue_String->setLowerBound(1);
	m_parameter_EOperation_setStringDefaultValue_String->setUpperBound(1);
	m_parameter_EOperation_setStringDefaultValue_String->setUnique(true);
	m_parameter_EOperation_setStringDefaultValue_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_setStringDefaultValue_String);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setEType(nullptr);
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setLowerBound(1);
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setUpperBound(1);
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setUnique(true);
	m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setName("stream_and_exception");
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setUnique(true);
	m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameter_EOperation_stream_and_exception_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameter_EOperation_unsetDefault->setEType(nullptr);
	m_parameter_EOperation_unsetDefault->setName("unsetDefault");
	m_parameter_EOperation_unsetDefault->setLowerBound(1);
	m_parameter_EOperation_unsetDefault->setUpperBound(1);
	m_parameter_EOperation_unsetDefault->setUnique(true);
	m_parameter_EOperation_unsetDefault->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeParameterSetContent()
{
	m_parameterSet_EClass->setName("ParameterSet");
	m_parameterSet_EClass->setAbstract(false);
	m_parameterSet_EClass->setInterface(false);
	
	
	m_parameterSet_EReference_condition->setName("condition");
	m_parameterSet_EReference_condition->setEType(getConstraint_EClass());
	m_parameterSet_EReference_condition->setLowerBound(0);
	m_parameterSet_EReference_condition->setUpperBound(-1);
	m_parameterSet_EReference_condition->setTransient(false);
	m_parameterSet_EReference_condition->setVolatile(false);
	m_parameterSet_EReference_condition->setChangeable(true);
	m_parameterSet_EReference_condition->setUnsettable(false);
	m_parameterSet_EReference_condition->setUnique(true);
	m_parameterSet_EReference_condition->setDerived(false);
	m_parameterSet_EReference_condition->setOrdered(false);
	m_parameterSet_EReference_condition->setContainment(true);
	m_parameterSet_EReference_condition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameterSet_EReference_condition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_parameterSet_EReference_condition->setEOpposite(otherEnd);
	    }
	}
	m_parameterSet_EReference_parameter->setName("parameter");
	m_parameterSet_EReference_parameter->setEType(getParameter_EClass());
	m_parameterSet_EReference_parameter->setLowerBound(1);
	m_parameterSet_EReference_parameter->setUpperBound(-1);
	m_parameterSet_EReference_parameter->setTransient(false);
	m_parameterSet_EReference_parameter->setVolatile(false);
	m_parameterSet_EReference_parameter->setChangeable(true);
	m_parameterSet_EReference_parameter->setUnsettable(false);
	m_parameterSet_EReference_parameter->setUnique(true);
	m_parameterSet_EReference_parameter->setDerived(false);
	m_parameterSet_EReference_parameter->setOrdered(false);
	m_parameterSet_EReference_parameter->setContainment(false);
	m_parameterSet_EReference_parameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameterSet_EReference_parameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameter_EReference_parameterSet();
		if (otherEnd != nullptr)
	    {
	   		m_parameterSet_EReference_parameter->setEOpposite(otherEnd);
	    }
	}
	
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setName("input");
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setUnique(true);
	m_parameterSet_EOperation_input_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_input_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_input_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setName("same_parameterized_entity");
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setUnique(true);
	m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_same_parameterized_entity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setName("two_parameter_sets");
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setLowerBound(0);
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setUpperBound(1);
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setUnique(true);
	m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterSet_EOperation_two_parameter_sets_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeParameterableElementContent()
{
	m_parameterableElement_EClass->setName("ParameterableElement");
	m_parameterableElement_EClass->setAbstract(true);
	m_parameterableElement_EClass->setInterface(false);
	
	
	m_parameterableElement_EReference_owningTemplateParameter->setName("owningTemplateParameter");
	m_parameterableElement_EReference_owningTemplateParameter->setEType(getTemplateParameter_EClass());
	m_parameterableElement_EReference_owningTemplateParameter->setLowerBound(0);
	m_parameterableElement_EReference_owningTemplateParameter->setUpperBound(1);
	m_parameterableElement_EReference_owningTemplateParameter->setTransient(false);
	m_parameterableElement_EReference_owningTemplateParameter->setVolatile(false);
	m_parameterableElement_EReference_owningTemplateParameter->setChangeable(true);
	m_parameterableElement_EReference_owningTemplateParameter->setUnsettable(false);
	m_parameterableElement_EReference_owningTemplateParameter->setUnique(true);
	m_parameterableElement_EReference_owningTemplateParameter->setDerived(false);
	m_parameterableElement_EReference_owningTemplateParameter->setOrdered(false);
	m_parameterableElement_EReference_owningTemplateParameter->setContainment(false);
	m_parameterableElement_EReference_owningTemplateParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameterableElement_EReference_owningTemplateParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateParameter_EReference_ownedParameteredElement();
		if (otherEnd != nullptr)
	    {
	   		m_parameterableElement_EReference_owningTemplateParameter->setEOpposite(otherEnd);
	    }
	}
	m_parameterableElement_EReference_templateParameter->setName("templateParameter");
	m_parameterableElement_EReference_templateParameter->setEType(getTemplateParameter_EClass());
	m_parameterableElement_EReference_templateParameter->setLowerBound(0);
	m_parameterableElement_EReference_templateParameter->setUpperBound(1);
	m_parameterableElement_EReference_templateParameter->setTransient(false);
	m_parameterableElement_EReference_templateParameter->setVolatile(false);
	m_parameterableElement_EReference_templateParameter->setChangeable(true);
	m_parameterableElement_EReference_templateParameter->setUnsettable(false);
	m_parameterableElement_EReference_templateParameter->setUnique(true);
	m_parameterableElement_EReference_templateParameter->setDerived(false);
	m_parameterableElement_EReference_templateParameter->setOrdered(false);
	m_parameterableElement_EReference_templateParameter->setContainment(false);
	m_parameterableElement_EReference_templateParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_parameterableElement_EReference_templateParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateParameter_EReference_parameteredElement();
		if (otherEnd != nullptr)
	    {
	   		m_parameterableElement_EReference_templateParameter->setEOpposite(otherEnd);
	    }
	}
	
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setName("isCompatibleWith");
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setLowerBound(1);
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setUpperBound(1);
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setUnique(true);
	m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_parameterableElement_EOperation_isCompatibleWith_ParameterableElement);
		parameter->setName("p");
		parameter->setEType(getParameterableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_parameterableElement_EOperation_isTemplateParameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_parameterableElement_EOperation_isTemplateParameter->setName("isTemplateParameter");
	m_parameterableElement_EOperation_isTemplateParameter->setLowerBound(1);
	m_parameterableElement_EOperation_isTemplateParameter->setUpperBound(1);
	m_parameterableElement_EOperation_isTemplateParameter->setUnique(true);
	m_parameterableElement_EOperation_isTemplateParameter->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializePartDecompositionContent()
{
	m_partDecomposition_EClass->setName("PartDecomposition");
	m_partDecomposition_EClass->setAbstract(false);
	m_partDecomposition_EClass->setInterface(false);
	
	
	
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setName("assume");
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setLowerBound(0);
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setUpperBound(1);
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setUnique(true);
	m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_assume_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setName("commutativity_of_decomposition");
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setLowerBound(0);
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setUpperBound(1);
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setUnique(true);
	m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_commutativity_of_decomposition_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setName("parts_of_internal_structures");
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setLowerBound(0);
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setUpperBound(1);
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setUnique(true);
	m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_partDecomposition_EOperation_parts_of_internal_structures_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePinContent()
{
	m_pin_EClass->setName("Pin");
	m_pin_EClass->setAbstract(true);
	m_pin_EClass->setInterface(false);
	
	m_pin_EAttribute_isControl = getPin_EAttribute_isControl();
	m_pin_EAttribute_isControl->setName("isControl");
	m_pin_EAttribute_isControl->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_pin_EAttribute_isControl->setLowerBound(1);
	m_pin_EAttribute_isControl->setUpperBound(1);
	m_pin_EAttribute_isControl->setTransient(false);
	m_pin_EAttribute_isControl->setVolatile(false);
	m_pin_EAttribute_isControl->setChangeable(true);
	m_pin_EAttribute_isControl->setUnsettable(false);
	m_pin_EAttribute_isControl->setUnique(true);
	m_pin_EAttribute_isControl->setDerived(false);
	m_pin_EAttribute_isControl->setOrdered(false);
	m_pin_EAttribute_isControl->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_pin_EAttribute_isControl->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setName("control_pins");
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setLowerBound(0);
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setUpperBound(1);
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setUnique(true);
	m_pin_EOperation_control_pins_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pin_EOperation_control_pins_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pin_EOperation_control_pins_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setName("not_unique");
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setLowerBound(0);
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setUpperBound(1);
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setUnique(true);
	m_pin_EOperation_not_unique_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pin_EOperation_not_unique_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pin_EOperation_not_unique_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePortContent()
{
	m_port_EClass->setName("Port");
	m_port_EClass->setAbstract(false);
	m_port_EClass->setInterface(false);
	
	m_port_EAttribute_isBehavior = getPort_EAttribute_isBehavior();
	m_port_EAttribute_isBehavior->setName("isBehavior");
	m_port_EAttribute_isBehavior->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_port_EAttribute_isBehavior->setLowerBound(1);
	m_port_EAttribute_isBehavior->setUpperBound(1);
	m_port_EAttribute_isBehavior->setTransient(false);
	m_port_EAttribute_isBehavior->setVolatile(false);
	m_port_EAttribute_isBehavior->setChangeable(true);
	m_port_EAttribute_isBehavior->setUnsettable(false);
	m_port_EAttribute_isBehavior->setUnique(true);
	m_port_EAttribute_isBehavior->setDerived(false);
	m_port_EAttribute_isBehavior->setOrdered(false);
	m_port_EAttribute_isBehavior->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_port_EAttribute_isBehavior->setDefaultValueLiteral(defaultValue);
		}
	}
	m_port_EAttribute_isConjugated = getPort_EAttribute_isConjugated();
	m_port_EAttribute_isConjugated->setName("isConjugated");
	m_port_EAttribute_isConjugated->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_port_EAttribute_isConjugated->setLowerBound(1);
	m_port_EAttribute_isConjugated->setUpperBound(1);
	m_port_EAttribute_isConjugated->setTransient(false);
	m_port_EAttribute_isConjugated->setVolatile(false);
	m_port_EAttribute_isConjugated->setChangeable(true);
	m_port_EAttribute_isConjugated->setUnsettable(false);
	m_port_EAttribute_isConjugated->setUnique(true);
	m_port_EAttribute_isConjugated->setDerived(false);
	m_port_EAttribute_isConjugated->setOrdered(false);
	m_port_EAttribute_isConjugated->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_port_EAttribute_isConjugated->setDefaultValueLiteral(defaultValue);
		}
	}
	m_port_EAttribute_isService = getPort_EAttribute_isService();
	m_port_EAttribute_isService->setName("isService");
	m_port_EAttribute_isService->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_port_EAttribute_isService->setLowerBound(1);
	m_port_EAttribute_isService->setUpperBound(1);
	m_port_EAttribute_isService->setTransient(false);
	m_port_EAttribute_isService->setVolatile(false);
	m_port_EAttribute_isService->setChangeable(true);
	m_port_EAttribute_isService->setUnsettable(false);
	m_port_EAttribute_isService->setUnique(true);
	m_port_EAttribute_isService->setDerived(false);
	m_port_EAttribute_isService->setOrdered(false);
	m_port_EAttribute_isService->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_port_EAttribute_isService->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_port_EReference_protocol->setName("protocol");
	m_port_EReference_protocol->setEType(getProtocolStateMachine_EClass());
	m_port_EReference_protocol->setLowerBound(0);
	m_port_EReference_protocol->setUpperBound(1);
	m_port_EReference_protocol->setTransient(false);
	m_port_EReference_protocol->setVolatile(false);
	m_port_EReference_protocol->setChangeable(true);
	m_port_EReference_protocol->setUnsettable(false);
	m_port_EReference_protocol->setUnique(true);
	m_port_EReference_protocol->setDerived(false);
	m_port_EReference_protocol->setOrdered(false);
	m_port_EReference_protocol->setContainment(false);
	m_port_EReference_protocol->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_port_EReference_protocol->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_port_EReference_protocol->setEOpposite(otherEnd);
	    }
	}
	m_port_EReference_provided->setName("provided");
	m_port_EReference_provided->setEType(getInterface_EClass());
	m_port_EReference_provided->setLowerBound(0);
	m_port_EReference_provided->setUpperBound(-1);
	m_port_EReference_provided->setTransient(true);
	m_port_EReference_provided->setVolatile(true);
	m_port_EReference_provided->setChangeable(false);
	m_port_EReference_provided->setUnsettable(false);
	m_port_EReference_provided->setUnique(true);
	m_port_EReference_provided->setDerived(true);
	m_port_EReference_provided->setOrdered(false);
	m_port_EReference_provided->setContainment(false);
	m_port_EReference_provided->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_port_EReference_provided->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_port_EReference_provided->setEOpposite(otherEnd);
	    }
	}
	m_port_EReference_redefinedPort->setName("redefinedPort");
	m_port_EReference_redefinedPort->setEType(getPort_EClass());
	m_port_EReference_redefinedPort->setLowerBound(0);
	m_port_EReference_redefinedPort->setUpperBound(-1);
	m_port_EReference_redefinedPort->setTransient(false);
	m_port_EReference_redefinedPort->setVolatile(false);
	m_port_EReference_redefinedPort->setChangeable(true);
	m_port_EReference_redefinedPort->setUnsettable(false);
	m_port_EReference_redefinedPort->setUnique(true);
	m_port_EReference_redefinedPort->setDerived(false);
	m_port_EReference_redefinedPort->setOrdered(false);
	m_port_EReference_redefinedPort->setContainment(false);
	m_port_EReference_redefinedPort->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_port_EReference_redefinedPort->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_port_EReference_redefinedPort->setEOpposite(otherEnd);
	    }
	}
	m_port_EReference_required->setName("required");
	m_port_EReference_required->setEType(getInterface_EClass());
	m_port_EReference_required->setLowerBound(0);
	m_port_EReference_required->setUpperBound(-1);
	m_port_EReference_required->setTransient(true);
	m_port_EReference_required->setVolatile(true);
	m_port_EReference_required->setChangeable(false);
	m_port_EReference_required->setUnsettable(false);
	m_port_EReference_required->setUnique(true);
	m_port_EReference_required->setDerived(true);
	m_port_EReference_required->setOrdered(false);
	m_port_EReference_required->setContainment(false);
	m_port_EReference_required->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_port_EReference_required->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_port_EReference_required->setEOpposite(otherEnd);
	    }
	}
	
	m_port_EOperation_basicProvided->setEType(getInterface_EClass());
	m_port_EOperation_basicProvided->setName("basicProvided");
	m_port_EOperation_basicProvided->setLowerBound(0);
	m_port_EOperation_basicProvided->setUpperBound(-1);
	m_port_EOperation_basicProvided->setUnique(true);
	m_port_EOperation_basicProvided->setOrdered(false);
	
	
	m_port_EOperation_basicRequired->setEType(getInterface_EClass());
	m_port_EOperation_basicRequired->setName("basicRequired");
	m_port_EOperation_basicRequired->setLowerBound(0);
	m_port_EOperation_basicRequired->setUpperBound(-1);
	m_port_EOperation_basicRequired->setUnique(true);
	m_port_EOperation_basicRequired->setOrdered(false);
	
	
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setName("default_value");
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setUnique(true);
	m_port_EOperation_default_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_default_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_default_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setName("encapsulated_owner");
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setLowerBound(0);
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setUpperBound(1);
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setUnique(true);
	m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_encapsulated_owner_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_port_EOperation_getProvideds->setEType(getInterface_EClass());
	m_port_EOperation_getProvideds->setName("getProvideds");
	m_port_EOperation_getProvideds->setLowerBound(0);
	m_port_EOperation_getProvideds->setUpperBound(-1);
	m_port_EOperation_getProvideds->setUnique(true);
	m_port_EOperation_getProvideds->setOrdered(false);
	
	
	m_port_EOperation_getRequireds->setEType(getInterface_EClass());
	m_port_EOperation_getRequireds->setName("getRequireds");
	m_port_EOperation_getRequireds->setLowerBound(0);
	m_port_EOperation_getRequireds->setUpperBound(-1);
	m_port_EOperation_getRequireds->setUnique(true);
	m_port_EOperation_getRequireds->setOrdered(false);
	
	
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setName("port_aggregation");
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setLowerBound(0);
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setUpperBound(1);
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setUnique(true);
	m_port_EOperation_port_aggregation_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_port_aggregation_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_port_EOperation_port_aggregation_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePrimitiveTypeContent()
{
	m_primitiveType_EClass->setName("PrimitiveType");
	m_primitiveType_EClass->setAbstract(false);
	m_primitiveType_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeProfileContent()
{
	m_profile_EClass->setName("Profile");
	m_profile_EClass->setAbstract(false);
	m_profile_EClass->setInterface(false);
	
	
	m_profile_EReference_metaclassReference->setName("metaclassReference");
	m_profile_EReference_metaclassReference->setEType(getElementImport_EClass());
	m_profile_EReference_metaclassReference->setLowerBound(0);
	m_profile_EReference_metaclassReference->setUpperBound(-1);
	m_profile_EReference_metaclassReference->setTransient(false);
	m_profile_EReference_metaclassReference->setVolatile(false);
	m_profile_EReference_metaclassReference->setChangeable(true);
	m_profile_EReference_metaclassReference->setUnsettable(false);
	m_profile_EReference_metaclassReference->setUnique(true);
	m_profile_EReference_metaclassReference->setDerived(false);
	m_profile_EReference_metaclassReference->setOrdered(false);
	m_profile_EReference_metaclassReference->setContainment(false);
	m_profile_EReference_metaclassReference->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_profile_EReference_metaclassReference->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_profile_EReference_metaclassReference->setEOpposite(otherEnd);
	    }
	}
	m_profile_EReference_metamodelReference->setName("metamodelReference");
	m_profile_EReference_metamodelReference->setEType(getPackageImport_EClass());
	m_profile_EReference_metamodelReference->setLowerBound(0);
	m_profile_EReference_metamodelReference->setUpperBound(-1);
	m_profile_EReference_metamodelReference->setTransient(false);
	m_profile_EReference_metamodelReference->setVolatile(false);
	m_profile_EReference_metamodelReference->setChangeable(true);
	m_profile_EReference_metamodelReference->setUnsettable(false);
	m_profile_EReference_metamodelReference->setUnique(true);
	m_profile_EReference_metamodelReference->setDerived(false);
	m_profile_EReference_metamodelReference->setOrdered(false);
	m_profile_EReference_metamodelReference->setContainment(false);
	m_profile_EReference_metamodelReference->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_profile_EReference_metamodelReference->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_profile_EReference_metamodelReference->setEOpposite(otherEnd);
	    }
	}
	
	m_profile_EOperation_create_Classifier->setEType(ecore::EcorePackage::eInstance()->getEObject_EClass());
	m_profile_EOperation_create_Classifier->setName("create");
	m_profile_EOperation_create_Classifier->setLowerBound(1);
	m_profile_EOperation_create_Classifier->setUpperBound(1);
	m_profile_EOperation_create_Classifier->setUnique(true);
	m_profile_EOperation_create_Classifier->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_create_Classifier);
		parameter->setName("classifier");
		parameter->setEType(getClassifier_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_profile_EOperation_define->setEType(ecore::EcorePackage::eInstance()->getEPackage_EClass());
	m_profile_EOperation_define->setName("define");
	m_profile_EOperation_define->setLowerBound(0);
	m_profile_EOperation_define->setUpperBound(1);
	m_profile_EOperation_define->setUnique(true);
	m_profile_EOperation_define->setOrdered(false);
	
	
	m_profile_EOperation_define_EMap_EMap->setEType(ecore::EcorePackage::eInstance()->getEPackage_EClass());
	m_profile_EOperation_define_EMap_EMap->setName("define");
	m_profile_EOperation_define_EMap_EMap->setLowerBound(1);
	m_profile_EOperation_define_EMap_EMap->setUpperBound(1);
	m_profile_EOperation_define_EMap_EMap->setUnique(true);
	m_profile_EOperation_define_EMap_EMap->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_define_EMap_EMap);
		parameter->setName("options");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_define_EMap_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_define_EMap_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_profile_EOperation_getDefinition->setEType(ecore::EcorePackage::eInstance()->getEPackage_EClass());
	m_profile_EOperation_getDefinition->setName("getDefinition");
	m_profile_EOperation_getDefinition->setLowerBound(0);
	m_profile_EOperation_getDefinition->setUpperBound(1);
	m_profile_EOperation_getDefinition->setUnique(true);
	m_profile_EOperation_getDefinition->setOrdered(false);
	
	
	m_profile_EOperation_getDefinition_NamedElement->setEType(ecore::EcorePackage::eInstance()->getENamedElement_EClass());
	m_profile_EOperation_getDefinition_NamedElement->setName("getDefinition");
	m_profile_EOperation_getDefinition_NamedElement->setLowerBound(0);
	m_profile_EOperation_getDefinition_NamedElement->setUpperBound(1);
	m_profile_EOperation_getDefinition_NamedElement->setUnique(true);
	m_profile_EOperation_getDefinition_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_getDefinition_NamedElement);
		parameter->setName("namedElement");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_profile_EOperation_getOwnedExtensions_Boolean->setEType(getExtension_EClass());
	m_profile_EOperation_getOwnedExtensions_Boolean->setName("getOwnedExtensions");
	m_profile_EOperation_getOwnedExtensions_Boolean->setLowerBound(0);
	m_profile_EOperation_getOwnedExtensions_Boolean->setUpperBound(-1);
	m_profile_EOperation_getOwnedExtensions_Boolean->setUnique(true);
	m_profile_EOperation_getOwnedExtensions_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_getOwnedExtensions_Boolean);
		parameter->setName("requiredOnly");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_profile_EOperation_getReferencedMetaclasses->setEType(getClass_EClass());
	m_profile_EOperation_getReferencedMetaclasses->setName("getReferencedMetaclasses");
	m_profile_EOperation_getReferencedMetaclasses->setLowerBound(0);
	m_profile_EOperation_getReferencedMetaclasses->setUpperBound(-1);
	m_profile_EOperation_getReferencedMetaclasses->setUnique(true);
	m_profile_EOperation_getReferencedMetaclasses->setOrdered(false);
	
	
	m_profile_EOperation_getReferencedMetamodels->setEType(getModel_EClass());
	m_profile_EOperation_getReferencedMetamodels->setName("getReferencedMetamodels");
	m_profile_EOperation_getReferencedMetamodels->setLowerBound(0);
	m_profile_EOperation_getReferencedMetamodels->setUpperBound(-1);
	m_profile_EOperation_getReferencedMetamodels->setUnique(true);
	m_profile_EOperation_getReferencedMetamodels->setOrdered(false);
	
	
	m_profile_EOperation_isDefined->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_profile_EOperation_isDefined->setName("isDefined");
	m_profile_EOperation_isDefined->setLowerBound(1);
	m_profile_EOperation_isDefined->setUpperBound(1);
	m_profile_EOperation_isDefined->setUnique(true);
	m_profile_EOperation_isDefined->setOrdered(false);
	
	
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setName("metaclass_reference_not_specialized");
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setLowerBound(0);
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setUpperBound(1);
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setUnique(true);
	m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_metaclass_reference_not_specialized_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setName("references_same_metamodel");
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setLowerBound(0);
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setUpperBound(1);
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setUnique(true);
	m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profile_EOperation_references_same_metamodel_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeProfileApplicationContent()
{
	m_profileApplication_EClass->setName("ProfileApplication");
	m_profileApplication_EClass->setAbstract(false);
	m_profileApplication_EClass->setInterface(false);
	
	m_profileApplication_EAttribute_isStrict = getProfileApplication_EAttribute_isStrict();
	m_profileApplication_EAttribute_isStrict->setName("isStrict");
	m_profileApplication_EAttribute_isStrict->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_profileApplication_EAttribute_isStrict->setLowerBound(1);
	m_profileApplication_EAttribute_isStrict->setUpperBound(1);
	m_profileApplication_EAttribute_isStrict->setTransient(false);
	m_profileApplication_EAttribute_isStrict->setVolatile(false);
	m_profileApplication_EAttribute_isStrict->setChangeable(true);
	m_profileApplication_EAttribute_isStrict->setUnsettable(false);
	m_profileApplication_EAttribute_isStrict->setUnique(true);
	m_profileApplication_EAttribute_isStrict->setDerived(false);
	m_profileApplication_EAttribute_isStrict->setOrdered(false);
	m_profileApplication_EAttribute_isStrict->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_profileApplication_EAttribute_isStrict->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_profileApplication_EReference_appliedProfile->setName("appliedProfile");
	m_profileApplication_EReference_appliedProfile->setEType(getProfile_EClass());
	m_profileApplication_EReference_appliedProfile->setLowerBound(1);
	m_profileApplication_EReference_appliedProfile->setUpperBound(1);
	m_profileApplication_EReference_appliedProfile->setTransient(false);
	m_profileApplication_EReference_appliedProfile->setVolatile(false);
	m_profileApplication_EReference_appliedProfile->setChangeable(true);
	m_profileApplication_EReference_appliedProfile->setUnsettable(false);
	m_profileApplication_EReference_appliedProfile->setUnique(true);
	m_profileApplication_EReference_appliedProfile->setDerived(false);
	m_profileApplication_EReference_appliedProfile->setOrdered(false);
	m_profileApplication_EReference_appliedProfile->setContainment(false);
	m_profileApplication_EReference_appliedProfile->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_profileApplication_EReference_appliedProfile->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_profileApplication_EReference_appliedProfile->setEOpposite(otherEnd);
	    }
	}
	m_profileApplication_EReference_applyingPackage->setName("applyingPackage");
	m_profileApplication_EReference_applyingPackage->setEType(getPackage_EClass());
	m_profileApplication_EReference_applyingPackage->setLowerBound(1);
	m_profileApplication_EReference_applyingPackage->setUpperBound(1);
	m_profileApplication_EReference_applyingPackage->setTransient(false);
	m_profileApplication_EReference_applyingPackage->setVolatile(false);
	m_profileApplication_EReference_applyingPackage->setChangeable(true);
	m_profileApplication_EReference_applyingPackage->setUnsettable(false);
	m_profileApplication_EReference_applyingPackage->setUnique(true);
	m_profileApplication_EReference_applyingPackage->setDerived(false);
	m_profileApplication_EReference_applyingPackage->setOrdered(false);
	m_profileApplication_EReference_applyingPackage->setContainment(false);
	m_profileApplication_EReference_applyingPackage->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_profileApplication_EReference_applyingPackage->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_profileApplication();
		if (otherEnd != nullptr)
	    {
	   		m_profileApplication_EReference_applyingPackage->setEOpposite(otherEnd);
	    }
	}
	
	m_profileApplication_EOperation_getAppliedDefinition->setEType(ecore::EcorePackage::eInstance()->getEPackage_EClass());
	m_profileApplication_EOperation_getAppliedDefinition->setName("getAppliedDefinition");
	m_profileApplication_EOperation_getAppliedDefinition->setLowerBound(0);
	m_profileApplication_EOperation_getAppliedDefinition->setUpperBound(1);
	m_profileApplication_EOperation_getAppliedDefinition->setUnique(true);
	m_profileApplication_EOperation_getAppliedDefinition->setOrdered(false);
	
	
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setEType(ecore::EcorePackage::eInstance()->getENamedElement_EClass());
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setName("getAppliedDefinition");
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setLowerBound(0);
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setUpperBound(1);
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setUnique(true);
	m_profileApplication_EOperation_getAppliedDefinition_NamedElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_profileApplication_EOperation_getAppliedDefinition_NamedElement);
		parameter->setName("namedElement");
		parameter->setEType(getNamedElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePropertyContent()
{
	m_property_EClass->setName("Property");
	m_property_EClass->setAbstract(false);
	m_property_EClass->setInterface(false);
	
	m_property_EAttribute_aggregation = getProperty_EAttribute_aggregation();
	m_property_EAttribute_aggregation->setName("aggregation");
	m_property_EAttribute_aggregation->setEType(getAggregationKind_EEnum());
	m_property_EAttribute_aggregation->setLowerBound(1);
	m_property_EAttribute_aggregation->setUpperBound(1);
	m_property_EAttribute_aggregation->setTransient(false);
	m_property_EAttribute_aggregation->setVolatile(false);
	m_property_EAttribute_aggregation->setChangeable(true);
	m_property_EAttribute_aggregation->setUnsettable(false);
	m_property_EAttribute_aggregation->setUnique(true);
	m_property_EAttribute_aggregation->setDerived(false);
	m_property_EAttribute_aggregation->setOrdered(false);
	m_property_EAttribute_aggregation->setID(false);
	{
		std::string defaultValue = "none";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_aggregation->setDefaultValueLiteral(defaultValue);
		}
	}
	m_property_EAttribute_default = getProperty_EAttribute_default();
	m_property_EAttribute_default->setName("default");
	m_property_EAttribute_default->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_property_EAttribute_default->setLowerBound(0);
	m_property_EAttribute_default->setUpperBound(1);
	m_property_EAttribute_default->setTransient(true);
	m_property_EAttribute_default->setVolatile(true);
	m_property_EAttribute_default->setChangeable(true);
	m_property_EAttribute_default->setUnsettable(true);
	m_property_EAttribute_default->setUnique(true);
	m_property_EAttribute_default->setDerived(true);
	m_property_EAttribute_default->setOrdered(false);
	m_property_EAttribute_default->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_default->setDefaultValueLiteral(defaultValue);
		}
	}
	m_property_EAttribute_isComposite = getProperty_EAttribute_isComposite();
	m_property_EAttribute_isComposite->setName("isComposite");
	m_property_EAttribute_isComposite->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EAttribute_isComposite->setLowerBound(1);
	m_property_EAttribute_isComposite->setUpperBound(1);
	m_property_EAttribute_isComposite->setTransient(true);
	m_property_EAttribute_isComposite->setVolatile(true);
	m_property_EAttribute_isComposite->setChangeable(true);
	m_property_EAttribute_isComposite->setUnsettable(false);
	m_property_EAttribute_isComposite->setUnique(true);
	m_property_EAttribute_isComposite->setDerived(true);
	m_property_EAttribute_isComposite->setOrdered(false);
	m_property_EAttribute_isComposite->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_isComposite->setDefaultValueLiteral(defaultValue);
		}
	}
	m_property_EAttribute_isDerived = getProperty_EAttribute_isDerived();
	m_property_EAttribute_isDerived->setName("isDerived");
	m_property_EAttribute_isDerived->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EAttribute_isDerived->setLowerBound(1);
	m_property_EAttribute_isDerived->setUpperBound(1);
	m_property_EAttribute_isDerived->setTransient(false);
	m_property_EAttribute_isDerived->setVolatile(false);
	m_property_EAttribute_isDerived->setChangeable(true);
	m_property_EAttribute_isDerived->setUnsettable(false);
	m_property_EAttribute_isDerived->setUnique(true);
	m_property_EAttribute_isDerived->setDerived(false);
	m_property_EAttribute_isDerived->setOrdered(false);
	m_property_EAttribute_isDerived->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_isDerived->setDefaultValueLiteral(defaultValue);
		}
	}
	m_property_EAttribute_isDerivedUnion = getProperty_EAttribute_isDerivedUnion();
	m_property_EAttribute_isDerivedUnion->setName("isDerivedUnion");
	m_property_EAttribute_isDerivedUnion->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EAttribute_isDerivedUnion->setLowerBound(1);
	m_property_EAttribute_isDerivedUnion->setUpperBound(1);
	m_property_EAttribute_isDerivedUnion->setTransient(false);
	m_property_EAttribute_isDerivedUnion->setVolatile(false);
	m_property_EAttribute_isDerivedUnion->setChangeable(true);
	m_property_EAttribute_isDerivedUnion->setUnsettable(false);
	m_property_EAttribute_isDerivedUnion->setUnique(true);
	m_property_EAttribute_isDerivedUnion->setDerived(false);
	m_property_EAttribute_isDerivedUnion->setOrdered(false);
	m_property_EAttribute_isDerivedUnion->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_isDerivedUnion->setDefaultValueLiteral(defaultValue);
		}
	}
	m_property_EAttribute_isID = getProperty_EAttribute_isID();
	m_property_EAttribute_isID->setName("isID");
	m_property_EAttribute_isID->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EAttribute_isID->setLowerBound(1);
	m_property_EAttribute_isID->setUpperBound(1);
	m_property_EAttribute_isID->setTransient(false);
	m_property_EAttribute_isID->setVolatile(false);
	m_property_EAttribute_isID->setChangeable(true);
	m_property_EAttribute_isID->setUnsettable(false);
	m_property_EAttribute_isID->setUnique(true);
	m_property_EAttribute_isID->setDerived(false);
	m_property_EAttribute_isID->setOrdered(false);
	m_property_EAttribute_isID->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_property_EAttribute_isID->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_property_EReference_association->setName("association");
	m_property_EReference_association->setEType(getAssociation_EClass());
	m_property_EReference_association->setLowerBound(0);
	m_property_EReference_association->setUpperBound(1);
	m_property_EReference_association->setTransient(false);
	m_property_EReference_association->setVolatile(false);
	m_property_EReference_association->setChangeable(true);
	m_property_EReference_association->setUnsettable(false);
	m_property_EReference_association->setUnique(true);
	m_property_EReference_association->setDerived(false);
	m_property_EReference_association->setOrdered(false);
	m_property_EReference_association->setContainment(false);
	m_property_EReference_association->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_association->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getAssociation_EReference_memberEnd();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_association->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_associationEnd->setName("associationEnd");
	m_property_EReference_associationEnd->setEType(getProperty_EClass());
	m_property_EReference_associationEnd->setLowerBound(0);
	m_property_EReference_associationEnd->setUpperBound(1);
	m_property_EReference_associationEnd->setTransient(false);
	m_property_EReference_associationEnd->setVolatile(false);
	m_property_EReference_associationEnd->setChangeable(true);
	m_property_EReference_associationEnd->setUnsettable(false);
	m_property_EReference_associationEnd->setUnique(true);
	m_property_EReference_associationEnd->setDerived(false);
	m_property_EReference_associationEnd->setOrdered(false);
	m_property_EReference_associationEnd->setContainment(false);
	m_property_EReference_associationEnd->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_associationEnd->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_qualifier();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_associationEnd->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_class->setName("class");
	m_property_EReference_class->setEType(getClass_EClass());
	m_property_EReference_class->setLowerBound(0);
	m_property_EReference_class->setUpperBound(1);
	m_property_EReference_class->setTransient(true);
	m_property_EReference_class->setVolatile(true);
	m_property_EReference_class->setChangeable(true);
	m_property_EReference_class->setUnsettable(false);
	m_property_EReference_class->setUnique(true);
	m_property_EReference_class->setDerived(false);
	m_property_EReference_class->setOrdered(false);
	m_property_EReference_class->setContainment(false);
	m_property_EReference_class->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_class->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStructuredClassifier_EReference_ownedAttribute();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_class->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_datatype->setName("datatype");
	m_property_EReference_datatype->setEType(getDataType_EClass());
	m_property_EReference_datatype->setLowerBound(0);
	m_property_EReference_datatype->setUpperBound(1);
	m_property_EReference_datatype->setTransient(false);
	m_property_EReference_datatype->setVolatile(false);
	m_property_EReference_datatype->setChangeable(true);
	m_property_EReference_datatype->setUnsettable(false);
	m_property_EReference_datatype->setUnique(true);
	m_property_EReference_datatype->setDerived(false);
	m_property_EReference_datatype->setOrdered(false);
	m_property_EReference_datatype->setContainment(false);
	m_property_EReference_datatype->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_datatype->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getDataType_EReference_ownedAttribute();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_datatype->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_defaultValue->setName("defaultValue");
	m_property_EReference_defaultValue->setEType(getValueSpecification_EClass());
	m_property_EReference_defaultValue->setLowerBound(0);
	m_property_EReference_defaultValue->setUpperBound(1);
	m_property_EReference_defaultValue->setTransient(false);
	m_property_EReference_defaultValue->setVolatile(false);
	m_property_EReference_defaultValue->setChangeable(true);
	m_property_EReference_defaultValue->setUnsettable(false);
	m_property_EReference_defaultValue->setUnique(true);
	m_property_EReference_defaultValue->setDerived(false);
	m_property_EReference_defaultValue->setOrdered(false);
	m_property_EReference_defaultValue->setContainment(true);
	m_property_EReference_defaultValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_defaultValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_defaultValue->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_interface->setName("interface");
	m_property_EReference_interface->setEType(getInterface_EClass());
	m_property_EReference_interface->setLowerBound(0);
	m_property_EReference_interface->setUpperBound(1);
	m_property_EReference_interface->setTransient(false);
	m_property_EReference_interface->setVolatile(false);
	m_property_EReference_interface->setChangeable(true);
	m_property_EReference_interface->setUnsettable(false);
	m_property_EReference_interface->setUnique(true);
	m_property_EReference_interface->setDerived(false);
	m_property_EReference_interface->setOrdered(false);
	m_property_EReference_interface->setContainment(false);
	m_property_EReference_interface->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_interface->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInterface_EReference_ownedAttribute();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_interface->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_opposite->setName("opposite");
	m_property_EReference_opposite->setEType(getProperty_EClass());
	m_property_EReference_opposite->setLowerBound(0);
	m_property_EReference_opposite->setUpperBound(1);
	m_property_EReference_opposite->setTransient(true);
	m_property_EReference_opposite->setVolatile(true);
	m_property_EReference_opposite->setChangeable(true);
	m_property_EReference_opposite->setUnsettable(false);
	m_property_EReference_opposite->setUnique(true);
	m_property_EReference_opposite->setDerived(true);
	m_property_EReference_opposite->setOrdered(false);
	m_property_EReference_opposite->setContainment(false);
	m_property_EReference_opposite->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_opposite->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_opposite->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_owningAssociation->setName("owningAssociation");
	m_property_EReference_owningAssociation->setEType(getAssociation_EClass());
	m_property_EReference_owningAssociation->setLowerBound(0);
	m_property_EReference_owningAssociation->setUpperBound(1);
	m_property_EReference_owningAssociation->setTransient(false);
	m_property_EReference_owningAssociation->setVolatile(false);
	m_property_EReference_owningAssociation->setChangeable(true);
	m_property_EReference_owningAssociation->setUnsettable(false);
	m_property_EReference_owningAssociation->setUnique(true);
	m_property_EReference_owningAssociation->setDerived(false);
	m_property_EReference_owningAssociation->setOrdered(false);
	m_property_EReference_owningAssociation->setContainment(false);
	m_property_EReference_owningAssociation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_owningAssociation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getAssociation_EReference_ownedEnd();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_owningAssociation->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_qualifier->setName("qualifier");
	m_property_EReference_qualifier->setEType(getProperty_EClass());
	m_property_EReference_qualifier->setLowerBound(0);
	m_property_EReference_qualifier->setUpperBound(-1);
	m_property_EReference_qualifier->setTransient(false);
	m_property_EReference_qualifier->setVolatile(false);
	m_property_EReference_qualifier->setChangeable(true);
	m_property_EReference_qualifier->setUnsettable(false);
	m_property_EReference_qualifier->setUnique(true);
	m_property_EReference_qualifier->setDerived(false);
	m_property_EReference_qualifier->setOrdered(true);
	m_property_EReference_qualifier->setContainment(true);
	m_property_EReference_qualifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_qualifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_associationEnd();
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_qualifier->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_redefinedProperty->setName("redefinedProperty");
	m_property_EReference_redefinedProperty->setEType(getProperty_EClass());
	m_property_EReference_redefinedProperty->setLowerBound(0);
	m_property_EReference_redefinedProperty->setUpperBound(-1);
	m_property_EReference_redefinedProperty->setTransient(false);
	m_property_EReference_redefinedProperty->setVolatile(false);
	m_property_EReference_redefinedProperty->setChangeable(true);
	m_property_EReference_redefinedProperty->setUnsettable(false);
	m_property_EReference_redefinedProperty->setUnique(true);
	m_property_EReference_redefinedProperty->setDerived(false);
	m_property_EReference_redefinedProperty->setOrdered(false);
	m_property_EReference_redefinedProperty->setContainment(false);
	m_property_EReference_redefinedProperty->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_redefinedProperty->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_redefinedProperty->setEOpposite(otherEnd);
	    }
	}
	m_property_EReference_subsettedProperty->setName("subsettedProperty");
	m_property_EReference_subsettedProperty->setEType(getProperty_EClass());
	m_property_EReference_subsettedProperty->setLowerBound(0);
	m_property_EReference_subsettedProperty->setUpperBound(-1);
	m_property_EReference_subsettedProperty->setTransient(false);
	m_property_EReference_subsettedProperty->setVolatile(false);
	m_property_EReference_subsettedProperty->setChangeable(true);
	m_property_EReference_subsettedProperty->setUnsettable(false);
	m_property_EReference_subsettedProperty->setUnique(true);
	m_property_EReference_subsettedProperty->setDerived(false);
	m_property_EReference_subsettedProperty->setOrdered(false);
	m_property_EReference_subsettedProperty->setContainment(false);
	m_property_EReference_subsettedProperty->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_property_EReference_subsettedProperty->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_property_EReference_subsettedProperty->setEOpposite(otherEnd);
	    }
	}
	
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setName("binding_to_attribute");
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_binding_to_attribute_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setName("deployment_target");
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_deployment_target_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_deployment_target_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setName("derived_union_is_derived");
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_derived_union_is_derived_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setName("derived_union_is_read_only");
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_derived_union_is_read_only_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_getOpposite->setEType(getProperty_EClass());
	m_property_EOperation_getOpposite->setName("getOpposite");
	m_property_EOperation_getOpposite->setLowerBound(0);
	m_property_EOperation_getOpposite->setUpperBound(1);
	m_property_EOperation_getOpposite->setUnique(true);
	m_property_EOperation_getOpposite->setOrdered(false);
	
	
	m_property_EOperation_getOtherEnd->setEType(getProperty_EClass());
	m_property_EOperation_getOtherEnd->setName("getOtherEnd");
	m_property_EOperation_getOtherEnd->setLowerBound(0);
	m_property_EOperation_getOtherEnd->setUpperBound(1);
	m_property_EOperation_getOtherEnd->setUnique(true);
	m_property_EOperation_getOtherEnd->setOrdered(false);
	
	
	m_property_EOperation_isAttribute->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EOperation_isAttribute->setName("isAttribute");
	m_property_EOperation_isAttribute->setLowerBound(1);
	m_property_EOperation_isAttribute->setUpperBound(1);
	m_property_EOperation_isAttribute->setUnique(true);
	m_property_EOperation_isAttribute->setOrdered(false);
	
	
	m_property_EOperation_isComposite->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EOperation_isComposite->setName("isComposite");
	m_property_EOperation_isComposite->setLowerBound(1);
	m_property_EOperation_isComposite->setUpperBound(1);
	m_property_EOperation_isComposite->setUnique(true);
	m_property_EOperation_isComposite->setOrdered(false);
	
	
	m_property_EOperation_isNavigable->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EOperation_isNavigable->setName("isNavigable");
	m_property_EOperation_isNavigable->setLowerBound(1);
	m_property_EOperation_isNavigable->setUpperBound(1);
	m_property_EOperation_isNavigable->setUnique(true);
	m_property_EOperation_isNavigable->setOrdered(false);
	
	
	m_property_EOperation_isSetDefault->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_property_EOperation_isSetDefault->setName("isSetDefault");
	m_property_EOperation_isSetDefault->setLowerBound(1);
	m_property_EOperation_isSetDefault->setUpperBound(1);
	m_property_EOperation_isSetDefault->setUnique(true);
	m_property_EOperation_isSetDefault->setOrdered(false);
	
	
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setName("multiplicity_of_composite");
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_multiplicity_of_composite_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setName("qualified_is_association_end");
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_qualified_is_association_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setName("redefined_property_inherited");
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_redefined_property_inherited_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setBooleanDefaultValue_Boolean->setEType(nullptr);
	m_property_EOperation_setBooleanDefaultValue_Boolean->setName("setBooleanDefaultValue");
	m_property_EOperation_setBooleanDefaultValue_Boolean->setLowerBound(1);
	m_property_EOperation_setBooleanDefaultValue_Boolean->setUpperBound(1);
	m_property_EOperation_setBooleanDefaultValue_Boolean->setUnique(true);
	m_property_EOperation_setBooleanDefaultValue_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setBooleanDefaultValue_Boolean);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setIntegerDefaultValue_Integer->setEType(nullptr);
	m_property_EOperation_setIntegerDefaultValue_Integer->setName("setIntegerDefaultValue");
	m_property_EOperation_setIntegerDefaultValue_Integer->setLowerBound(1);
	m_property_EOperation_setIntegerDefaultValue_Integer->setUpperBound(1);
	m_property_EOperation_setIntegerDefaultValue_Integer->setUnique(true);
	m_property_EOperation_setIntegerDefaultValue_Integer->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setIntegerDefaultValue_Integer);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setIsNavigable_Boolean->setEType(nullptr);
	m_property_EOperation_setIsNavigable_Boolean->setName("setIsNavigable");
	m_property_EOperation_setIsNavigable_Boolean->setLowerBound(1);
	m_property_EOperation_setIsNavigable_Boolean->setUpperBound(1);
	m_property_EOperation_setIsNavigable_Boolean->setUnique(true);
	m_property_EOperation_setIsNavigable_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setIsNavigable_Boolean);
		parameter->setName("isNavigable");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setNullDefaultValue->setEType(nullptr);
	m_property_EOperation_setNullDefaultValue->setName("setNullDefaultValue");
	m_property_EOperation_setNullDefaultValue->setLowerBound(1);
	m_property_EOperation_setNullDefaultValue->setUpperBound(1);
	m_property_EOperation_setNullDefaultValue->setUnique(true);
	m_property_EOperation_setNullDefaultValue->setOrdered(false);
	
	
	m_property_EOperation_setRealDefaultValue_Real->setEType(nullptr);
	m_property_EOperation_setRealDefaultValue_Real->setName("setRealDefaultValue");
	m_property_EOperation_setRealDefaultValue_Real->setLowerBound(1);
	m_property_EOperation_setRealDefaultValue_Real->setUpperBound(1);
	m_property_EOperation_setRealDefaultValue_Real->setUnique(true);
	m_property_EOperation_setRealDefaultValue_Real->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setRealDefaultValue_Real);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setStringDefaultValue_String->setEType(nullptr);
	m_property_EOperation_setStringDefaultValue_String->setName("setStringDefaultValue");
	m_property_EOperation_setStringDefaultValue_String->setLowerBound(1);
	m_property_EOperation_setStringDefaultValue_String->setUpperBound(1);
	m_property_EOperation_setStringDefaultValue_String->setUnique(true);
	m_property_EOperation_setStringDefaultValue_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setStringDefaultValue_String);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setEType(nullptr);
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setLowerBound(1);
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setUpperBound(1);
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setUnique(true);
	m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_setUnlimitedNaturalDefaultValue_UnlimitedNatural);
		parameter->setName("value");
		parameter->setEType(nullptr);
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setName("subsetted_property_names");
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetted_property_names_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_subsettingContext->setEType(getType_EClass());
	m_property_EOperation_subsettingContext->setName("subsettingContext");
	m_property_EOperation_subsettingContext->setLowerBound(0);
	m_property_EOperation_subsettingContext->setUpperBound(-1);
	m_property_EOperation_subsettingContext->setUnique(true);
	m_property_EOperation_subsettingContext->setOrdered(false);
	
	
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setName("subsetting_context_conforms");
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetting_context_conforms_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setName("subsetting_rules");
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_subsetting_rules_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setName("type_of_opposite_end");
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setUnique(true);
	m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_property_EOperation_type_of_opposite_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_property_EOperation_unsetDefault->setEType(nullptr);
	m_property_EOperation_unsetDefault->setName("unsetDefault");
	m_property_EOperation_unsetDefault->setLowerBound(1);
	m_property_EOperation_unsetDefault->setUpperBound(1);
	m_property_EOperation_unsetDefault->setUnique(true);
	m_property_EOperation_unsetDefault->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeProtocolConformanceContent()
{
	m_protocolConformance_EClass->setName("ProtocolConformance");
	m_protocolConformance_EClass->setAbstract(false);
	m_protocolConformance_EClass->setInterface(false);
	
	
	m_protocolConformance_EReference_generalMachine->setName("generalMachine");
	m_protocolConformance_EReference_generalMachine->setEType(getProtocolStateMachine_EClass());
	m_protocolConformance_EReference_generalMachine->setLowerBound(1);
	m_protocolConformance_EReference_generalMachine->setUpperBound(1);
	m_protocolConformance_EReference_generalMachine->setTransient(false);
	m_protocolConformance_EReference_generalMachine->setVolatile(false);
	m_protocolConformance_EReference_generalMachine->setChangeable(true);
	m_protocolConformance_EReference_generalMachine->setUnsettable(false);
	m_protocolConformance_EReference_generalMachine->setUnique(true);
	m_protocolConformance_EReference_generalMachine->setDerived(false);
	m_protocolConformance_EReference_generalMachine->setOrdered(false);
	m_protocolConformance_EReference_generalMachine->setContainment(false);
	m_protocolConformance_EReference_generalMachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolConformance_EReference_generalMachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_protocolConformance_EReference_generalMachine->setEOpposite(otherEnd);
	    }
	}
	m_protocolConformance_EReference_specificMachine->setName("specificMachine");
	m_protocolConformance_EReference_specificMachine->setEType(getProtocolStateMachine_EClass());
	m_protocolConformance_EReference_specificMachine->setLowerBound(1);
	m_protocolConformance_EReference_specificMachine->setUpperBound(1);
	m_protocolConformance_EReference_specificMachine->setTransient(false);
	m_protocolConformance_EReference_specificMachine->setVolatile(false);
	m_protocolConformance_EReference_specificMachine->setChangeable(true);
	m_protocolConformance_EReference_specificMachine->setUnsettable(false);
	m_protocolConformance_EReference_specificMachine->setUnique(true);
	m_protocolConformance_EReference_specificMachine->setDerived(false);
	m_protocolConformance_EReference_specificMachine->setOrdered(false);
	m_protocolConformance_EReference_specificMachine->setContainment(false);
	m_protocolConformance_EReference_specificMachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolConformance_EReference_specificMachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProtocolStateMachine_EReference_conformance();
		if (otherEnd != nullptr)
	    {
	   		m_protocolConformance_EReference_specificMachine->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeProtocolStateMachineContent()
{
	m_protocolStateMachine_EClass->setName("ProtocolStateMachine");
	m_protocolStateMachine_EClass->setAbstract(false);
	m_protocolStateMachine_EClass->setInterface(false);
	
	
	m_protocolStateMachine_EReference_conformance->setName("conformance");
	m_protocolStateMachine_EReference_conformance->setEType(getProtocolConformance_EClass());
	m_protocolStateMachine_EReference_conformance->setLowerBound(0);
	m_protocolStateMachine_EReference_conformance->setUpperBound(-1);
	m_protocolStateMachine_EReference_conformance->setTransient(false);
	m_protocolStateMachine_EReference_conformance->setVolatile(false);
	m_protocolStateMachine_EReference_conformance->setChangeable(true);
	m_protocolStateMachine_EReference_conformance->setUnsettable(false);
	m_protocolStateMachine_EReference_conformance->setUnique(true);
	m_protocolStateMachine_EReference_conformance->setDerived(false);
	m_protocolStateMachine_EReference_conformance->setOrdered(false);
	m_protocolStateMachine_EReference_conformance->setContainment(true);
	m_protocolStateMachine_EReference_conformance->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolStateMachine_EReference_conformance->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProtocolConformance_EReference_specificMachine();
		if (otherEnd != nullptr)
	    {
	   		m_protocolStateMachine_EReference_conformance->setEOpposite(otherEnd);
	    }
	}
	
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setName("deep_or_shallow_history");
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setUnique(true);
	m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_deep_or_shallow_history_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setName("entry_exit_do");
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setUnique(true);
	m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_entry_exit_do_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setName("protocol_transitions");
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setUnique(true);
	m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolStateMachine_EOperation_protocol_transitions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeProtocolTransitionContent()
{
	m_protocolTransition_EClass->setName("ProtocolTransition");
	m_protocolTransition_EClass->setAbstract(false);
	m_protocolTransition_EClass->setInterface(false);
	
	
	m_protocolTransition_EReference_postCondition->setName("postCondition");
	m_protocolTransition_EReference_postCondition->setEType(getConstraint_EClass());
	m_protocolTransition_EReference_postCondition->setLowerBound(0);
	m_protocolTransition_EReference_postCondition->setUpperBound(1);
	m_protocolTransition_EReference_postCondition->setTransient(false);
	m_protocolTransition_EReference_postCondition->setVolatile(false);
	m_protocolTransition_EReference_postCondition->setChangeable(true);
	m_protocolTransition_EReference_postCondition->setUnsettable(false);
	m_protocolTransition_EReference_postCondition->setUnique(true);
	m_protocolTransition_EReference_postCondition->setDerived(false);
	m_protocolTransition_EReference_postCondition->setOrdered(false);
	m_protocolTransition_EReference_postCondition->setContainment(false);
	m_protocolTransition_EReference_postCondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolTransition_EReference_postCondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_protocolTransition_EReference_postCondition->setEOpposite(otherEnd);
	    }
	}
	m_protocolTransition_EReference_preCondition->setName("preCondition");
	m_protocolTransition_EReference_preCondition->setEType(getConstraint_EClass());
	m_protocolTransition_EReference_preCondition->setLowerBound(0);
	m_protocolTransition_EReference_preCondition->setUpperBound(1);
	m_protocolTransition_EReference_preCondition->setTransient(false);
	m_protocolTransition_EReference_preCondition->setVolatile(false);
	m_protocolTransition_EReference_preCondition->setChangeable(true);
	m_protocolTransition_EReference_preCondition->setUnsettable(false);
	m_protocolTransition_EReference_preCondition->setUnique(true);
	m_protocolTransition_EReference_preCondition->setDerived(false);
	m_protocolTransition_EReference_preCondition->setOrdered(false);
	m_protocolTransition_EReference_preCondition->setContainment(false);
	m_protocolTransition_EReference_preCondition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolTransition_EReference_preCondition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_protocolTransition_EReference_preCondition->setEOpposite(otherEnd);
	    }
	}
	m_protocolTransition_EReference_referred->setName("referred");
	m_protocolTransition_EReference_referred->setEType(getOperation_EClass());
	m_protocolTransition_EReference_referred->setLowerBound(0);
	m_protocolTransition_EReference_referred->setUpperBound(-1);
	m_protocolTransition_EReference_referred->setTransient(true);
	m_protocolTransition_EReference_referred->setVolatile(true);
	m_protocolTransition_EReference_referred->setChangeable(false);
	m_protocolTransition_EReference_referred->setUnsettable(false);
	m_protocolTransition_EReference_referred->setUnique(true);
	m_protocolTransition_EReference_referred->setDerived(true);
	m_protocolTransition_EReference_referred->setOrdered(false);
	m_protocolTransition_EReference_referred->setContainment(false);
	m_protocolTransition_EReference_referred->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_protocolTransition_EReference_referred->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_protocolTransition_EReference_referred->setEOpposite(otherEnd);
	    }
	}
	
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setName("associated_actions");
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setUnique(true);
	m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_associated_actions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setName("belongs_to_psm");
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setUnique(true);
	m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_belongs_to_psm_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_protocolTransition_EOperation_getReferreds->setEType(getOperation_EClass());
	m_protocolTransition_EOperation_getReferreds->setName("getReferreds");
	m_protocolTransition_EOperation_getReferreds->setLowerBound(0);
	m_protocolTransition_EOperation_getReferreds->setUpperBound(-1);
	m_protocolTransition_EOperation_getReferreds->setUnique(true);
	m_protocolTransition_EOperation_getReferreds->setOrdered(false);
	
	
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setName("refers_to_operation");
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setLowerBound(0);
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setUpperBound(1);
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setUnique(true);
	m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_protocolTransition_EOperation_refers_to_operation_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePseudostateContent()
{
	m_pseudostate_EClass->setName("Pseudostate");
	m_pseudostate_EClass->setAbstract(false);
	m_pseudostate_EClass->setInterface(false);
	
	m_pseudostate_EAttribute_kind = getPseudostate_EAttribute_kind();
	m_pseudostate_EAttribute_kind->setName("kind");
	m_pseudostate_EAttribute_kind->setEType(getPseudostateKind_EEnum());
	m_pseudostate_EAttribute_kind->setLowerBound(1);
	m_pseudostate_EAttribute_kind->setUpperBound(1);
	m_pseudostate_EAttribute_kind->setTransient(false);
	m_pseudostate_EAttribute_kind->setVolatile(false);
	m_pseudostate_EAttribute_kind->setChangeable(true);
	m_pseudostate_EAttribute_kind->setUnsettable(false);
	m_pseudostate_EAttribute_kind->setUnique(true);
	m_pseudostate_EAttribute_kind->setDerived(false);
	m_pseudostate_EAttribute_kind->setOrdered(false);
	m_pseudostate_EAttribute_kind->setID(false);
	{
		std::string defaultValue = "initial";
		if (!defaultValue.empty())
		{
		   m_pseudostate_EAttribute_kind->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_pseudostate_EReference_state->setName("state");
	m_pseudostate_EReference_state->setEType(getState_EClass());
	m_pseudostate_EReference_state->setLowerBound(0);
	m_pseudostate_EReference_state->setUpperBound(1);
	m_pseudostate_EReference_state->setTransient(false);
	m_pseudostate_EReference_state->setVolatile(false);
	m_pseudostate_EReference_state->setChangeable(true);
	m_pseudostate_EReference_state->setUnsettable(false);
	m_pseudostate_EReference_state->setUnique(true);
	m_pseudostate_EReference_state->setDerived(false);
	m_pseudostate_EReference_state->setOrdered(false);
	m_pseudostate_EReference_state->setContainment(false);
	m_pseudostate_EReference_state->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_pseudostate_EReference_state->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getState_EReference_connectionPoint();
		if (otherEnd != nullptr)
	    {
	   		m_pseudostate_EReference_state->setEOpposite(otherEnd);
	    }
	}
	m_pseudostate_EReference_stateMachine->setName("stateMachine");
	m_pseudostate_EReference_stateMachine->setEType(getStateMachine_EClass());
	m_pseudostate_EReference_stateMachine->setLowerBound(0);
	m_pseudostate_EReference_stateMachine->setUpperBound(1);
	m_pseudostate_EReference_stateMachine->setTransient(false);
	m_pseudostate_EReference_stateMachine->setVolatile(false);
	m_pseudostate_EReference_stateMachine->setChangeable(true);
	m_pseudostate_EReference_stateMachine->setUnsettable(false);
	m_pseudostate_EReference_stateMachine->setUnique(true);
	m_pseudostate_EReference_stateMachine->setDerived(false);
	m_pseudostate_EReference_stateMachine->setOrdered(false);
	m_pseudostate_EReference_stateMachine->setContainment(false);
	m_pseudostate_EReference_stateMachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_pseudostate_EReference_stateMachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStateMachine_EReference_connectionPoint();
		if (otherEnd != nullptr)
	    {
	   		m_pseudostate_EReference_stateMachine->setEOpposite(otherEnd);
	    }
	}
	
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setName("choice_vertex");
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_choice_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setName("fork_vertex");
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_fork_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setName("history_vertices");
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_history_vertices_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setName("initial_vertex");
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_initial_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setName("join_vertex");
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_join_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setName("junction_vertex");
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_junction_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setName("outgoing_from_initial");
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_outgoing_from_initial_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setName("transitions_incoming");
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_transitions_incoming_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setName("transitions_outgoing");
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setLowerBound(0);
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setUpperBound(1);
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setUnique(true);
	m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_pseudostate_EOperation_transitions_outgoing_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeQualifierValueContent()
{
	m_qualifierValue_EClass->setName("QualifierValue");
	m_qualifierValue_EClass->setAbstract(false);
	m_qualifierValue_EClass->setInterface(false);
	
	
	m_qualifierValue_EReference_qualifier->setName("qualifier");
	m_qualifierValue_EReference_qualifier->setEType(getProperty_EClass());
	m_qualifierValue_EReference_qualifier->setLowerBound(1);
	m_qualifierValue_EReference_qualifier->setUpperBound(1);
	m_qualifierValue_EReference_qualifier->setTransient(false);
	m_qualifierValue_EReference_qualifier->setVolatile(false);
	m_qualifierValue_EReference_qualifier->setChangeable(true);
	m_qualifierValue_EReference_qualifier->setUnsettable(false);
	m_qualifierValue_EReference_qualifier->setUnique(true);
	m_qualifierValue_EReference_qualifier->setDerived(false);
	m_qualifierValue_EReference_qualifier->setOrdered(false);
	m_qualifierValue_EReference_qualifier->setContainment(false);
	m_qualifierValue_EReference_qualifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_qualifierValue_EReference_qualifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_qualifierValue_EReference_qualifier->setEOpposite(otherEnd);
	    }
	}
	m_qualifierValue_EReference_value->setName("value");
	m_qualifierValue_EReference_value->setEType(getInputPin_EClass());
	m_qualifierValue_EReference_value->setLowerBound(1);
	m_qualifierValue_EReference_value->setUpperBound(1);
	m_qualifierValue_EReference_value->setTransient(false);
	m_qualifierValue_EReference_value->setVolatile(false);
	m_qualifierValue_EReference_value->setChangeable(true);
	m_qualifierValue_EReference_value->setUnsettable(false);
	m_qualifierValue_EReference_value->setUnique(true);
	m_qualifierValue_EReference_value->setDerived(false);
	m_qualifierValue_EReference_value->setOrdered(false);
	m_qualifierValue_EReference_value->setContainment(false);
	m_qualifierValue_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_qualifierValue_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_qualifierValue_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setName("multiplicity_of_qualifier");
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setUnique(true);
	m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setName("qualifier_attribute");
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setLowerBound(0);
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setUpperBound(1);
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setUnique(true);
	m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_qualifier_attribute_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setName("type_of_qualifier");
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setUnique(true);
	m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_qualifierValue_EOperation_type_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRaiseExceptionActionContent()
{
	m_raiseExceptionAction_EClass->setName("RaiseExceptionAction");
	m_raiseExceptionAction_EClass->setAbstract(false);
	m_raiseExceptionAction_EClass->setInterface(false);
	
	
	m_raiseExceptionAction_EReference_exception->setName("exception");
	m_raiseExceptionAction_EReference_exception->setEType(getInputPin_EClass());
	m_raiseExceptionAction_EReference_exception->setLowerBound(1);
	m_raiseExceptionAction_EReference_exception->setUpperBound(1);
	m_raiseExceptionAction_EReference_exception->setTransient(false);
	m_raiseExceptionAction_EReference_exception->setVolatile(false);
	m_raiseExceptionAction_EReference_exception->setChangeable(true);
	m_raiseExceptionAction_EReference_exception->setUnsettable(false);
	m_raiseExceptionAction_EReference_exception->setUnique(true);
	m_raiseExceptionAction_EReference_exception->setDerived(false);
	m_raiseExceptionAction_EReference_exception->setOrdered(false);
	m_raiseExceptionAction_EReference_exception->setContainment(true);
	m_raiseExceptionAction_EReference_exception->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_raiseExceptionAction_EReference_exception->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_raiseExceptionAction_EReference_exception->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeReadExtentActionContent()
{
	m_readExtentAction_EClass->setName("ReadExtentAction");
	m_readExtentAction_EClass->setAbstract(false);
	m_readExtentAction_EClass->setInterface(false);
	
	
	m_readExtentAction_EReference_classifier->setName("classifier");
	m_readExtentAction_EReference_classifier->setEType(getClassifier_EClass());
	m_readExtentAction_EReference_classifier->setLowerBound(1);
	m_readExtentAction_EReference_classifier->setUpperBound(1);
	m_readExtentAction_EReference_classifier->setTransient(false);
	m_readExtentAction_EReference_classifier->setVolatile(false);
	m_readExtentAction_EReference_classifier->setChangeable(true);
	m_readExtentAction_EReference_classifier->setUnsettable(false);
	m_readExtentAction_EReference_classifier->setUnique(true);
	m_readExtentAction_EReference_classifier->setDerived(false);
	m_readExtentAction_EReference_classifier->setOrdered(false);
	m_readExtentAction_EReference_classifier->setContainment(false);
	m_readExtentAction_EReference_classifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readExtentAction_EReference_classifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readExtentAction_EReference_classifier->setEOpposite(otherEnd);
	    }
	}
	m_readExtentAction_EReference_result->setName("result");
	m_readExtentAction_EReference_result->setEType(getOutputPin_EClass());
	m_readExtentAction_EReference_result->setLowerBound(1);
	m_readExtentAction_EReference_result->setUpperBound(1);
	m_readExtentAction_EReference_result->setTransient(false);
	m_readExtentAction_EReference_result->setVolatile(false);
	m_readExtentAction_EReference_result->setChangeable(true);
	m_readExtentAction_EReference_result->setUnsettable(false);
	m_readExtentAction_EReference_result->setUnique(true);
	m_readExtentAction_EReference_result->setDerived(false);
	m_readExtentAction_EReference_result->setOrdered(false);
	m_readExtentAction_EReference_result->setContainment(true);
	m_readExtentAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readExtentAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readExtentAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setName("multiplicity_of_result");
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readExtentAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setName("type_is_classifier");
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readExtentAction_EOperation_type_is_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadIsClassifiedObjectActionContent()
{
	m_readIsClassifiedObjectAction_EClass->setName("ReadIsClassifiedObjectAction");
	m_readIsClassifiedObjectAction_EClass->setAbstract(false);
	m_readIsClassifiedObjectAction_EClass->setInterface(false);
	
	m_readIsClassifiedObjectAction_EAttribute_isDirect = getReadIsClassifiedObjectAction_EAttribute_isDirect();
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setName("isDirect");
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setLowerBound(1);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setUpperBound(1);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setTransient(false);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setVolatile(false);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setChangeable(true);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setUnsettable(false);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setUnique(true);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setDerived(false);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setOrdered(false);
	m_readIsClassifiedObjectAction_EAttribute_isDirect->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_readIsClassifiedObjectAction_EAttribute_isDirect->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_readIsClassifiedObjectAction_EReference_classifier->setName("classifier");
	m_readIsClassifiedObjectAction_EReference_classifier->setEType(getClassifier_EClass());
	m_readIsClassifiedObjectAction_EReference_classifier->setLowerBound(1);
	m_readIsClassifiedObjectAction_EReference_classifier->setUpperBound(1);
	m_readIsClassifiedObjectAction_EReference_classifier->setTransient(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setVolatile(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setChangeable(true);
	m_readIsClassifiedObjectAction_EReference_classifier->setUnsettable(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setUnique(true);
	m_readIsClassifiedObjectAction_EReference_classifier->setDerived(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setOrdered(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setContainment(false);
	m_readIsClassifiedObjectAction_EReference_classifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readIsClassifiedObjectAction_EReference_classifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readIsClassifiedObjectAction_EReference_classifier->setEOpposite(otherEnd);
	    }
	}
	m_readIsClassifiedObjectAction_EReference_object->setName("object");
	m_readIsClassifiedObjectAction_EReference_object->setEType(getInputPin_EClass());
	m_readIsClassifiedObjectAction_EReference_object->setLowerBound(1);
	m_readIsClassifiedObjectAction_EReference_object->setUpperBound(1);
	m_readIsClassifiedObjectAction_EReference_object->setTransient(false);
	m_readIsClassifiedObjectAction_EReference_object->setVolatile(false);
	m_readIsClassifiedObjectAction_EReference_object->setChangeable(true);
	m_readIsClassifiedObjectAction_EReference_object->setUnsettable(false);
	m_readIsClassifiedObjectAction_EReference_object->setUnique(true);
	m_readIsClassifiedObjectAction_EReference_object->setDerived(false);
	m_readIsClassifiedObjectAction_EReference_object->setOrdered(false);
	m_readIsClassifiedObjectAction_EReference_object->setContainment(true);
	m_readIsClassifiedObjectAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readIsClassifiedObjectAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readIsClassifiedObjectAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_readIsClassifiedObjectAction_EReference_result->setName("result");
	m_readIsClassifiedObjectAction_EReference_result->setEType(getOutputPin_EClass());
	m_readIsClassifiedObjectAction_EReference_result->setLowerBound(1);
	m_readIsClassifiedObjectAction_EReference_result->setUpperBound(1);
	m_readIsClassifiedObjectAction_EReference_result->setTransient(false);
	m_readIsClassifiedObjectAction_EReference_result->setVolatile(false);
	m_readIsClassifiedObjectAction_EReference_result->setChangeable(true);
	m_readIsClassifiedObjectAction_EReference_result->setUnsettable(false);
	m_readIsClassifiedObjectAction_EReference_result->setUnique(true);
	m_readIsClassifiedObjectAction_EReference_result->setDerived(false);
	m_readIsClassifiedObjectAction_EReference_result->setOrdered(false);
	m_readIsClassifiedObjectAction_EReference_result->setContainment(true);
	m_readIsClassifiedObjectAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readIsClassifiedObjectAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readIsClassifiedObjectAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setName("boolean_result");
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setUnique(true);
	m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_boolean_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setName("multiplicity_of_input");
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setLowerBound(0);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setUpperBound(1);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setUnique(true);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_multiplicity_of_input_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setName("multiplicity_of_output");
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setLowerBound(0);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setUpperBound(1);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setUnique(true);
	m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_multiplicity_of_output_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setName("no_type");
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setUnique(true);
	m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readIsClassifiedObjectAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadLinkActionContent()
{
	m_readLinkAction_EClass->setName("ReadLinkAction");
	m_readLinkAction_EClass->setAbstract(false);
	m_readLinkAction_EClass->setInterface(false);
	
	
	m_readLinkAction_EReference_result->setName("result");
	m_readLinkAction_EReference_result->setEType(getOutputPin_EClass());
	m_readLinkAction_EReference_result->setLowerBound(1);
	m_readLinkAction_EReference_result->setUpperBound(1);
	m_readLinkAction_EReference_result->setTransient(false);
	m_readLinkAction_EReference_result->setVolatile(false);
	m_readLinkAction_EReference_result->setChangeable(true);
	m_readLinkAction_EReference_result->setUnsettable(false);
	m_readLinkAction_EReference_result->setUnique(true);
	m_readLinkAction_EReference_result->setDerived(false);
	m_readLinkAction_EReference_result->setOrdered(false);
	m_readLinkAction_EReference_result->setContainment(true);
	m_readLinkAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setName("compatible_multiplicity");
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setName("navigable_open_end");
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_navigable_open_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setName("one_open_end");
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_one_open_end_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkAction_EOperation_openEnd->setEType(getProperty_EClass());
	m_readLinkAction_EOperation_openEnd->setName("openEnd");
	m_readLinkAction_EOperation_openEnd->setLowerBound(0);
	m_readLinkAction_EOperation_openEnd->setUpperBound(-1);
	m_readLinkAction_EOperation_openEnd->setUnique(true);
	m_readLinkAction_EOperation_openEnd->setOrdered(true);
	
	
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setName("type_and_ordering");
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setName("visibility");
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkAction_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadLinkObjectEndActionContent()
{
	m_readLinkObjectEndAction_EClass->setName("ReadLinkObjectEndAction");
	m_readLinkObjectEndAction_EClass->setAbstract(false);
	m_readLinkObjectEndAction_EClass->setInterface(false);
	
	
	m_readLinkObjectEndAction_EReference_end->setName("end");
	m_readLinkObjectEndAction_EReference_end->setEType(getProperty_EClass());
	m_readLinkObjectEndAction_EReference_end->setLowerBound(1);
	m_readLinkObjectEndAction_EReference_end->setUpperBound(1);
	m_readLinkObjectEndAction_EReference_end->setTransient(false);
	m_readLinkObjectEndAction_EReference_end->setVolatile(false);
	m_readLinkObjectEndAction_EReference_end->setChangeable(true);
	m_readLinkObjectEndAction_EReference_end->setUnsettable(false);
	m_readLinkObjectEndAction_EReference_end->setUnique(true);
	m_readLinkObjectEndAction_EReference_end->setDerived(false);
	m_readLinkObjectEndAction_EReference_end->setOrdered(false);
	m_readLinkObjectEndAction_EReference_end->setContainment(false);
	m_readLinkObjectEndAction_EReference_end->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndAction_EReference_end->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndAction_EReference_end->setEOpposite(otherEnd);
	    }
	}
	m_readLinkObjectEndAction_EReference_object->setName("object");
	m_readLinkObjectEndAction_EReference_object->setEType(getInputPin_EClass());
	m_readLinkObjectEndAction_EReference_object->setLowerBound(1);
	m_readLinkObjectEndAction_EReference_object->setUpperBound(1);
	m_readLinkObjectEndAction_EReference_object->setTransient(false);
	m_readLinkObjectEndAction_EReference_object->setVolatile(false);
	m_readLinkObjectEndAction_EReference_object->setChangeable(true);
	m_readLinkObjectEndAction_EReference_object->setUnsettable(false);
	m_readLinkObjectEndAction_EReference_object->setUnique(true);
	m_readLinkObjectEndAction_EReference_object->setDerived(false);
	m_readLinkObjectEndAction_EReference_object->setOrdered(false);
	m_readLinkObjectEndAction_EReference_object->setContainment(true);
	m_readLinkObjectEndAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_readLinkObjectEndAction_EReference_result->setName("result");
	m_readLinkObjectEndAction_EReference_result->setEType(getOutputPin_EClass());
	m_readLinkObjectEndAction_EReference_result->setLowerBound(1);
	m_readLinkObjectEndAction_EReference_result->setUpperBound(1);
	m_readLinkObjectEndAction_EReference_result->setTransient(false);
	m_readLinkObjectEndAction_EReference_result->setVolatile(false);
	m_readLinkObjectEndAction_EReference_result->setChangeable(true);
	m_readLinkObjectEndAction_EReference_result->setUnsettable(false);
	m_readLinkObjectEndAction_EReference_result->setUnique(true);
	m_readLinkObjectEndAction_EReference_result->setDerived(false);
	m_readLinkObjectEndAction_EReference_result->setOrdered(false);
	m_readLinkObjectEndAction_EReference_result->setContainment(true);
	m_readLinkObjectEndAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setName("association_of_association");
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_association_of_association_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setName("ends_of_association");
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_ends_of_association_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setName("multiplicity_of_object");
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setName("multiplicity_of_result");
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setName("property");
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_property_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setName("type_of_object");
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setName("type_of_result");
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadLinkObjectEndQualifierActionContent()
{
	m_readLinkObjectEndQualifierAction_EClass->setName("ReadLinkObjectEndQualifierAction");
	m_readLinkObjectEndQualifierAction_EClass->setAbstract(false);
	m_readLinkObjectEndQualifierAction_EClass->setInterface(false);
	
	
	m_readLinkObjectEndQualifierAction_EReference_object->setName("object");
	m_readLinkObjectEndQualifierAction_EReference_object->setEType(getInputPin_EClass());
	m_readLinkObjectEndQualifierAction_EReference_object->setLowerBound(1);
	m_readLinkObjectEndQualifierAction_EReference_object->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EReference_object->setTransient(false);
	m_readLinkObjectEndQualifierAction_EReference_object->setVolatile(false);
	m_readLinkObjectEndQualifierAction_EReference_object->setChangeable(true);
	m_readLinkObjectEndQualifierAction_EReference_object->setUnsettable(false);
	m_readLinkObjectEndQualifierAction_EReference_object->setUnique(true);
	m_readLinkObjectEndQualifierAction_EReference_object->setDerived(false);
	m_readLinkObjectEndQualifierAction_EReference_object->setOrdered(false);
	m_readLinkObjectEndQualifierAction_EReference_object->setContainment(true);
	m_readLinkObjectEndQualifierAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndQualifierAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndQualifierAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setName("qualifier");
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setEType(getProperty_EClass());
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setLowerBound(1);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setTransient(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setVolatile(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setChangeable(true);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setUnsettable(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setUnique(true);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setDerived(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setOrdered(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setContainment(false);
	m_readLinkObjectEndQualifierAction_EReference_qualifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndQualifierAction_EReference_qualifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndQualifierAction_EReference_qualifier->setEOpposite(otherEnd);
	    }
	}
	m_readLinkObjectEndQualifierAction_EReference_result->setName("result");
	m_readLinkObjectEndQualifierAction_EReference_result->setEType(getOutputPin_EClass());
	m_readLinkObjectEndQualifierAction_EReference_result->setLowerBound(1);
	m_readLinkObjectEndQualifierAction_EReference_result->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EReference_result->setTransient(false);
	m_readLinkObjectEndQualifierAction_EReference_result->setVolatile(false);
	m_readLinkObjectEndQualifierAction_EReference_result->setChangeable(true);
	m_readLinkObjectEndQualifierAction_EReference_result->setUnsettable(false);
	m_readLinkObjectEndQualifierAction_EReference_result->setUnique(true);
	m_readLinkObjectEndQualifierAction_EReference_result->setDerived(false);
	m_readLinkObjectEndQualifierAction_EReference_result->setOrdered(false);
	m_readLinkObjectEndQualifierAction_EReference_result->setContainment(true);
	m_readLinkObjectEndQualifierAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readLinkObjectEndQualifierAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readLinkObjectEndQualifierAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setName("association_of_association");
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_association_of_association_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setName("ends_of_association");
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_ends_of_association_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setName("multiplicity_of_object");
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setName("multiplicity_of_qualifier");
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_qualifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setName("multiplicity_of_result");
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setName("qualifier_attribute");
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_qualifier_attribute_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setName("same_type");
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_same_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setName("type_of_object");
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readLinkObjectEndQualifierAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadSelfActionContent()
{
	m_readSelfAction_EClass->setName("ReadSelfAction");
	m_readSelfAction_EClass->setAbstract(false);
	m_readSelfAction_EClass->setInterface(false);
	
	
	m_readSelfAction_EReference_result->setName("result");
	m_readSelfAction_EReference_result->setEType(getOutputPin_EClass());
	m_readSelfAction_EReference_result->setLowerBound(1);
	m_readSelfAction_EReference_result->setUpperBound(1);
	m_readSelfAction_EReference_result->setTransient(false);
	m_readSelfAction_EReference_result->setVolatile(false);
	m_readSelfAction_EReference_result->setChangeable(true);
	m_readSelfAction_EReference_result->setUnsettable(false);
	m_readSelfAction_EReference_result->setUnique(true);
	m_readSelfAction_EReference_result->setDerived(false);
	m_readSelfAction_EReference_result->setOrdered(false);
	m_readSelfAction_EReference_result->setContainment(true);
	m_readSelfAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readSelfAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readSelfAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setName("contained");
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setLowerBound(0);
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setUpperBound(1);
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setUnique(true);
	m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_contained_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setName("not_static");
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setLowerBound(0);
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setUpperBound(1);
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setUnique(true);
	m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setName("type");
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setUnique(true);
	m_readSelfAction_EOperation_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readSelfAction_EOperation_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadStructuralFeatureActionContent()
{
	m_readStructuralFeatureAction_EClass->setName("ReadStructuralFeatureAction");
	m_readStructuralFeatureAction_EClass->setAbstract(false);
	m_readStructuralFeatureAction_EClass->setInterface(false);
	
	
	m_readStructuralFeatureAction_EReference_result->setName("result");
	m_readStructuralFeatureAction_EReference_result->setEType(getOutputPin_EClass());
	m_readStructuralFeatureAction_EReference_result->setLowerBound(1);
	m_readStructuralFeatureAction_EReference_result->setUpperBound(1);
	m_readStructuralFeatureAction_EReference_result->setTransient(false);
	m_readStructuralFeatureAction_EReference_result->setVolatile(false);
	m_readStructuralFeatureAction_EReference_result->setChangeable(true);
	m_readStructuralFeatureAction_EReference_result->setUnsettable(false);
	m_readStructuralFeatureAction_EReference_result->setUnique(true);
	m_readStructuralFeatureAction_EReference_result->setDerived(false);
	m_readStructuralFeatureAction_EReference_result->setOrdered(false);
	m_readStructuralFeatureAction_EReference_result->setContainment(true);
	m_readStructuralFeatureAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readStructuralFeatureAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readStructuralFeatureAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setName("type_and_ordering");
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setLowerBound(0);
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUpperBound(1);
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUnique(true);
	m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readStructuralFeatureAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReadVariableActionContent()
{
	m_readVariableAction_EClass->setName("ReadVariableAction");
	m_readVariableAction_EClass->setAbstract(false);
	m_readVariableAction_EClass->setInterface(false);
	
	
	m_readVariableAction_EReference_result->setName("result");
	m_readVariableAction_EReference_result->setEType(getOutputPin_EClass());
	m_readVariableAction_EReference_result->setLowerBound(1);
	m_readVariableAction_EReference_result->setUpperBound(1);
	m_readVariableAction_EReference_result->setTransient(false);
	m_readVariableAction_EReference_result->setVolatile(false);
	m_readVariableAction_EReference_result->setChangeable(true);
	m_readVariableAction_EReference_result->setUnsettable(false);
	m_readVariableAction_EReference_result->setUnique(true);
	m_readVariableAction_EReference_result->setDerived(false);
	m_readVariableAction_EReference_result->setOrdered(false);
	m_readVariableAction_EReference_result->setContainment(true);
	m_readVariableAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_readVariableAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_readVariableAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setName("compatible_multiplicity");
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readVariableAction_EOperation_compatible_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setName("type_and_ordering");
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setLowerBound(0);
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUpperBound(1);
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setUnique(true);
	m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_readVariableAction_EOperation_type_and_ordering_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRealizationContent()
{
	m_realization_EClass->setName("Realization");
	m_realization_EClass->setAbstract(false);
	m_realization_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeReceptionContent()
{
	m_reception_EClass->setName("Reception");
	m_reception_EClass->setAbstract(false);
	m_reception_EClass->setInterface(false);
	
	
	m_reception_EReference_signal->setName("signal");
	m_reception_EReference_signal->setEType(getSignal_EClass());
	m_reception_EReference_signal->setLowerBound(1);
	m_reception_EReference_signal->setUpperBound(1);
	m_reception_EReference_signal->setTransient(false);
	m_reception_EReference_signal->setVolatile(false);
	m_reception_EReference_signal->setChangeable(true);
	m_reception_EReference_signal->setUnsettable(false);
	m_reception_EReference_signal->setUnique(true);
	m_reception_EReference_signal->setDerived(false);
	m_reception_EReference_signal->setOrdered(false);
	m_reception_EReference_signal->setContainment(false);
	m_reception_EReference_signal->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reception_EReference_signal->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reception_EReference_signal->setEOpposite(otherEnd);
	    }
	}
	
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setName("same_name_as_signal");
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setLowerBound(0);
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setUpperBound(1);
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setUnique(true);
	m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reception_EOperation_same_name_as_signal_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setName("same_structure_as_signal");
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setLowerBound(0);
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setUpperBound(1);
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setUnique(true);
	m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reception_EOperation_same_structure_as_signal_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReclassifyObjectActionContent()
{
	m_reclassifyObjectAction_EClass->setName("ReclassifyObjectAction");
	m_reclassifyObjectAction_EClass->setAbstract(false);
	m_reclassifyObjectAction_EClass->setInterface(false);
	
	m_reclassifyObjectAction_EAttribute_isReplaceAll = getReclassifyObjectAction_EAttribute_isReplaceAll();
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setName("isReplaceAll");
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setLowerBound(1);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setUpperBound(1);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setTransient(false);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setVolatile(false);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setChangeable(true);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setUnsettable(false);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setUnique(true);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setDerived(false);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setOrdered(false);
	m_reclassifyObjectAction_EAttribute_isReplaceAll->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_reclassifyObjectAction_EAttribute_isReplaceAll->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_reclassifyObjectAction_EReference_newClassifier->setName("newClassifier");
	m_reclassifyObjectAction_EReference_newClassifier->setEType(getClassifier_EClass());
	m_reclassifyObjectAction_EReference_newClassifier->setLowerBound(0);
	m_reclassifyObjectAction_EReference_newClassifier->setUpperBound(-1);
	m_reclassifyObjectAction_EReference_newClassifier->setTransient(false);
	m_reclassifyObjectAction_EReference_newClassifier->setVolatile(false);
	m_reclassifyObjectAction_EReference_newClassifier->setChangeable(true);
	m_reclassifyObjectAction_EReference_newClassifier->setUnsettable(false);
	m_reclassifyObjectAction_EReference_newClassifier->setUnique(true);
	m_reclassifyObjectAction_EReference_newClassifier->setDerived(false);
	m_reclassifyObjectAction_EReference_newClassifier->setOrdered(false);
	m_reclassifyObjectAction_EReference_newClassifier->setContainment(false);
	m_reclassifyObjectAction_EReference_newClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reclassifyObjectAction_EReference_newClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reclassifyObjectAction_EReference_newClassifier->setEOpposite(otherEnd);
	    }
	}
	m_reclassifyObjectAction_EReference_object->setName("object");
	m_reclassifyObjectAction_EReference_object->setEType(getInputPin_EClass());
	m_reclassifyObjectAction_EReference_object->setLowerBound(1);
	m_reclassifyObjectAction_EReference_object->setUpperBound(1);
	m_reclassifyObjectAction_EReference_object->setTransient(false);
	m_reclassifyObjectAction_EReference_object->setVolatile(false);
	m_reclassifyObjectAction_EReference_object->setChangeable(true);
	m_reclassifyObjectAction_EReference_object->setUnsettable(false);
	m_reclassifyObjectAction_EReference_object->setUnique(true);
	m_reclassifyObjectAction_EReference_object->setDerived(false);
	m_reclassifyObjectAction_EReference_object->setOrdered(false);
	m_reclassifyObjectAction_EReference_object->setContainment(true);
	m_reclassifyObjectAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reclassifyObjectAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reclassifyObjectAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_reclassifyObjectAction_EReference_oldClassifier->setName("oldClassifier");
	m_reclassifyObjectAction_EReference_oldClassifier->setEType(getClassifier_EClass());
	m_reclassifyObjectAction_EReference_oldClassifier->setLowerBound(0);
	m_reclassifyObjectAction_EReference_oldClassifier->setUpperBound(-1);
	m_reclassifyObjectAction_EReference_oldClassifier->setTransient(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setVolatile(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setChangeable(true);
	m_reclassifyObjectAction_EReference_oldClassifier->setUnsettable(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setUnique(true);
	m_reclassifyObjectAction_EReference_oldClassifier->setDerived(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setOrdered(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setContainment(false);
	m_reclassifyObjectAction_EReference_oldClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reclassifyObjectAction_EReference_oldClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reclassifyObjectAction_EReference_oldClassifier->setEOpposite(otherEnd);
	    }
	}
	
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setName("classifier_not_abstract");
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setLowerBound(0);
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setUpperBound(1);
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setUnique(true);
	m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_classifier_not_abstract_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setName("input_pin");
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setUnique(true);
	m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_input_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reclassifyObjectAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRedefinableElementContent()
{
	m_redefinableElement_EClass->setName("RedefinableElement");
	m_redefinableElement_EClass->setAbstract(true);
	m_redefinableElement_EClass->setInterface(false);
	
	m_redefinableElement_EAttribute_isLeaf = getRedefinableElement_EAttribute_isLeaf();
	m_redefinableElement_EAttribute_isLeaf->setName("isLeaf");
	m_redefinableElement_EAttribute_isLeaf->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_redefinableElement_EAttribute_isLeaf->setLowerBound(1);
	m_redefinableElement_EAttribute_isLeaf->setUpperBound(1);
	m_redefinableElement_EAttribute_isLeaf->setTransient(false);
	m_redefinableElement_EAttribute_isLeaf->setVolatile(false);
	m_redefinableElement_EAttribute_isLeaf->setChangeable(true);
	m_redefinableElement_EAttribute_isLeaf->setUnsettable(false);
	m_redefinableElement_EAttribute_isLeaf->setUnique(true);
	m_redefinableElement_EAttribute_isLeaf->setDerived(false);
	m_redefinableElement_EAttribute_isLeaf->setOrdered(false);
	m_redefinableElement_EAttribute_isLeaf->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_redefinableElement_EAttribute_isLeaf->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_redefinableElement_EReference_redefinedElement->setName("redefinedElement");
	m_redefinableElement_EReference_redefinedElement->setEType(getRedefinableElement_EClass());
	m_redefinableElement_EReference_redefinedElement->setLowerBound(0);
	m_redefinableElement_EReference_redefinedElement->setUpperBound(-1);
	m_redefinableElement_EReference_redefinedElement->setTransient(true);
	m_redefinableElement_EReference_redefinedElement->setVolatile(true);
	m_redefinableElement_EReference_redefinedElement->setChangeable(false);
	m_redefinableElement_EReference_redefinedElement->setUnsettable(false);
	m_redefinableElement_EReference_redefinedElement->setUnique(true);
	m_redefinableElement_EReference_redefinedElement->setDerived(true);
	m_redefinableElement_EReference_redefinedElement->setOrdered(false);
	m_redefinableElement_EReference_redefinedElement->setContainment(false);
	m_redefinableElement_EReference_redefinedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_redefinableElement_EReference_redefinedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_redefinableElement_EReference_redefinedElement->setEOpposite(otherEnd);
	    }
	}
	m_redefinableElement_EReference_redefinitionContext->setName("redefinitionContext");
	m_redefinableElement_EReference_redefinitionContext->setEType(getClassifier_EClass());
	m_redefinableElement_EReference_redefinitionContext->setLowerBound(0);
	m_redefinableElement_EReference_redefinitionContext->setUpperBound(-1);
	m_redefinableElement_EReference_redefinitionContext->setTransient(true);
	m_redefinableElement_EReference_redefinitionContext->setVolatile(true);
	m_redefinableElement_EReference_redefinitionContext->setChangeable(false);
	m_redefinableElement_EReference_redefinitionContext->setUnsettable(false);
	m_redefinableElement_EReference_redefinitionContext->setUnique(true);
	m_redefinableElement_EReference_redefinitionContext->setDerived(true);
	m_redefinableElement_EReference_redefinitionContext->setOrdered(false);
	m_redefinableElement_EReference_redefinitionContext->setContainment(false);
	m_redefinableElement_EReference_redefinitionContext->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_redefinableElement_EReference_redefinitionContext->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_redefinableElement_EReference_redefinitionContext->setEOpposite(otherEnd);
	    }
	}
	
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setLowerBound(1);
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setUpperBound(1);
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setUnique(true);
	m_redefinableElement_EOperation_isConsistentWith_RedefinableElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_isConsistentWith_RedefinableElement);
		parameter->setName("redefiningElement");
		parameter->setEType(getRedefinableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setName("isRedefinitionContextValid");
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setLowerBound(1);
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setUpperBound(1);
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setUnique(true);
	m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_isRedefinitionContextValid_RedefinableElement);
		parameter->setName("redefinedElement");
		parameter->setEType(getRedefinableElement_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setName("non_leaf_redefinition");
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setLowerBound(0);
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setUpperBound(1);
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setUnique(true);
	m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_non_leaf_redefinition_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setName("redefinition_consistent");
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setLowerBound(0);
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setUpperBound(1);
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setUnique(true);
	m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_redefinition_consistent_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setName("redefinition_context_valid");
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setLowerBound(0);
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setUpperBound(1);
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setUnique(true);
	m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableElement_EOperation_redefinition_context_valid_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRedefinableTemplateSignatureContent()
{
	m_redefinableTemplateSignature_EClass->setName("RedefinableTemplateSignature");
	m_redefinableTemplateSignature_EClass->setAbstract(false);
	m_redefinableTemplateSignature_EClass->setInterface(false);
	
	
	m_redefinableTemplateSignature_EReference_classifier->setName("classifier");
	m_redefinableTemplateSignature_EReference_classifier->setEType(getClassifier_EClass());
	m_redefinableTemplateSignature_EReference_classifier->setLowerBound(1);
	m_redefinableTemplateSignature_EReference_classifier->setUpperBound(1);
	m_redefinableTemplateSignature_EReference_classifier->setTransient(true);
	m_redefinableTemplateSignature_EReference_classifier->setVolatile(true);
	m_redefinableTemplateSignature_EReference_classifier->setChangeable(false);
	m_redefinableTemplateSignature_EReference_classifier->setUnsettable(false);
	m_redefinableTemplateSignature_EReference_classifier->setUnique(true);
	m_redefinableTemplateSignature_EReference_classifier->setDerived(false);
	m_redefinableTemplateSignature_EReference_classifier->setOrdered(false);
	m_redefinableTemplateSignature_EReference_classifier->setContainment(false);
	m_redefinableTemplateSignature_EReference_classifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_redefinableTemplateSignature_EReference_classifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_redefinableTemplateSignature_EReference_classifier->setEOpposite(otherEnd);
	    }
	}
	m_redefinableTemplateSignature_EReference_extendedSignature->setName("extendedSignature");
	m_redefinableTemplateSignature_EReference_extendedSignature->setEType(getRedefinableTemplateSignature_EClass());
	m_redefinableTemplateSignature_EReference_extendedSignature->setLowerBound(0);
	m_redefinableTemplateSignature_EReference_extendedSignature->setUpperBound(-1);
	m_redefinableTemplateSignature_EReference_extendedSignature->setTransient(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setVolatile(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setChangeable(true);
	m_redefinableTemplateSignature_EReference_extendedSignature->setUnsettable(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setUnique(true);
	m_redefinableTemplateSignature_EReference_extendedSignature->setDerived(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setOrdered(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setContainment(false);
	m_redefinableTemplateSignature_EReference_extendedSignature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_redefinableTemplateSignature_EReference_extendedSignature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_redefinableTemplateSignature_EReference_extendedSignature->setEOpposite(otherEnd);
	    }
	}
	m_redefinableTemplateSignature_EReference_inheritedParameter->setName("inheritedParameter");
	m_redefinableTemplateSignature_EReference_inheritedParameter->setEType(getTemplateParameter_EClass());
	m_redefinableTemplateSignature_EReference_inheritedParameter->setLowerBound(0);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setUpperBound(-1);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setTransient(true);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setVolatile(true);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setChangeable(false);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setUnsettable(false);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setUnique(true);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setDerived(true);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setOrdered(false);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setContainment(false);
	m_redefinableTemplateSignature_EReference_inheritedParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_redefinableTemplateSignature_EReference_inheritedParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_redefinableTemplateSignature_EReference_inheritedParameter->setEOpposite(otherEnd);
	    }
	}
	
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setEType(getTemplateParameter_EClass());
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setName("getInheritedParameters");
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setLowerBound(0);
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setUpperBound(-1);
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setUnique(true);
	m_redefinableTemplateSignature_EOperation_getInheritedParameters->setOrdered(false);
	
	
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setName("redefines_parents");
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setLowerBound(0);
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setUpperBound(1);
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setUnique(true);
	m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_redefinableTemplateSignature_EOperation_redefines_parents_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReduceActionContent()
{
	m_reduceAction_EClass->setName("ReduceAction");
	m_reduceAction_EClass->setAbstract(false);
	m_reduceAction_EClass->setInterface(false);
	
	m_reduceAction_EAttribute_isOrdered = getReduceAction_EAttribute_isOrdered();
	m_reduceAction_EAttribute_isOrdered->setName("isOrdered");
	m_reduceAction_EAttribute_isOrdered->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_reduceAction_EAttribute_isOrdered->setLowerBound(1);
	m_reduceAction_EAttribute_isOrdered->setUpperBound(1);
	m_reduceAction_EAttribute_isOrdered->setTransient(false);
	m_reduceAction_EAttribute_isOrdered->setVolatile(false);
	m_reduceAction_EAttribute_isOrdered->setChangeable(true);
	m_reduceAction_EAttribute_isOrdered->setUnsettable(false);
	m_reduceAction_EAttribute_isOrdered->setUnique(true);
	m_reduceAction_EAttribute_isOrdered->setDerived(false);
	m_reduceAction_EAttribute_isOrdered->setOrdered(false);
	m_reduceAction_EAttribute_isOrdered->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_reduceAction_EAttribute_isOrdered->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_reduceAction_EReference_collection->setName("collection");
	m_reduceAction_EReference_collection->setEType(getInputPin_EClass());
	m_reduceAction_EReference_collection->setLowerBound(1);
	m_reduceAction_EReference_collection->setUpperBound(1);
	m_reduceAction_EReference_collection->setTransient(false);
	m_reduceAction_EReference_collection->setVolatile(false);
	m_reduceAction_EReference_collection->setChangeable(true);
	m_reduceAction_EReference_collection->setUnsettable(false);
	m_reduceAction_EReference_collection->setUnique(true);
	m_reduceAction_EReference_collection->setDerived(false);
	m_reduceAction_EReference_collection->setOrdered(false);
	m_reduceAction_EReference_collection->setContainment(true);
	m_reduceAction_EReference_collection->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reduceAction_EReference_collection->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reduceAction_EReference_collection->setEOpposite(otherEnd);
	    }
	}
	m_reduceAction_EReference_reducer->setName("reducer");
	m_reduceAction_EReference_reducer->setEType(getBehavior_EClass());
	m_reduceAction_EReference_reducer->setLowerBound(1);
	m_reduceAction_EReference_reducer->setUpperBound(1);
	m_reduceAction_EReference_reducer->setTransient(false);
	m_reduceAction_EReference_reducer->setVolatile(false);
	m_reduceAction_EReference_reducer->setChangeable(true);
	m_reduceAction_EReference_reducer->setUnsettable(false);
	m_reduceAction_EReference_reducer->setUnique(true);
	m_reduceAction_EReference_reducer->setDerived(false);
	m_reduceAction_EReference_reducer->setOrdered(false);
	m_reduceAction_EReference_reducer->setContainment(false);
	m_reduceAction_EReference_reducer->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reduceAction_EReference_reducer->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reduceAction_EReference_reducer->setEOpposite(otherEnd);
	    }
	}
	m_reduceAction_EReference_result->setName("result");
	m_reduceAction_EReference_result->setEType(getOutputPin_EClass());
	m_reduceAction_EReference_result->setLowerBound(1);
	m_reduceAction_EReference_result->setUpperBound(1);
	m_reduceAction_EReference_result->setTransient(false);
	m_reduceAction_EReference_result->setVolatile(false);
	m_reduceAction_EReference_result->setChangeable(true);
	m_reduceAction_EReference_result->setUnsettable(false);
	m_reduceAction_EReference_result->setUnique(true);
	m_reduceAction_EReference_result->setDerived(false);
	m_reduceAction_EReference_result->setOrdered(false);
	m_reduceAction_EReference_result->setContainment(true);
	m_reduceAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_reduceAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_reduceAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setName("input_type_is_collection");
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setLowerBound(0);
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setUpperBound(1);
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setUnique(true);
	m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_input_type_is_collection_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setName("output_types_are_compatible");
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setLowerBound(0);
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setUpperBound(1);
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setUnique(true);
	m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_output_types_are_compatible_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setName("reducer_inputs_output");
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setLowerBound(0);
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setUpperBound(1);
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setUnique(true);
	m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_reduceAction_EOperation_reducer_inputs_output_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRegionContent()
{
	m_region_EClass->setName("Region");
	m_region_EClass->setAbstract(false);
	m_region_EClass->setInterface(false);
	
	
	m_region_EReference_extendedRegion->setName("extendedRegion");
	m_region_EReference_extendedRegion->setEType(getRegion_EClass());
	m_region_EReference_extendedRegion->setLowerBound(0);
	m_region_EReference_extendedRegion->setUpperBound(1);
	m_region_EReference_extendedRegion->setTransient(false);
	m_region_EReference_extendedRegion->setVolatile(false);
	m_region_EReference_extendedRegion->setChangeable(true);
	m_region_EReference_extendedRegion->setUnsettable(false);
	m_region_EReference_extendedRegion->setUnique(true);
	m_region_EReference_extendedRegion->setDerived(false);
	m_region_EReference_extendedRegion->setOrdered(false);
	m_region_EReference_extendedRegion->setContainment(false);
	m_region_EReference_extendedRegion->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_region_EReference_extendedRegion->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_region_EReference_extendedRegion->setEOpposite(otherEnd);
	    }
	}
	m_region_EReference_state->setName("state");
	m_region_EReference_state->setEType(getState_EClass());
	m_region_EReference_state->setLowerBound(0);
	m_region_EReference_state->setUpperBound(1);
	m_region_EReference_state->setTransient(false);
	m_region_EReference_state->setVolatile(false);
	m_region_EReference_state->setChangeable(true);
	m_region_EReference_state->setUnsettable(false);
	m_region_EReference_state->setUnique(true);
	m_region_EReference_state->setDerived(false);
	m_region_EReference_state->setOrdered(false);
	m_region_EReference_state->setContainment(false);
	m_region_EReference_state->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_region_EReference_state->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getState_EReference_region();
		if (otherEnd != nullptr)
	    {
	   		m_region_EReference_state->setEOpposite(otherEnd);
	    }
	}
	m_region_EReference_stateMachine->setName("stateMachine");
	m_region_EReference_stateMachine->setEType(getStateMachine_EClass());
	m_region_EReference_stateMachine->setLowerBound(0);
	m_region_EReference_stateMachine->setUpperBound(1);
	m_region_EReference_stateMachine->setTransient(false);
	m_region_EReference_stateMachine->setVolatile(false);
	m_region_EReference_stateMachine->setChangeable(true);
	m_region_EReference_stateMachine->setUnsettable(false);
	m_region_EReference_stateMachine->setUnique(true);
	m_region_EReference_stateMachine->setDerived(false);
	m_region_EReference_stateMachine->setOrdered(false);
	m_region_EReference_stateMachine->setContainment(false);
	m_region_EReference_stateMachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_region_EReference_stateMachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStateMachine_EReference_region();
		if (otherEnd != nullptr)
	    {
	   		m_region_EReference_stateMachine->setEOpposite(otherEnd);
	    }
	}
	m_region_EReference_subvertex->setName("subvertex");
	m_region_EReference_subvertex->setEType(getVertex_EClass());
	m_region_EReference_subvertex->setLowerBound(0);
	m_region_EReference_subvertex->setUpperBound(-1);
	m_region_EReference_subvertex->setTransient(false);
	m_region_EReference_subvertex->setVolatile(false);
	m_region_EReference_subvertex->setChangeable(true);
	m_region_EReference_subvertex->setUnsettable(false);
	m_region_EReference_subvertex->setUnique(true);
	m_region_EReference_subvertex->setDerived(false);
	m_region_EReference_subvertex->setOrdered(false);
	m_region_EReference_subvertex->setContainment(true);
	m_region_EReference_subvertex->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_region_EReference_subvertex->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getVertex_EReference_container();
		if (otherEnd != nullptr)
	    {
	   		m_region_EReference_subvertex->setEOpposite(otherEnd);
	    }
	}
	m_region_EReference_transition->setName("transition");
	m_region_EReference_transition->setEType(getTransition_EClass());
	m_region_EReference_transition->setLowerBound(0);
	m_region_EReference_transition->setUpperBound(-1);
	m_region_EReference_transition->setTransient(false);
	m_region_EReference_transition->setVolatile(false);
	m_region_EReference_transition->setChangeable(true);
	m_region_EReference_transition->setUnsettable(false);
	m_region_EReference_transition->setUnique(true);
	m_region_EReference_transition->setDerived(false);
	m_region_EReference_transition->setOrdered(false);
	m_region_EReference_transition->setContainment(true);
	m_region_EReference_transition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_region_EReference_transition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTransition_EReference_container();
		if (otherEnd != nullptr)
	    {
	   		m_region_EReference_transition->setEOpposite(otherEnd);
	    }
	}
	
	m_region_EOperation_belongsToPSM->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_region_EOperation_belongsToPSM->setName("belongsToPSM");
	m_region_EOperation_belongsToPSM->setLowerBound(1);
	m_region_EOperation_belongsToPSM->setUpperBound(1);
	m_region_EOperation_belongsToPSM->setUnique(true);
	m_region_EOperation_belongsToPSM->setOrdered(false);
	
	
	m_region_EOperation_containingStateMachine->setEType(getStateMachine_EClass());
	m_region_EOperation_containingStateMachine->setName("containingStateMachine");
	m_region_EOperation_containingStateMachine->setLowerBound(1);
	m_region_EOperation_containingStateMachine->setUpperBound(1);
	m_region_EOperation_containingStateMachine->setUnique(true);
	m_region_EOperation_containingStateMachine->setOrdered(false);
	
	
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setName("deep_history_vertex");
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_deep_history_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setName("initial_vertex");
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_region_EOperation_initial_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_initial_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_initial_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_region_EOperation_owned_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_region_EOperation_owned_EDiagnosticChain_EMap->setName("owned");
	m_region_EOperation_owned_EDiagnosticChain_EMap->setLowerBound(0);
	m_region_EOperation_owned_EDiagnosticChain_EMap->setUpperBound(1);
	m_region_EOperation_owned_EDiagnosticChain_EMap->setUnique(true);
	m_region_EOperation_owned_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_owned_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_owned_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_region_EOperation_redefinitionContext->setEType(getClassifier_EClass());
	m_region_EOperation_redefinitionContext->setName("redefinitionContext");
	m_region_EOperation_redefinitionContext->setLowerBound(1);
	m_region_EOperation_redefinitionContext->setUpperBound(1);
	m_region_EOperation_redefinitionContext->setUnique(true);
	m_region_EOperation_redefinitionContext->setOrdered(false);
	
	
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setName("shallow_history_vertex");
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setLowerBound(0);
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setUpperBound(1);
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setUnique(true);
	m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_region_EOperation_shallow_history_vertex_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRelationshipContent()
{
	m_relationship_EClass->setName("Relationship");
	m_relationship_EClass->setAbstract(true);
	m_relationship_EClass->setInterface(false);
	
	
	m_relationship_EReference_relatedElement->setName("relatedElement");
	m_relationship_EReference_relatedElement->setEType(getElement_EClass());
	m_relationship_EReference_relatedElement->setLowerBound(1);
	m_relationship_EReference_relatedElement->setUpperBound(-1);
	m_relationship_EReference_relatedElement->setTransient(true);
	m_relationship_EReference_relatedElement->setVolatile(true);
	m_relationship_EReference_relatedElement->setChangeable(false);
	m_relationship_EReference_relatedElement->setUnsettable(false);
	m_relationship_EReference_relatedElement->setUnique(true);
	m_relationship_EReference_relatedElement->setDerived(true);
	m_relationship_EReference_relatedElement->setOrdered(false);
	m_relationship_EReference_relatedElement->setContainment(false);
	m_relationship_EReference_relatedElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_relationship_EReference_relatedElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_relationship_EReference_relatedElement->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeRemoveStructuralFeatureValueActionContent()
{
	m_removeStructuralFeatureValueAction_EClass->setName("RemoveStructuralFeatureValueAction");
	m_removeStructuralFeatureValueAction_EClass->setAbstract(false);
	m_removeStructuralFeatureValueAction_EClass->setInterface(false);
	
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates = getRemoveStructuralFeatureValueAction_EAttribute_isRemoveDuplicates();
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setName("isRemoveDuplicates");
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setLowerBound(1);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setUpperBound(1);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setTransient(false);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setVolatile(false);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setChangeable(true);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setUnsettable(false);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setUnique(true);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setDerived(false);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setOrdered(false);
	m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_removeStructuralFeatureValueAction_EAttribute_isRemoveDuplicates->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_removeStructuralFeatureValueAction_EReference_removeAt->setName("removeAt");
	m_removeStructuralFeatureValueAction_EReference_removeAt->setEType(getInputPin_EClass());
	m_removeStructuralFeatureValueAction_EReference_removeAt->setLowerBound(0);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setUpperBound(1);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setTransient(false);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setVolatile(false);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setChangeable(true);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setUnsettable(false);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setUnique(true);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setDerived(false);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setOrdered(false);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setContainment(true);
	m_removeStructuralFeatureValueAction_EReference_removeAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_removeStructuralFeatureValueAction_EReference_removeAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_removeStructuralFeatureValueAction_EReference_removeAt->setEOpposite(otherEnd);
	    }
	}
	
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setName("removeAt_and_value");
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setUnique(true);
	m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_removeStructuralFeatureValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeRemoveVariableValueActionContent()
{
	m_removeVariableValueAction_EClass->setName("RemoveVariableValueAction");
	m_removeVariableValueAction_EClass->setAbstract(false);
	m_removeVariableValueAction_EClass->setInterface(false);
	
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates = getRemoveVariableValueAction_EAttribute_isRemoveDuplicates();
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setName("isRemoveDuplicates");
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setLowerBound(1);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setUpperBound(1);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setTransient(false);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setVolatile(false);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setChangeable(true);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setUnsettable(false);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setUnique(true);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setDerived(false);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setOrdered(false);
	m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_removeVariableValueAction_EAttribute_isRemoveDuplicates->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_removeVariableValueAction_EReference_removeAt->setName("removeAt");
	m_removeVariableValueAction_EReference_removeAt->setEType(getInputPin_EClass());
	m_removeVariableValueAction_EReference_removeAt->setLowerBound(0);
	m_removeVariableValueAction_EReference_removeAt->setUpperBound(1);
	m_removeVariableValueAction_EReference_removeAt->setTransient(false);
	m_removeVariableValueAction_EReference_removeAt->setVolatile(false);
	m_removeVariableValueAction_EReference_removeAt->setChangeable(true);
	m_removeVariableValueAction_EReference_removeAt->setUnsettable(false);
	m_removeVariableValueAction_EReference_removeAt->setUnique(true);
	m_removeVariableValueAction_EReference_removeAt->setDerived(false);
	m_removeVariableValueAction_EReference_removeAt->setOrdered(false);
	m_removeVariableValueAction_EReference_removeAt->setContainment(true);
	m_removeVariableValueAction_EReference_removeAt->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_removeVariableValueAction_EReference_removeAt->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_removeVariableValueAction_EReference_removeAt->setEOpposite(otherEnd);
	    }
	}
	
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setName("removeAt_and_value");
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setUnique(true);
	m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_removeVariableValueAction_EOperation_removeAt_and_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeReplyActionContent()
{
	m_replyAction_EClass->setName("ReplyAction");
	m_replyAction_EClass->setAbstract(false);
	m_replyAction_EClass->setInterface(false);
	
	
	m_replyAction_EReference_replyToCall->setName("replyToCall");
	m_replyAction_EReference_replyToCall->setEType(getTrigger_EClass());
	m_replyAction_EReference_replyToCall->setLowerBound(1);
	m_replyAction_EReference_replyToCall->setUpperBound(1);
	m_replyAction_EReference_replyToCall->setTransient(false);
	m_replyAction_EReference_replyToCall->setVolatile(false);
	m_replyAction_EReference_replyToCall->setChangeable(true);
	m_replyAction_EReference_replyToCall->setUnsettable(false);
	m_replyAction_EReference_replyToCall->setUnique(true);
	m_replyAction_EReference_replyToCall->setDerived(false);
	m_replyAction_EReference_replyToCall->setOrdered(false);
	m_replyAction_EReference_replyToCall->setContainment(false);
	m_replyAction_EReference_replyToCall->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_replyAction_EReference_replyToCall->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_replyAction_EReference_replyToCall->setEOpposite(otherEnd);
	    }
	}
	m_replyAction_EReference_replyValue->setName("replyValue");
	m_replyAction_EReference_replyValue->setEType(getInputPin_EClass());
	m_replyAction_EReference_replyValue->setLowerBound(0);
	m_replyAction_EReference_replyValue->setUpperBound(-1);
	m_replyAction_EReference_replyValue->setTransient(false);
	m_replyAction_EReference_replyValue->setVolatile(false);
	m_replyAction_EReference_replyValue->setChangeable(true);
	m_replyAction_EReference_replyValue->setUnsettable(false);
	m_replyAction_EReference_replyValue->setUnique(true);
	m_replyAction_EReference_replyValue->setDerived(false);
	m_replyAction_EReference_replyValue->setOrdered(true);
	m_replyAction_EReference_replyValue->setContainment(true);
	m_replyAction_EReference_replyValue->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_replyAction_EReference_replyValue->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_replyAction_EReference_replyValue->setEOpposite(otherEnd);
	    }
	}
	m_replyAction_EReference_returnInformation->setName("returnInformation");
	m_replyAction_EReference_returnInformation->setEType(getInputPin_EClass());
	m_replyAction_EReference_returnInformation->setLowerBound(1);
	m_replyAction_EReference_returnInformation->setUpperBound(1);
	m_replyAction_EReference_returnInformation->setTransient(false);
	m_replyAction_EReference_returnInformation->setVolatile(false);
	m_replyAction_EReference_returnInformation->setChangeable(true);
	m_replyAction_EReference_returnInformation->setUnsettable(false);
	m_replyAction_EReference_returnInformation->setUnique(true);
	m_replyAction_EReference_returnInformation->setDerived(false);
	m_replyAction_EReference_returnInformation->setOrdered(false);
	m_replyAction_EReference_returnInformation->setContainment(true);
	m_replyAction_EReference_returnInformation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_replyAction_EReference_returnInformation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_replyAction_EReference_returnInformation->setEOpposite(otherEnd);
	    }
	}
	
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setName("event_on_reply_to_call_trigger");
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setLowerBound(0);
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setUpperBound(1);
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setUnique(true);
	m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_replyAction_EOperation_event_on_reply_to_call_trigger_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setName("pins_match_parameter");
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setLowerBound(0);
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setUpperBound(1);
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setUnique(true);
	m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_replyAction_EOperation_pins_match_parameter_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeSendObjectActionContent()
{
	m_sendObjectAction_EClass->setName("SendObjectAction");
	m_sendObjectAction_EClass->setAbstract(false);
	m_sendObjectAction_EClass->setInterface(false);
	
	
	m_sendObjectAction_EReference_request->setName("request");
	m_sendObjectAction_EReference_request->setEType(getInputPin_EClass());
	m_sendObjectAction_EReference_request->setLowerBound(1);
	m_sendObjectAction_EReference_request->setUpperBound(1);
	m_sendObjectAction_EReference_request->setTransient(false);
	m_sendObjectAction_EReference_request->setVolatile(false);
	m_sendObjectAction_EReference_request->setChangeable(true);
	m_sendObjectAction_EReference_request->setUnsettable(false);
	m_sendObjectAction_EReference_request->setUnique(true);
	m_sendObjectAction_EReference_request->setDerived(false);
	m_sendObjectAction_EReference_request->setOrdered(false);
	m_sendObjectAction_EReference_request->setContainment(true);
	m_sendObjectAction_EReference_request->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_sendObjectAction_EReference_request->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_sendObjectAction_EReference_request->setEOpposite(otherEnd);
	    }
	}
	m_sendObjectAction_EReference_target->setName("target");
	m_sendObjectAction_EReference_target->setEType(getInputPin_EClass());
	m_sendObjectAction_EReference_target->setLowerBound(1);
	m_sendObjectAction_EReference_target->setUpperBound(1);
	m_sendObjectAction_EReference_target->setTransient(false);
	m_sendObjectAction_EReference_target->setVolatile(false);
	m_sendObjectAction_EReference_target->setChangeable(true);
	m_sendObjectAction_EReference_target->setUnsettable(false);
	m_sendObjectAction_EReference_target->setUnique(true);
	m_sendObjectAction_EReference_target->setDerived(false);
	m_sendObjectAction_EReference_target->setOrdered(false);
	m_sendObjectAction_EReference_target->setContainment(true);
	m_sendObjectAction_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_sendObjectAction_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_sendObjectAction_EReference_target->setEOpposite(otherEnd);
	    }
	}
	
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setName("type_target_pin");
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUnique(true);
	m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendObjectAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeSendSignalActionContent()
{
	m_sendSignalAction_EClass->setName("SendSignalAction");
	m_sendSignalAction_EClass->setAbstract(false);
	m_sendSignalAction_EClass->setInterface(false);
	
	
	m_sendSignalAction_EReference_signal->setName("signal");
	m_sendSignalAction_EReference_signal->setEType(getSignal_EClass());
	m_sendSignalAction_EReference_signal->setLowerBound(1);
	m_sendSignalAction_EReference_signal->setUpperBound(1);
	m_sendSignalAction_EReference_signal->setTransient(false);
	m_sendSignalAction_EReference_signal->setVolatile(false);
	m_sendSignalAction_EReference_signal->setChangeable(true);
	m_sendSignalAction_EReference_signal->setUnsettable(false);
	m_sendSignalAction_EReference_signal->setUnique(true);
	m_sendSignalAction_EReference_signal->setDerived(false);
	m_sendSignalAction_EReference_signal->setOrdered(false);
	m_sendSignalAction_EReference_signal->setContainment(false);
	m_sendSignalAction_EReference_signal->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_sendSignalAction_EReference_signal->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_sendSignalAction_EReference_signal->setEOpposite(otherEnd);
	    }
	}
	m_sendSignalAction_EReference_target->setName("target");
	m_sendSignalAction_EReference_target->setEType(getInputPin_EClass());
	m_sendSignalAction_EReference_target->setLowerBound(1);
	m_sendSignalAction_EReference_target->setUpperBound(1);
	m_sendSignalAction_EReference_target->setTransient(false);
	m_sendSignalAction_EReference_target->setVolatile(false);
	m_sendSignalAction_EReference_target->setChangeable(true);
	m_sendSignalAction_EReference_target->setUnsettable(false);
	m_sendSignalAction_EReference_target->setUnique(true);
	m_sendSignalAction_EReference_target->setDerived(false);
	m_sendSignalAction_EReference_target->setOrdered(false);
	m_sendSignalAction_EReference_target->setContainment(true);
	m_sendSignalAction_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_sendSignalAction_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_sendSignalAction_EReference_target->setEOpposite(otherEnd);
	    }
	}
	
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setName("number_order");
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setLowerBound(0);
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setUpperBound(1);
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setUnique(true);
	m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_number_order_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setName("type_ordering_multiplicity");
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_type_ordering_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setName("type_target_pin");
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setLowerBound(0);
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUpperBound(1);
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setUnique(true);
	m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_sendSignalAction_EOperation_type_target_pin_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeSequenceNodeContent()
{
	m_sequenceNode_EClass->setName("SequenceNode");
	m_sequenceNode_EClass->setAbstract(false);
	m_sequenceNode_EClass->setInterface(false);
	
	
	m_sequenceNode_EReference_executableNode->setName("executableNode");
	m_sequenceNode_EReference_executableNode->setEType(getExecutableNode_EClass());
	m_sequenceNode_EReference_executableNode->setLowerBound(0);
	m_sequenceNode_EReference_executableNode->setUpperBound(-1);
	m_sequenceNode_EReference_executableNode->setTransient(false);
	m_sequenceNode_EReference_executableNode->setVolatile(false);
	m_sequenceNode_EReference_executableNode->setChangeable(true);
	m_sequenceNode_EReference_executableNode->setUnsettable(false);
	m_sequenceNode_EReference_executableNode->setUnique(true);
	m_sequenceNode_EReference_executableNode->setDerived(false);
	m_sequenceNode_EReference_executableNode->setOrdered(true);
	m_sequenceNode_EReference_executableNode->setContainment(true);
	m_sequenceNode_EReference_executableNode->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_sequenceNode_EReference_executableNode->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_sequenceNode_EReference_executableNode->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeSignalContent()
{
	m_signal_EClass->setName("Signal");
	m_signal_EClass->setAbstract(false);
	m_signal_EClass->setInterface(false);
	
	
	m_signal_EReference_ownedAttribute->setName("ownedAttribute");
	m_signal_EReference_ownedAttribute->setEType(getProperty_EClass());
	m_signal_EReference_ownedAttribute->setLowerBound(0);
	m_signal_EReference_ownedAttribute->setUpperBound(-1);
	m_signal_EReference_ownedAttribute->setTransient(false);
	m_signal_EReference_ownedAttribute->setVolatile(false);
	m_signal_EReference_ownedAttribute->setChangeable(true);
	m_signal_EReference_ownedAttribute->setUnsettable(false);
	m_signal_EReference_ownedAttribute->setUnique(true);
	m_signal_EReference_ownedAttribute->setDerived(false);
	m_signal_EReference_ownedAttribute->setOrdered(true);
	m_signal_EReference_ownedAttribute->setContainment(true);
	m_signal_EReference_ownedAttribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_signal_EReference_ownedAttribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_signal_EReference_ownedAttribute->setEOpposite(otherEnd);
	    }
	}
	
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setEType(getProperty_EClass());
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setName("createOwnedAttribute");
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setLowerBound(1);
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUpperBound(1);
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUnique(true);
	m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_signal_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeSignalEventContent()
{
	m_signalEvent_EClass->setName("SignalEvent");
	m_signalEvent_EClass->setAbstract(false);
	m_signalEvent_EClass->setInterface(false);
	
	
	m_signalEvent_EReference_signal->setName("signal");
	m_signalEvent_EReference_signal->setEType(getSignal_EClass());
	m_signalEvent_EReference_signal->setLowerBound(1);
	m_signalEvent_EReference_signal->setUpperBound(1);
	m_signalEvent_EReference_signal->setTransient(false);
	m_signalEvent_EReference_signal->setVolatile(false);
	m_signalEvent_EReference_signal->setChangeable(true);
	m_signalEvent_EReference_signal->setUnsettable(false);
	m_signalEvent_EReference_signal->setUnique(true);
	m_signalEvent_EReference_signal->setDerived(false);
	m_signalEvent_EReference_signal->setOrdered(false);
	m_signalEvent_EReference_signal->setContainment(false);
	m_signalEvent_EReference_signal->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_signalEvent_EReference_signal->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_signalEvent_EReference_signal->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeSlotContent()
{
	m_slot_EClass->setName("Slot");
	m_slot_EClass->setAbstract(false);
	m_slot_EClass->setInterface(false);
	
	
	m_slot_EReference_definingFeature->setName("definingFeature");
	m_slot_EReference_definingFeature->setEType(getStructuralFeature_EClass());
	m_slot_EReference_definingFeature->setLowerBound(1);
	m_slot_EReference_definingFeature->setUpperBound(1);
	m_slot_EReference_definingFeature->setTransient(false);
	m_slot_EReference_definingFeature->setVolatile(false);
	m_slot_EReference_definingFeature->setChangeable(true);
	m_slot_EReference_definingFeature->setUnsettable(false);
	m_slot_EReference_definingFeature->setUnique(true);
	m_slot_EReference_definingFeature->setDerived(false);
	m_slot_EReference_definingFeature->setOrdered(false);
	m_slot_EReference_definingFeature->setContainment(false);
	m_slot_EReference_definingFeature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_slot_EReference_definingFeature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_slot_EReference_definingFeature->setEOpposite(otherEnd);
	    }
	}
	m_slot_EReference_owningInstance->setName("owningInstance");
	m_slot_EReference_owningInstance->setEType(getInstanceSpecification_EClass());
	m_slot_EReference_owningInstance->setLowerBound(1);
	m_slot_EReference_owningInstance->setUpperBound(1);
	m_slot_EReference_owningInstance->setTransient(false);
	m_slot_EReference_owningInstance->setVolatile(false);
	m_slot_EReference_owningInstance->setChangeable(true);
	m_slot_EReference_owningInstance->setUnsettable(false);
	m_slot_EReference_owningInstance->setUnique(true);
	m_slot_EReference_owningInstance->setDerived(false);
	m_slot_EReference_owningInstance->setOrdered(false);
	m_slot_EReference_owningInstance->setContainment(false);
	m_slot_EReference_owningInstance->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_slot_EReference_owningInstance->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInstanceSpecification_EReference_slot();
		if (otherEnd != nullptr)
	    {
	   		m_slot_EReference_owningInstance->setEOpposite(otherEnd);
	    }
	}
	m_slot_EReference_value->setName("value");
	m_slot_EReference_value->setEType(getValueSpecification_EClass());
	m_slot_EReference_value->setLowerBound(0);
	m_slot_EReference_value->setUpperBound(-1);
	m_slot_EReference_value->setTransient(false);
	m_slot_EReference_value->setVolatile(false);
	m_slot_EReference_value->setChangeable(true);
	m_slot_EReference_value->setUnsettable(false);
	m_slot_EReference_value->setUnique(true);
	m_slot_EReference_value->setDerived(false);
	m_slot_EReference_value->setOrdered(true);
	m_slot_EReference_value->setContainment(true);
	m_slot_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_slot_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getValueSpecification_EReference_owningSlot();
		if (otherEnd != nullptr)
	    {
	   		m_slot_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeStartClassifierBehaviorActionContent()
{
	m_startClassifierBehaviorAction_EClass->setName("StartClassifierBehaviorAction");
	m_startClassifierBehaviorAction_EClass->setAbstract(false);
	m_startClassifierBehaviorAction_EClass->setInterface(false);
	
	
	m_startClassifierBehaviorAction_EReference_object->setName("object");
	m_startClassifierBehaviorAction_EReference_object->setEType(getInputPin_EClass());
	m_startClassifierBehaviorAction_EReference_object->setLowerBound(1);
	m_startClassifierBehaviorAction_EReference_object->setUpperBound(1);
	m_startClassifierBehaviorAction_EReference_object->setTransient(false);
	m_startClassifierBehaviorAction_EReference_object->setVolatile(false);
	m_startClassifierBehaviorAction_EReference_object->setChangeable(true);
	m_startClassifierBehaviorAction_EReference_object->setUnsettable(false);
	m_startClassifierBehaviorAction_EReference_object->setUnique(true);
	m_startClassifierBehaviorAction_EReference_object->setDerived(false);
	m_startClassifierBehaviorAction_EReference_object->setOrdered(false);
	m_startClassifierBehaviorAction_EReference_object->setContainment(true);
	m_startClassifierBehaviorAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_startClassifierBehaviorAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_startClassifierBehaviorAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startClassifierBehaviorAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setName("type_has_classifier");
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startClassifierBehaviorAction_EOperation_type_has_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStartObjectBehaviorActionContent()
{
	m_startObjectBehaviorAction_EClass->setName("StartObjectBehaviorAction");
	m_startObjectBehaviorAction_EClass->setAbstract(false);
	m_startObjectBehaviorAction_EClass->setInterface(false);
	
	
	m_startObjectBehaviorAction_EReference_object->setName("object");
	m_startObjectBehaviorAction_EReference_object->setEType(getInputPin_EClass());
	m_startObjectBehaviorAction_EReference_object->setLowerBound(1);
	m_startObjectBehaviorAction_EReference_object->setUpperBound(1);
	m_startObjectBehaviorAction_EReference_object->setTransient(false);
	m_startObjectBehaviorAction_EReference_object->setVolatile(false);
	m_startObjectBehaviorAction_EReference_object->setChangeable(true);
	m_startObjectBehaviorAction_EReference_object->setUnsettable(false);
	m_startObjectBehaviorAction_EReference_object->setUnique(true);
	m_startObjectBehaviorAction_EReference_object->setDerived(false);
	m_startObjectBehaviorAction_EReference_object->setOrdered(false);
	m_startObjectBehaviorAction_EReference_object->setContainment(true);
	m_startObjectBehaviorAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_startObjectBehaviorAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_startObjectBehaviorAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	
	m_startObjectBehaviorAction_EOperation_behavior->setEType(getBehavior_EClass());
	m_startObjectBehaviorAction_EOperation_behavior->setName("behavior");
	m_startObjectBehaviorAction_EOperation_behavior->setLowerBound(0);
	m_startObjectBehaviorAction_EOperation_behavior->setUpperBound(1);
	m_startObjectBehaviorAction_EOperation_behavior->setUnique(true);
	m_startObjectBehaviorAction_EOperation_behavior->setOrdered(false);
	
	
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setName("multiplicity_of_object");
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setName("no_onport");
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setLowerBound(0);
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setUpperBound(1);
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setUnique(true);
	m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_no_onport_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setName("type_of_object");
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_startObjectBehaviorAction_EOperation_type_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStateContent()
{
	m_state_EClass->setName("State");
	m_state_EClass->setAbstract(false);
	m_state_EClass->setInterface(false);
	
	m_state_EAttribute_isComposite = getState_EAttribute_isComposite();
	m_state_EAttribute_isComposite->setName("isComposite");
	m_state_EAttribute_isComposite->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EAttribute_isComposite->setLowerBound(1);
	m_state_EAttribute_isComposite->setUpperBound(1);
	m_state_EAttribute_isComposite->setTransient(true);
	m_state_EAttribute_isComposite->setVolatile(true);
	m_state_EAttribute_isComposite->setChangeable(false);
	m_state_EAttribute_isComposite->setUnsettable(false);
	m_state_EAttribute_isComposite->setUnique(true);
	m_state_EAttribute_isComposite->setDerived(true);
	m_state_EAttribute_isComposite->setOrdered(false);
	m_state_EAttribute_isComposite->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_state_EAttribute_isComposite->setDefaultValueLiteral(defaultValue);
		}
	}
	m_state_EAttribute_isOrthogonal = getState_EAttribute_isOrthogonal();
	m_state_EAttribute_isOrthogonal->setName("isOrthogonal");
	m_state_EAttribute_isOrthogonal->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EAttribute_isOrthogonal->setLowerBound(1);
	m_state_EAttribute_isOrthogonal->setUpperBound(1);
	m_state_EAttribute_isOrthogonal->setTransient(true);
	m_state_EAttribute_isOrthogonal->setVolatile(true);
	m_state_EAttribute_isOrthogonal->setChangeable(false);
	m_state_EAttribute_isOrthogonal->setUnsettable(false);
	m_state_EAttribute_isOrthogonal->setUnique(true);
	m_state_EAttribute_isOrthogonal->setDerived(true);
	m_state_EAttribute_isOrthogonal->setOrdered(false);
	m_state_EAttribute_isOrthogonal->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_state_EAttribute_isOrthogonal->setDefaultValueLiteral(defaultValue);
		}
	}
	m_state_EAttribute_isSimple = getState_EAttribute_isSimple();
	m_state_EAttribute_isSimple->setName("isSimple");
	m_state_EAttribute_isSimple->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EAttribute_isSimple->setLowerBound(1);
	m_state_EAttribute_isSimple->setUpperBound(1);
	m_state_EAttribute_isSimple->setTransient(true);
	m_state_EAttribute_isSimple->setVolatile(true);
	m_state_EAttribute_isSimple->setChangeable(false);
	m_state_EAttribute_isSimple->setUnsettable(false);
	m_state_EAttribute_isSimple->setUnique(true);
	m_state_EAttribute_isSimple->setDerived(true);
	m_state_EAttribute_isSimple->setOrdered(false);
	m_state_EAttribute_isSimple->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_state_EAttribute_isSimple->setDefaultValueLiteral(defaultValue);
		}
	}
	m_state_EAttribute_isSubmachineState = getState_EAttribute_isSubmachineState();
	m_state_EAttribute_isSubmachineState->setName("isSubmachineState");
	m_state_EAttribute_isSubmachineState->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EAttribute_isSubmachineState->setLowerBound(1);
	m_state_EAttribute_isSubmachineState->setUpperBound(1);
	m_state_EAttribute_isSubmachineState->setTransient(true);
	m_state_EAttribute_isSubmachineState->setVolatile(true);
	m_state_EAttribute_isSubmachineState->setChangeable(false);
	m_state_EAttribute_isSubmachineState->setUnsettable(false);
	m_state_EAttribute_isSubmachineState->setUnique(true);
	m_state_EAttribute_isSubmachineState->setDerived(true);
	m_state_EAttribute_isSubmachineState->setOrdered(false);
	m_state_EAttribute_isSubmachineState->setID(false);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
		   m_state_EAttribute_isSubmachineState->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_state_EReference_connection->setName("connection");
	m_state_EReference_connection->setEType(getConnectionPointReference_EClass());
	m_state_EReference_connection->setLowerBound(0);
	m_state_EReference_connection->setUpperBound(-1);
	m_state_EReference_connection->setTransient(false);
	m_state_EReference_connection->setVolatile(false);
	m_state_EReference_connection->setChangeable(true);
	m_state_EReference_connection->setUnsettable(false);
	m_state_EReference_connection->setUnique(true);
	m_state_EReference_connection->setDerived(false);
	m_state_EReference_connection->setOrdered(false);
	m_state_EReference_connection->setContainment(true);
	m_state_EReference_connection->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_connection->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getConnectionPointReference_EReference_state();
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_connection->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_connectionPoint->setName("connectionPoint");
	m_state_EReference_connectionPoint->setEType(getPseudostate_EClass());
	m_state_EReference_connectionPoint->setLowerBound(0);
	m_state_EReference_connectionPoint->setUpperBound(-1);
	m_state_EReference_connectionPoint->setTransient(false);
	m_state_EReference_connectionPoint->setVolatile(false);
	m_state_EReference_connectionPoint->setChangeable(true);
	m_state_EReference_connectionPoint->setUnsettable(false);
	m_state_EReference_connectionPoint->setUnique(true);
	m_state_EReference_connectionPoint->setDerived(false);
	m_state_EReference_connectionPoint->setOrdered(false);
	m_state_EReference_connectionPoint->setContainment(true);
	m_state_EReference_connectionPoint->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_connectionPoint->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPseudostate_EReference_state();
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_connectionPoint->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_deferrableTrigger->setName("deferrableTrigger");
	m_state_EReference_deferrableTrigger->setEType(getTrigger_EClass());
	m_state_EReference_deferrableTrigger->setLowerBound(0);
	m_state_EReference_deferrableTrigger->setUpperBound(-1);
	m_state_EReference_deferrableTrigger->setTransient(false);
	m_state_EReference_deferrableTrigger->setVolatile(false);
	m_state_EReference_deferrableTrigger->setChangeable(true);
	m_state_EReference_deferrableTrigger->setUnsettable(false);
	m_state_EReference_deferrableTrigger->setUnique(true);
	m_state_EReference_deferrableTrigger->setDerived(false);
	m_state_EReference_deferrableTrigger->setOrdered(false);
	m_state_EReference_deferrableTrigger->setContainment(true);
	m_state_EReference_deferrableTrigger->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_deferrableTrigger->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_deferrableTrigger->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_doActivity->setName("doActivity");
	m_state_EReference_doActivity->setEType(getBehavior_EClass());
	m_state_EReference_doActivity->setLowerBound(0);
	m_state_EReference_doActivity->setUpperBound(1);
	m_state_EReference_doActivity->setTransient(false);
	m_state_EReference_doActivity->setVolatile(false);
	m_state_EReference_doActivity->setChangeable(true);
	m_state_EReference_doActivity->setUnsettable(false);
	m_state_EReference_doActivity->setUnique(true);
	m_state_EReference_doActivity->setDerived(false);
	m_state_EReference_doActivity->setOrdered(false);
	m_state_EReference_doActivity->setContainment(true);
	m_state_EReference_doActivity->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_doActivity->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_doActivity->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_entry->setName("entry");
	m_state_EReference_entry->setEType(getBehavior_EClass());
	m_state_EReference_entry->setLowerBound(0);
	m_state_EReference_entry->setUpperBound(1);
	m_state_EReference_entry->setTransient(false);
	m_state_EReference_entry->setVolatile(false);
	m_state_EReference_entry->setChangeable(true);
	m_state_EReference_entry->setUnsettable(false);
	m_state_EReference_entry->setUnique(true);
	m_state_EReference_entry->setDerived(false);
	m_state_EReference_entry->setOrdered(false);
	m_state_EReference_entry->setContainment(true);
	m_state_EReference_entry->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_entry->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_entry->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_exit->setName("exit");
	m_state_EReference_exit->setEType(getBehavior_EClass());
	m_state_EReference_exit->setLowerBound(0);
	m_state_EReference_exit->setUpperBound(1);
	m_state_EReference_exit->setTransient(false);
	m_state_EReference_exit->setVolatile(false);
	m_state_EReference_exit->setChangeable(true);
	m_state_EReference_exit->setUnsettable(false);
	m_state_EReference_exit->setUnique(true);
	m_state_EReference_exit->setDerived(false);
	m_state_EReference_exit->setOrdered(false);
	m_state_EReference_exit->setContainment(true);
	m_state_EReference_exit->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_exit->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_exit->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_redefinedState->setName("redefinedState");
	m_state_EReference_redefinedState->setEType(getState_EClass());
	m_state_EReference_redefinedState->setLowerBound(0);
	m_state_EReference_redefinedState->setUpperBound(1);
	m_state_EReference_redefinedState->setTransient(false);
	m_state_EReference_redefinedState->setVolatile(false);
	m_state_EReference_redefinedState->setChangeable(true);
	m_state_EReference_redefinedState->setUnsettable(false);
	m_state_EReference_redefinedState->setUnique(true);
	m_state_EReference_redefinedState->setDerived(false);
	m_state_EReference_redefinedState->setOrdered(false);
	m_state_EReference_redefinedState->setContainment(false);
	m_state_EReference_redefinedState->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_redefinedState->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_redefinedState->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_region->setName("region");
	m_state_EReference_region->setEType(getRegion_EClass());
	m_state_EReference_region->setLowerBound(0);
	m_state_EReference_region->setUpperBound(-1);
	m_state_EReference_region->setTransient(false);
	m_state_EReference_region->setVolatile(false);
	m_state_EReference_region->setChangeable(true);
	m_state_EReference_region->setUnsettable(false);
	m_state_EReference_region->setUnique(true);
	m_state_EReference_region->setDerived(false);
	m_state_EReference_region->setOrdered(false);
	m_state_EReference_region->setContainment(true);
	m_state_EReference_region->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_region->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getRegion_EReference_state();
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_region->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_stateInvariant->setName("stateInvariant");
	m_state_EReference_stateInvariant->setEType(getConstraint_EClass());
	m_state_EReference_stateInvariant->setLowerBound(0);
	m_state_EReference_stateInvariant->setUpperBound(1);
	m_state_EReference_stateInvariant->setTransient(false);
	m_state_EReference_stateInvariant->setVolatile(false);
	m_state_EReference_stateInvariant->setChangeable(true);
	m_state_EReference_stateInvariant->setUnsettable(false);
	m_state_EReference_stateInvariant->setUnique(true);
	m_state_EReference_stateInvariant->setDerived(false);
	m_state_EReference_stateInvariant->setOrdered(false);
	m_state_EReference_stateInvariant->setContainment(false);
	m_state_EReference_stateInvariant->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_stateInvariant->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_stateInvariant->setEOpposite(otherEnd);
	    }
	}
	m_state_EReference_submachine->setName("submachine");
	m_state_EReference_submachine->setEType(getStateMachine_EClass());
	m_state_EReference_submachine->setLowerBound(0);
	m_state_EReference_submachine->setUpperBound(1);
	m_state_EReference_submachine->setTransient(false);
	m_state_EReference_submachine->setVolatile(false);
	m_state_EReference_submachine->setChangeable(true);
	m_state_EReference_submachine->setUnsettable(false);
	m_state_EReference_submachine->setUnique(true);
	m_state_EReference_submachine->setDerived(false);
	m_state_EReference_submachine->setOrdered(false);
	m_state_EReference_submachine->setContainment(false);
	m_state_EReference_submachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_state_EReference_submachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStateMachine_EReference_submachineState();
		if (otherEnd != nullptr)
	    {
	   		m_state_EReference_submachine->setEOpposite(otherEnd);
	    }
	}
	
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setName("composite_states");
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setLowerBound(0);
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setUpperBound(1);
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setUnique(true);
	m_state_EOperation_composite_states_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_composite_states_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_composite_states_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setName("destinations_or_sources_of_transitions");
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setLowerBound(0);
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setUpperBound(1);
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setUnique(true);
	m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_destinations_or_sources_of_transitions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setName("entry_or_exit");
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setLowerBound(0);
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setUpperBound(1);
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setUnique(true);
	m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_entry_or_exit_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_state_EOperation_isComposite->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EOperation_isComposite->setName("isComposite");
	m_state_EOperation_isComposite->setLowerBound(1);
	m_state_EOperation_isComposite->setUpperBound(1);
	m_state_EOperation_isComposite->setUnique(true);
	m_state_EOperation_isComposite->setOrdered(false);
	
	
	m_state_EOperation_isOrthogonal->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EOperation_isOrthogonal->setName("isOrthogonal");
	m_state_EOperation_isOrthogonal->setLowerBound(1);
	m_state_EOperation_isOrthogonal->setUpperBound(1);
	m_state_EOperation_isOrthogonal->setUnique(true);
	m_state_EOperation_isOrthogonal->setOrdered(false);
	
	
	m_state_EOperation_isSimple->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EOperation_isSimple->setName("isSimple");
	m_state_EOperation_isSimple->setLowerBound(1);
	m_state_EOperation_isSimple->setUpperBound(1);
	m_state_EOperation_isSimple->setUnique(true);
	m_state_EOperation_isSimple->setOrdered(false);
	
	
	m_state_EOperation_isSubmachineState->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_state_EOperation_isSubmachineState->setName("isSubmachineState");
	m_state_EOperation_isSubmachineState->setLowerBound(1);
	m_state_EOperation_isSubmachineState->setUpperBound(1);
	m_state_EOperation_isSubmachineState->setUnique(true);
	m_state_EOperation_isSubmachineState->setOrdered(false);
	
	
	m_state_EOperation_redefinitionContext->setEType(getClassifier_EClass());
	m_state_EOperation_redefinitionContext->setName("redefinitionContext");
	m_state_EOperation_redefinitionContext->setLowerBound(1);
	m_state_EOperation_redefinitionContext->setUpperBound(1);
	m_state_EOperation_redefinitionContext->setUnique(true);
	m_state_EOperation_redefinitionContext->setOrdered(false);
	
	
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setName("submachine_or_regions");
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setLowerBound(0);
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setUpperBound(1);
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setUnique(true);
	m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_submachine_or_regions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setName("submachine_states");
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setLowerBound(0);
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setUpperBound(1);
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setUnique(true);
	m_state_EOperation_submachine_states_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_submachine_states_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_state_EOperation_submachine_states_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStateInvariantContent()
{
	m_stateInvariant_EClass->setName("StateInvariant");
	m_stateInvariant_EClass->setAbstract(false);
	m_stateInvariant_EClass->setInterface(false);
	
	
	m_stateInvariant_EReference_invariant->setName("invariant");
	m_stateInvariant_EReference_invariant->setEType(getConstraint_EClass());
	m_stateInvariant_EReference_invariant->setLowerBound(1);
	m_stateInvariant_EReference_invariant->setUpperBound(1);
	m_stateInvariant_EReference_invariant->setTransient(false);
	m_stateInvariant_EReference_invariant->setVolatile(false);
	m_stateInvariant_EReference_invariant->setChangeable(true);
	m_stateInvariant_EReference_invariant->setUnsettable(false);
	m_stateInvariant_EReference_invariant->setUnique(true);
	m_stateInvariant_EReference_invariant->setDerived(false);
	m_stateInvariant_EReference_invariant->setOrdered(false);
	m_stateInvariant_EReference_invariant->setContainment(true);
	m_stateInvariant_EReference_invariant->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stateInvariant_EReference_invariant->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_stateInvariant_EReference_invariant->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeStateMachineContent()
{
	m_stateMachine_EClass->setName("StateMachine");
	m_stateMachine_EClass->setAbstract(false);
	m_stateMachine_EClass->setInterface(false);
	
	
	m_stateMachine_EReference_connectionPoint->setName("connectionPoint");
	m_stateMachine_EReference_connectionPoint->setEType(getPseudostate_EClass());
	m_stateMachine_EReference_connectionPoint->setLowerBound(0);
	m_stateMachine_EReference_connectionPoint->setUpperBound(-1);
	m_stateMachine_EReference_connectionPoint->setTransient(false);
	m_stateMachine_EReference_connectionPoint->setVolatile(false);
	m_stateMachine_EReference_connectionPoint->setChangeable(true);
	m_stateMachine_EReference_connectionPoint->setUnsettable(false);
	m_stateMachine_EReference_connectionPoint->setUnique(true);
	m_stateMachine_EReference_connectionPoint->setDerived(false);
	m_stateMachine_EReference_connectionPoint->setOrdered(false);
	m_stateMachine_EReference_connectionPoint->setContainment(true);
	m_stateMachine_EReference_connectionPoint->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stateMachine_EReference_connectionPoint->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPseudostate_EReference_stateMachine();
		if (otherEnd != nullptr)
	    {
	   		m_stateMachine_EReference_connectionPoint->setEOpposite(otherEnd);
	    }
	}
	m_stateMachine_EReference_extendedStateMachine->setName("extendedStateMachine");
	m_stateMachine_EReference_extendedStateMachine->setEType(getStateMachine_EClass());
	m_stateMachine_EReference_extendedStateMachine->setLowerBound(0);
	m_stateMachine_EReference_extendedStateMachine->setUpperBound(-1);
	m_stateMachine_EReference_extendedStateMachine->setTransient(false);
	m_stateMachine_EReference_extendedStateMachine->setVolatile(false);
	m_stateMachine_EReference_extendedStateMachine->setChangeable(true);
	m_stateMachine_EReference_extendedStateMachine->setUnsettable(false);
	m_stateMachine_EReference_extendedStateMachine->setUnique(true);
	m_stateMachine_EReference_extendedStateMachine->setDerived(false);
	m_stateMachine_EReference_extendedStateMachine->setOrdered(false);
	m_stateMachine_EReference_extendedStateMachine->setContainment(false);
	m_stateMachine_EReference_extendedStateMachine->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stateMachine_EReference_extendedStateMachine->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_stateMachine_EReference_extendedStateMachine->setEOpposite(otherEnd);
	    }
	}
	m_stateMachine_EReference_region->setName("region");
	m_stateMachine_EReference_region->setEType(getRegion_EClass());
	m_stateMachine_EReference_region->setLowerBound(1);
	m_stateMachine_EReference_region->setUpperBound(-1);
	m_stateMachine_EReference_region->setTransient(false);
	m_stateMachine_EReference_region->setVolatile(false);
	m_stateMachine_EReference_region->setChangeable(true);
	m_stateMachine_EReference_region->setUnsettable(false);
	m_stateMachine_EReference_region->setUnique(true);
	m_stateMachine_EReference_region->setDerived(false);
	m_stateMachine_EReference_region->setOrdered(false);
	m_stateMachine_EReference_region->setContainment(true);
	m_stateMachine_EReference_region->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stateMachine_EReference_region->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getRegion_EReference_stateMachine();
		if (otherEnd != nullptr)
	    {
	   		m_stateMachine_EReference_region->setEOpposite(otherEnd);
	    }
	}
	m_stateMachine_EReference_submachineState->setName("submachineState");
	m_stateMachine_EReference_submachineState->setEType(getState_EClass());
	m_stateMachine_EReference_submachineState->setLowerBound(0);
	m_stateMachine_EReference_submachineState->setUpperBound(-1);
	m_stateMachine_EReference_submachineState->setTransient(false);
	m_stateMachine_EReference_submachineState->setVolatile(false);
	m_stateMachine_EReference_submachineState->setChangeable(true);
	m_stateMachine_EReference_submachineState->setUnsettable(false);
	m_stateMachine_EReference_submachineState->setUnique(true);
	m_stateMachine_EReference_submachineState->setDerived(false);
	m_stateMachine_EReference_submachineState->setOrdered(false);
	m_stateMachine_EReference_submachineState->setContainment(false);
	m_stateMachine_EReference_submachineState->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stateMachine_EReference_submachineState->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getState_EReference_submachine();
		if (otherEnd != nullptr)
	    {
	   		m_stateMachine_EReference_submachineState->setEOpposite(otherEnd);
	    }
	}
	
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setEType(getRegion_EClass());
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setName("LCA");
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setLowerBound(1);
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setUpperBound(1);
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setUnique(true);
	m_stateMachine_EOperation_lCA_Vertex_Vertex->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_lCA_Vertex_Vertex);
		parameter->setName("s1");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_lCA_Vertex_Vertex);
		parameter->setName("s2");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setEType(getState_EClass());
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setName("LCAState");
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setLowerBound(1);
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setUpperBound(1);
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setUnique(true);
	m_stateMachine_EOperation_lCAState_Vertex_Vertex->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_lCAState_Vertex_Vertex);
		parameter->setName("v1");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_lCAState_Vertex_Vertex);
		parameter->setName("v2");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setName("ancestor");
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setLowerBound(1);
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setUpperBound(1);
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setUnique(true);
	m_stateMachine_EOperation_ancestor_Vertex_Vertex->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_ancestor_Vertex_Vertex);
		parameter->setName("s1");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_ancestor_Vertex_Vertex);
		parameter->setName("s2");
		parameter->setEType(getVertex_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setName("classifier_context");
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setLowerBound(0);
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setUpperBound(1);
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setUnique(true);
	m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_classifier_context_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setName("connection_points");
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setLowerBound(0);
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setUpperBound(1);
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setUnique(true);
	m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_connection_points_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setName("context_classifier");
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_context_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setName("method");
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setLowerBound(0);
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setUpperBound(1);
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setUnique(true);
	m_stateMachine_EOperation_method_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_method_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stateMachine_EOperation_method_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStereotypeContent()
{
	m_stereotype_EClass->setName("Stereotype");
	m_stereotype_EClass->setAbstract(false);
	m_stereotype_EClass->setInterface(false);
	
	
	m_stereotype_EReference_icon->setName("icon");
	m_stereotype_EReference_icon->setEType(getImage_EClass());
	m_stereotype_EReference_icon->setLowerBound(0);
	m_stereotype_EReference_icon->setUpperBound(-1);
	m_stereotype_EReference_icon->setTransient(false);
	m_stereotype_EReference_icon->setVolatile(false);
	m_stereotype_EReference_icon->setChangeable(true);
	m_stereotype_EReference_icon->setUnsettable(false);
	m_stereotype_EReference_icon->setUnique(true);
	m_stereotype_EReference_icon->setDerived(false);
	m_stereotype_EReference_icon->setOrdered(false);
	m_stereotype_EReference_icon->setContainment(true);
	m_stereotype_EReference_icon->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stereotype_EReference_icon->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_stereotype_EReference_icon->setEOpposite(otherEnd);
	    }
	}
	m_stereotype_EReference_profile->setName("profile");
	m_stereotype_EReference_profile->setEType(getProfile_EClass());
	m_stereotype_EReference_profile->setLowerBound(1);
	m_stereotype_EReference_profile->setUpperBound(1);
	m_stereotype_EReference_profile->setTransient(true);
	m_stereotype_EReference_profile->setVolatile(true);
	m_stereotype_EReference_profile->setChangeable(false);
	m_stereotype_EReference_profile->setUnsettable(false);
	m_stereotype_EReference_profile->setUnique(true);
	m_stereotype_EReference_profile->setDerived(true);
	m_stereotype_EReference_profile->setOrdered(false);
	m_stereotype_EReference_profile->setContainment(false);
	m_stereotype_EReference_profile->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stereotype_EReference_profile->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_stereotype_EReference_profile->setEOpposite(otherEnd);
	    }
	}
	
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setName("associationEndOwnership");
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_associationEndOwnership_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setName("base_property_multiplicity_multiple_extension");
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_multiplicity_multiple_extension_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setName("base_property_multiplicity_single_extension");
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_multiplicity_single_extension_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setName("base_property_upper_bound");
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_base_property_upper_bound_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setName("binaryAssociationsOnly");
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_binaryAssociationsOnly_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_containingProfile->setEType(getProfile_EClass());
	m_stereotype_EOperation_containingProfile->setName("containingProfile");
	m_stereotype_EOperation_containingProfile->setLowerBound(1);
	m_stereotype_EOperation_containingProfile->setUpperBound(1);
	m_stereotype_EOperation_containingProfile->setUnique(true);
	m_stereotype_EOperation_containingProfile->setOrdered(false);
	
	
	m_stereotype_EOperation_createExtension_Class_Boolean->setEType(getExtension_EClass());
	m_stereotype_EOperation_createExtension_Class_Boolean->setName("createExtension");
	m_stereotype_EOperation_createExtension_Class_Boolean->setLowerBound(1);
	m_stereotype_EOperation_createExtension_Class_Boolean->setUpperBound(1);
	m_stereotype_EOperation_createExtension_Class_Boolean->setUnique(true);
	m_stereotype_EOperation_createExtension_Class_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_createExtension_Class_Boolean);
		parameter->setName("metaclass");
		parameter->setEType(getClass_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_createExtension_Class_Boolean);
		parameter->setName("isRequired");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_createIcon_String->setEType(getImage_EClass());
	m_stereotype_EOperation_createIcon_String->setName("createIcon");
	m_stereotype_EOperation_createIcon_String->setLowerBound(1);
	m_stereotype_EOperation_createIcon_String->setUpperBound(1);
	m_stereotype_EOperation_createIcon_String->setUnique(true);
	m_stereotype_EOperation_createIcon_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_createIcon_String);
		parameter->setName("location");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_createIcon_String_String->setEType(getImage_EClass());
	m_stereotype_EOperation_createIcon_String_String->setName("createIcon");
	m_stereotype_EOperation_createIcon_String_String->setLowerBound(1);
	m_stereotype_EOperation_createIcon_String_String->setUpperBound(1);
	m_stereotype_EOperation_createIcon_String_String->setUnique(true);
	m_stereotype_EOperation_createIcon_String_String->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_createIcon_String_String);
		parameter->setName("format");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_createIcon_String_String);
		parameter->setName("content");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setName("generalize");
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_generalize_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_generalize_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_generalize_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_getAllExtendedMetaclasses->setEType(getClass_EClass());
	m_stereotype_EOperation_getAllExtendedMetaclasses->setName("getAllExtendedMetaclasses");
	m_stereotype_EOperation_getAllExtendedMetaclasses->setLowerBound(0);
	m_stereotype_EOperation_getAllExtendedMetaclasses->setUpperBound(-1);
	m_stereotype_EOperation_getAllExtendedMetaclasses->setUnique(true);
	m_stereotype_EOperation_getAllExtendedMetaclasses->setOrdered(false);
	
	
	m_stereotype_EOperation_getDefinition->setEType(ecore::EcorePackage::eInstance()->getEClass_EClass());
	m_stereotype_EOperation_getDefinition->setName("getDefinition");
	m_stereotype_EOperation_getDefinition->setLowerBound(0);
	m_stereotype_EOperation_getDefinition->setUpperBound(1);
	m_stereotype_EOperation_getDefinition->setUnique(true);
	m_stereotype_EOperation_getDefinition->setOrdered(false);
	
	
	m_stereotype_EOperation_getExtendedMetaclasses->setEType(getClass_EClass());
	m_stereotype_EOperation_getExtendedMetaclasses->setName("getExtendedMetaclasses");
	m_stereotype_EOperation_getExtendedMetaclasses->setLowerBound(0);
	m_stereotype_EOperation_getExtendedMetaclasses->setUpperBound(-1);
	m_stereotype_EOperation_getExtendedMetaclasses->setUnique(true);
	m_stereotype_EOperation_getExtendedMetaclasses->setOrdered(false);
	
	
	m_stereotype_EOperation_getKeyword->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_stereotype_EOperation_getKeyword->setName("getKeyword");
	m_stereotype_EOperation_getKeyword->setLowerBound(1);
	m_stereotype_EOperation_getKeyword->setUpperBound(1);
	m_stereotype_EOperation_getKeyword->setUnique(true);
	m_stereotype_EOperation_getKeyword->setOrdered(false);
	
	
	m_stereotype_EOperation_getKeyword_Boolean->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_stereotype_EOperation_getKeyword_Boolean->setName("getKeyword");
	m_stereotype_EOperation_getKeyword_Boolean->setLowerBound(1);
	m_stereotype_EOperation_getKeyword_Boolean->setUpperBound(1);
	m_stereotype_EOperation_getKeyword_Boolean->setUnique(true);
	m_stereotype_EOperation_getKeyword_Boolean->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_getKeyword_Boolean);
		parameter->setName("localize");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stereotype_EOperation_getProfile->setEType(getProfile_EClass());
	m_stereotype_EOperation_getProfile->setName("getProfile");
	m_stereotype_EOperation_getProfile->setLowerBound(1);
	m_stereotype_EOperation_getProfile->setUpperBound(1);
	m_stereotype_EOperation_getProfile->setUnique(true);
	m_stereotype_EOperation_getProfile->setOrdered(false);
	
	
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setName("name_not_clash");
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setLowerBound(0);
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setUpperBound(1);
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setUnique(true);
	m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stereotype_EOperation_name_not_clash_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStringExpressionContent()
{
	m_stringExpression_EClass->setName("StringExpression");
	m_stringExpression_EClass->setAbstract(false);
	m_stringExpression_EClass->setInterface(false);
	
	
	m_stringExpression_EReference_owningExpression->setName("owningExpression");
	m_stringExpression_EReference_owningExpression->setEType(getStringExpression_EClass());
	m_stringExpression_EReference_owningExpression->setLowerBound(0);
	m_stringExpression_EReference_owningExpression->setUpperBound(1);
	m_stringExpression_EReference_owningExpression->setTransient(false);
	m_stringExpression_EReference_owningExpression->setVolatile(false);
	m_stringExpression_EReference_owningExpression->setChangeable(true);
	m_stringExpression_EReference_owningExpression->setUnsettable(false);
	m_stringExpression_EReference_owningExpression->setUnique(true);
	m_stringExpression_EReference_owningExpression->setDerived(false);
	m_stringExpression_EReference_owningExpression->setOrdered(false);
	m_stringExpression_EReference_owningExpression->setContainment(false);
	m_stringExpression_EReference_owningExpression->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stringExpression_EReference_owningExpression->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStringExpression_EReference_subExpression();
		if (otherEnd != nullptr)
	    {
	   		m_stringExpression_EReference_owningExpression->setEOpposite(otherEnd);
	    }
	}
	m_stringExpression_EReference_subExpression->setName("subExpression");
	m_stringExpression_EReference_subExpression->setEType(getStringExpression_EClass());
	m_stringExpression_EReference_subExpression->setLowerBound(0);
	m_stringExpression_EReference_subExpression->setUpperBound(-1);
	m_stringExpression_EReference_subExpression->setTransient(false);
	m_stringExpression_EReference_subExpression->setVolatile(false);
	m_stringExpression_EReference_subExpression->setChangeable(true);
	m_stringExpression_EReference_subExpression->setUnsettable(false);
	m_stringExpression_EReference_subExpression->setUnique(true);
	m_stringExpression_EReference_subExpression->setDerived(false);
	m_stringExpression_EReference_subExpression->setOrdered(true);
	m_stringExpression_EReference_subExpression->setContainment(true);
	m_stringExpression_EReference_subExpression->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_stringExpression_EReference_subExpression->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStringExpression_EReference_owningExpression();
		if (otherEnd != nullptr)
	    {
	   		m_stringExpression_EReference_subExpression->setEOpposite(otherEnd);
	    }
	}
	
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setName("operands");
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setLowerBound(0);
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setUpperBound(1);
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setUnique(true);
	m_stringExpression_EOperation_operands_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stringExpression_EOperation_operands_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stringExpression_EOperation_operands_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setName("subexpressions");
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setLowerBound(0);
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setUpperBound(1);
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setUnique(true);
	m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_stringExpression_EOperation_subexpressions_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStructuralFeatureContent()
{
	m_structuralFeature_EClass->setName("StructuralFeature");
	m_structuralFeature_EClass->setAbstract(true);
	m_structuralFeature_EClass->setInterface(false);
	
	m_structuralFeature_EAttribute_isReadOnly = getStructuralFeature_EAttribute_isReadOnly();
	m_structuralFeature_EAttribute_isReadOnly->setName("isReadOnly");
	m_structuralFeature_EAttribute_isReadOnly->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_structuralFeature_EAttribute_isReadOnly->setLowerBound(1);
	m_structuralFeature_EAttribute_isReadOnly->setUpperBound(1);
	m_structuralFeature_EAttribute_isReadOnly->setTransient(false);
	m_structuralFeature_EAttribute_isReadOnly->setVolatile(false);
	m_structuralFeature_EAttribute_isReadOnly->setChangeable(true);
	m_structuralFeature_EAttribute_isReadOnly->setUnsettable(false);
	m_structuralFeature_EAttribute_isReadOnly->setUnique(true);
	m_structuralFeature_EAttribute_isReadOnly->setDerived(false);
	m_structuralFeature_EAttribute_isReadOnly->setOrdered(false);
	m_structuralFeature_EAttribute_isReadOnly->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_structuralFeature_EAttribute_isReadOnly->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	
}

void UmlPackageImpl::initializeStructuralFeatureActionContent()
{
	m_structuralFeatureAction_EClass->setName("StructuralFeatureAction");
	m_structuralFeatureAction_EClass->setAbstract(true);
	m_structuralFeatureAction_EClass->setInterface(false);
	
	
	m_structuralFeatureAction_EReference_object->setName("object");
	m_structuralFeatureAction_EReference_object->setEType(getInputPin_EClass());
	m_structuralFeatureAction_EReference_object->setLowerBound(1);
	m_structuralFeatureAction_EReference_object->setUpperBound(1);
	m_structuralFeatureAction_EReference_object->setTransient(false);
	m_structuralFeatureAction_EReference_object->setVolatile(false);
	m_structuralFeatureAction_EReference_object->setChangeable(true);
	m_structuralFeatureAction_EReference_object->setUnsettable(false);
	m_structuralFeatureAction_EReference_object->setUnique(true);
	m_structuralFeatureAction_EReference_object->setDerived(false);
	m_structuralFeatureAction_EReference_object->setOrdered(false);
	m_structuralFeatureAction_EReference_object->setContainment(true);
	m_structuralFeatureAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuralFeatureAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInputPin_EReference_structuralFeatureAction();
		if (otherEnd != nullptr)
	    {
	   		m_structuralFeatureAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_structuralFeatureAction_EReference_structuralFeature->setName("structuralFeature");
	m_structuralFeatureAction_EReference_structuralFeature->setEType(getStructuralFeature_EClass());
	m_structuralFeatureAction_EReference_structuralFeature->setLowerBound(1);
	m_structuralFeatureAction_EReference_structuralFeature->setUpperBound(1);
	m_structuralFeatureAction_EReference_structuralFeature->setTransient(false);
	m_structuralFeatureAction_EReference_structuralFeature->setVolatile(false);
	m_structuralFeatureAction_EReference_structuralFeature->setChangeable(true);
	m_structuralFeatureAction_EReference_structuralFeature->setUnsettable(false);
	m_structuralFeatureAction_EReference_structuralFeature->setUnique(true);
	m_structuralFeatureAction_EReference_structuralFeature->setDerived(false);
	m_structuralFeatureAction_EReference_structuralFeature->setOrdered(false);
	m_structuralFeatureAction_EReference_structuralFeature->setContainment(false);
	m_structuralFeatureAction_EReference_structuralFeature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuralFeatureAction_EReference_structuralFeature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuralFeatureAction_EReference_structuralFeature->setEOpposite(otherEnd);
	    }
	}
	
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setName("not_static");
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setUnique(true);
	m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_not_static_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setName("object_type");
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setUnique(true);
	m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_object_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setName("one_featuring_classifier");
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setUnique(true);
	m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_one_featuring_classifier_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setName("visibility");
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setUnique(true);
	m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuralFeatureAction_EOperation_visibility_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeStructuredActivityNodeContent()
{
	m_structuredActivityNode_EClass->setName("StructuredActivityNode");
	m_structuredActivityNode_EClass->setAbstract(false);
	m_structuredActivityNode_EClass->setInterface(false);
	
	m_structuredActivityNode_EAttribute_mustIsolate = getStructuredActivityNode_EAttribute_mustIsolate();
	m_structuredActivityNode_EAttribute_mustIsolate->setName("mustIsolate");
	m_structuredActivityNode_EAttribute_mustIsolate->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_structuredActivityNode_EAttribute_mustIsolate->setLowerBound(1);
	m_structuredActivityNode_EAttribute_mustIsolate->setUpperBound(1);
	m_structuredActivityNode_EAttribute_mustIsolate->setTransient(false);
	m_structuredActivityNode_EAttribute_mustIsolate->setVolatile(false);
	m_structuredActivityNode_EAttribute_mustIsolate->setChangeable(true);
	m_structuredActivityNode_EAttribute_mustIsolate->setUnsettable(false);
	m_structuredActivityNode_EAttribute_mustIsolate->setUnique(true);
	m_structuredActivityNode_EAttribute_mustIsolate->setDerived(false);
	m_structuredActivityNode_EAttribute_mustIsolate->setOrdered(false);
	m_structuredActivityNode_EAttribute_mustIsolate->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_structuredActivityNode_EAttribute_mustIsolate->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_structuredActivityNode_EReference_edge->setName("edge");
	m_structuredActivityNode_EReference_edge->setEType(getActivityEdge_EClass());
	m_structuredActivityNode_EReference_edge->setLowerBound(0);
	m_structuredActivityNode_EReference_edge->setUpperBound(-1);
	m_structuredActivityNode_EReference_edge->setTransient(false);
	m_structuredActivityNode_EReference_edge->setVolatile(false);
	m_structuredActivityNode_EReference_edge->setChangeable(true);
	m_structuredActivityNode_EReference_edge->setUnsettable(false);
	m_structuredActivityNode_EReference_edge->setUnique(true);
	m_structuredActivityNode_EReference_edge->setDerived(false);
	m_structuredActivityNode_EReference_edge->setOrdered(false);
	m_structuredActivityNode_EReference_edge->setContainment(true);
	m_structuredActivityNode_EReference_edge->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredActivityNode_EReference_edge->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityEdge_EReference_inStructuredNode();
		if (otherEnd != nullptr)
	    {
	   		m_structuredActivityNode_EReference_edge->setEOpposite(otherEnd);
	    }
	}
	m_structuredActivityNode_EReference_node->setName("node");
	m_structuredActivityNode_EReference_node->setEType(getActivityNode_EClass());
	m_structuredActivityNode_EReference_node->setLowerBound(0);
	m_structuredActivityNode_EReference_node->setUpperBound(-1);
	m_structuredActivityNode_EReference_node->setTransient(false);
	m_structuredActivityNode_EReference_node->setVolatile(false);
	m_structuredActivityNode_EReference_node->setChangeable(true);
	m_structuredActivityNode_EReference_node->setUnsettable(false);
	m_structuredActivityNode_EReference_node->setUnique(true);
	m_structuredActivityNode_EReference_node->setDerived(false);
	m_structuredActivityNode_EReference_node->setOrdered(false);
	m_structuredActivityNode_EReference_node->setContainment(true);
	m_structuredActivityNode_EReference_node->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredActivityNode_EReference_node->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivityNode_EReference_inStructuredNode();
		if (otherEnd != nullptr)
	    {
	   		m_structuredActivityNode_EReference_node->setEOpposite(otherEnd);
	    }
	}
	m_structuredActivityNode_EReference_structuredNodeInput->setName("structuredNodeInput");
	m_structuredActivityNode_EReference_structuredNodeInput->setEType(getInputPin_EClass());
	m_structuredActivityNode_EReference_structuredNodeInput->setLowerBound(0);
	m_structuredActivityNode_EReference_structuredNodeInput->setUpperBound(-1);
	m_structuredActivityNode_EReference_structuredNodeInput->setTransient(false);
	m_structuredActivityNode_EReference_structuredNodeInput->setVolatile(false);
	m_structuredActivityNode_EReference_structuredNodeInput->setChangeable(true);
	m_structuredActivityNode_EReference_structuredNodeInput->setUnsettable(false);
	m_structuredActivityNode_EReference_structuredNodeInput->setUnique(true);
	m_structuredActivityNode_EReference_structuredNodeInput->setDerived(false);
	m_structuredActivityNode_EReference_structuredNodeInput->setOrdered(false);
	m_structuredActivityNode_EReference_structuredNodeInput->setContainment(true);
	m_structuredActivityNode_EReference_structuredNodeInput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredActivityNode_EReference_structuredNodeInput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuredActivityNode_EReference_structuredNodeInput->setEOpposite(otherEnd);
	    }
	}
	m_structuredActivityNode_EReference_structuredNodeOutput->setName("structuredNodeOutput");
	m_structuredActivityNode_EReference_structuredNodeOutput->setEType(getOutputPin_EClass());
	m_structuredActivityNode_EReference_structuredNodeOutput->setLowerBound(0);
	m_structuredActivityNode_EReference_structuredNodeOutput->setUpperBound(-1);
	m_structuredActivityNode_EReference_structuredNodeOutput->setTransient(false);
	m_structuredActivityNode_EReference_structuredNodeOutput->setVolatile(false);
	m_structuredActivityNode_EReference_structuredNodeOutput->setChangeable(true);
	m_structuredActivityNode_EReference_structuredNodeOutput->setUnsettable(false);
	m_structuredActivityNode_EReference_structuredNodeOutput->setUnique(true);
	m_structuredActivityNode_EReference_structuredNodeOutput->setDerived(false);
	m_structuredActivityNode_EReference_structuredNodeOutput->setOrdered(false);
	m_structuredActivityNode_EReference_structuredNodeOutput->setContainment(true);
	m_structuredActivityNode_EReference_structuredNodeOutput->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredActivityNode_EReference_structuredNodeOutput->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuredActivityNode_EReference_structuredNodeOutput->setEOpposite(otherEnd);
	    }
	}
	m_structuredActivityNode_EReference_variable->setName("variable");
	m_structuredActivityNode_EReference_variable->setEType(getVariable_EClass());
	m_structuredActivityNode_EReference_variable->setLowerBound(0);
	m_structuredActivityNode_EReference_variable->setUpperBound(-1);
	m_structuredActivityNode_EReference_variable->setTransient(false);
	m_structuredActivityNode_EReference_variable->setVolatile(false);
	m_structuredActivityNode_EReference_variable->setChangeable(true);
	m_structuredActivityNode_EReference_variable->setUnsettable(false);
	m_structuredActivityNode_EReference_variable->setUnique(true);
	m_structuredActivityNode_EReference_variable->setDerived(false);
	m_structuredActivityNode_EReference_variable->setOrdered(false);
	m_structuredActivityNode_EReference_variable->setContainment(true);
	m_structuredActivityNode_EReference_variable->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredActivityNode_EReference_variable->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getVariable_EReference_scope();
		if (otherEnd != nullptr)
	    {
	   		m_structuredActivityNode_EReference_variable->setEOpposite(otherEnd);
	    }
	}
	
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setName("edges");
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setUnique(true);
	m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setName("input_pin_edges");
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setUnique(true);
	m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_input_pin_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setName("output_pin_edges");
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setUnique(true);
	m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredActivityNode_EOperation_output_pin_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuredActivityNode_EOperation_sourceNodes->setEType(getActivityNode_EClass());
	m_structuredActivityNode_EOperation_sourceNodes->setName("sourceNodes");
	m_structuredActivityNode_EOperation_sourceNodes->setLowerBound(0);
	m_structuredActivityNode_EOperation_sourceNodes->setUpperBound(-1);
	m_structuredActivityNode_EOperation_sourceNodes->setUnique(true);
	m_structuredActivityNode_EOperation_sourceNodes->setOrdered(false);
	
	
	m_structuredActivityNode_EOperation_targetNodes->setEType(getActivityNode_EClass());
	m_structuredActivityNode_EOperation_targetNodes->setName("targetNodes");
	m_structuredActivityNode_EOperation_targetNodes->setLowerBound(0);
	m_structuredActivityNode_EOperation_targetNodes->setUpperBound(-1);
	m_structuredActivityNode_EOperation_targetNodes->setUnique(true);
	m_structuredActivityNode_EOperation_targetNodes->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeStructuredClassifierContent()
{
	m_structuredClassifier_EClass->setName("StructuredClassifier");
	m_structuredClassifier_EClass->setAbstract(true);
	m_structuredClassifier_EClass->setInterface(false);
	
	
	m_structuredClassifier_EReference_ownedAttribute->setName("ownedAttribute");
	m_structuredClassifier_EReference_ownedAttribute->setEType(getProperty_EClass());
	m_structuredClassifier_EReference_ownedAttribute->setLowerBound(0);
	m_structuredClassifier_EReference_ownedAttribute->setUpperBound(-1);
	m_structuredClassifier_EReference_ownedAttribute->setTransient(false);
	m_structuredClassifier_EReference_ownedAttribute->setVolatile(false);
	m_structuredClassifier_EReference_ownedAttribute->setChangeable(true);
	m_structuredClassifier_EReference_ownedAttribute->setUnsettable(false);
	m_structuredClassifier_EReference_ownedAttribute->setUnique(true);
	m_structuredClassifier_EReference_ownedAttribute->setDerived(false);
	m_structuredClassifier_EReference_ownedAttribute->setOrdered(true);
	m_structuredClassifier_EReference_ownedAttribute->setContainment(true);
	m_structuredClassifier_EReference_ownedAttribute->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredClassifier_EReference_ownedAttribute->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getProperty_EReference_class();
		if (otherEnd != nullptr)
	    {
	   		m_structuredClassifier_EReference_ownedAttribute->setEOpposite(otherEnd);
	    }
	}
	m_structuredClassifier_EReference_ownedConnector->setName("ownedConnector");
	m_structuredClassifier_EReference_ownedConnector->setEType(getConnector_EClass());
	m_structuredClassifier_EReference_ownedConnector->setLowerBound(0);
	m_structuredClassifier_EReference_ownedConnector->setUpperBound(-1);
	m_structuredClassifier_EReference_ownedConnector->setTransient(false);
	m_structuredClassifier_EReference_ownedConnector->setVolatile(false);
	m_structuredClassifier_EReference_ownedConnector->setChangeable(true);
	m_structuredClassifier_EReference_ownedConnector->setUnsettable(false);
	m_structuredClassifier_EReference_ownedConnector->setUnique(true);
	m_structuredClassifier_EReference_ownedConnector->setDerived(false);
	m_structuredClassifier_EReference_ownedConnector->setOrdered(false);
	m_structuredClassifier_EReference_ownedConnector->setContainment(true);
	m_structuredClassifier_EReference_ownedConnector->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredClassifier_EReference_ownedConnector->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuredClassifier_EReference_ownedConnector->setEOpposite(otherEnd);
	    }
	}
	m_structuredClassifier_EReference_part->setName("part");
	m_structuredClassifier_EReference_part->setEType(getProperty_EClass());
	m_structuredClassifier_EReference_part->setLowerBound(0);
	m_structuredClassifier_EReference_part->setUpperBound(-1);
	m_structuredClassifier_EReference_part->setTransient(true);
	m_structuredClassifier_EReference_part->setVolatile(true);
	m_structuredClassifier_EReference_part->setChangeable(false);
	m_structuredClassifier_EReference_part->setUnsettable(false);
	m_structuredClassifier_EReference_part->setUnique(true);
	m_structuredClassifier_EReference_part->setDerived(true);
	m_structuredClassifier_EReference_part->setOrdered(false);
	m_structuredClassifier_EReference_part->setContainment(false);
	m_structuredClassifier_EReference_part->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredClassifier_EReference_part->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuredClassifier_EReference_part->setEOpposite(otherEnd);
	    }
	}
	m_structuredClassifier_EReference_role->setName("role");
	m_structuredClassifier_EReference_role->setEType(getConnectableElement_EClass());
	m_structuredClassifier_EReference_role->setLowerBound(0);
	m_structuredClassifier_EReference_role->setUpperBound(-1);
	m_structuredClassifier_EReference_role->setTransient(true);
	m_structuredClassifier_EReference_role->setVolatile(true);
	m_structuredClassifier_EReference_role->setChangeable(false);
	m_structuredClassifier_EReference_role->setUnsettable(false);
	m_structuredClassifier_EReference_role->setUnique(true);
	m_structuredClassifier_EReference_role->setDerived(true);
	m_structuredClassifier_EReference_role->setOrdered(false);
	m_structuredClassifier_EReference_role->setContainment(false);
	m_structuredClassifier_EReference_role->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_structuredClassifier_EReference_role->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_structuredClassifier_EReference_role->setEOpposite(otherEnd);
	    }
	}
	
	m_structuredClassifier_EOperation_allRoles->setEType(getConnectableElement_EClass());
	m_structuredClassifier_EOperation_allRoles->setName("allRoles");
	m_structuredClassifier_EOperation_allRoles->setLowerBound(0);
	m_structuredClassifier_EOperation_allRoles->setUpperBound(-1);
	m_structuredClassifier_EOperation_allRoles->setUnique(true);
	m_structuredClassifier_EOperation_allRoles->setOrdered(false);
	
	
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setEType(getProperty_EClass());
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setName("createOwnedAttribute");
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setLowerBound(1);
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUpperBound(1);
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setUnique(true);
	m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_structuredClassifier_EOperation_createOwnedAttribute_String_UnlimitedNatural);
		parameter->setName("upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_structuredClassifier_EOperation_getParts->setEType(getProperty_EClass());
	m_structuredClassifier_EOperation_getParts->setName("getParts");
	m_structuredClassifier_EOperation_getParts->setLowerBound(0);
	m_structuredClassifier_EOperation_getParts->setUpperBound(-1);
	m_structuredClassifier_EOperation_getParts->setUnique(true);
	m_structuredClassifier_EOperation_getParts->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeSubstitutionContent()
{
	m_substitution_EClass->setName("Substitution");
	m_substitution_EClass->setAbstract(false);
	m_substitution_EClass->setInterface(false);
	
	
	m_substitution_EReference_contract->setName("contract");
	m_substitution_EReference_contract->setEType(getClassifier_EClass());
	m_substitution_EReference_contract->setLowerBound(1);
	m_substitution_EReference_contract->setUpperBound(1);
	m_substitution_EReference_contract->setTransient(false);
	m_substitution_EReference_contract->setVolatile(false);
	m_substitution_EReference_contract->setChangeable(true);
	m_substitution_EReference_contract->setUnsettable(false);
	m_substitution_EReference_contract->setUnique(true);
	m_substitution_EReference_contract->setDerived(false);
	m_substitution_EReference_contract->setOrdered(false);
	m_substitution_EReference_contract->setContainment(false);
	m_substitution_EReference_contract->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_substitution_EReference_contract->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_substitution_EReference_contract->setEOpposite(otherEnd);
	    }
	}
	m_substitution_EReference_substitutingClassifier->setName("substitutingClassifier");
	m_substitution_EReference_substitutingClassifier->setEType(getClassifier_EClass());
	m_substitution_EReference_substitutingClassifier->setLowerBound(1);
	m_substitution_EReference_substitutingClassifier->setUpperBound(1);
	m_substitution_EReference_substitutingClassifier->setTransient(false);
	m_substitution_EReference_substitutingClassifier->setVolatile(false);
	m_substitution_EReference_substitutingClassifier->setChangeable(true);
	m_substitution_EReference_substitutingClassifier->setUnsettable(false);
	m_substitution_EReference_substitutingClassifier->setUnique(true);
	m_substitution_EReference_substitutingClassifier->setDerived(false);
	m_substitution_EReference_substitutingClassifier->setOrdered(false);
	m_substitution_EReference_substitutingClassifier->setContainment(false);
	m_substitution_EReference_substitutingClassifier->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_substitution_EReference_substitutingClassifier->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClassifier_EReference_substitution();
		if (otherEnd != nullptr)
	    {
	   		m_substitution_EReference_substitutingClassifier->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeTemplateBindingContent()
{
	m_templateBinding_EClass->setName("TemplateBinding");
	m_templateBinding_EClass->setAbstract(false);
	m_templateBinding_EClass->setInterface(false);
	
	
	m_templateBinding_EReference_boundElement->setName("boundElement");
	m_templateBinding_EReference_boundElement->setEType(getTemplateableElement_EClass());
	m_templateBinding_EReference_boundElement->setLowerBound(1);
	m_templateBinding_EReference_boundElement->setUpperBound(1);
	m_templateBinding_EReference_boundElement->setTransient(false);
	m_templateBinding_EReference_boundElement->setVolatile(false);
	m_templateBinding_EReference_boundElement->setChangeable(true);
	m_templateBinding_EReference_boundElement->setUnsettable(false);
	m_templateBinding_EReference_boundElement->setUnique(true);
	m_templateBinding_EReference_boundElement->setDerived(false);
	m_templateBinding_EReference_boundElement->setOrdered(false);
	m_templateBinding_EReference_boundElement->setContainment(false);
	m_templateBinding_EReference_boundElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateBinding_EReference_boundElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateableElement_EReference_templateBinding();
		if (otherEnd != nullptr)
	    {
	   		m_templateBinding_EReference_boundElement->setEOpposite(otherEnd);
	    }
	}
	m_templateBinding_EReference_parameterSubstitution->setName("parameterSubstitution");
	m_templateBinding_EReference_parameterSubstitution->setEType(getTemplateParameterSubstitution_EClass());
	m_templateBinding_EReference_parameterSubstitution->setLowerBound(0);
	m_templateBinding_EReference_parameterSubstitution->setUpperBound(-1);
	m_templateBinding_EReference_parameterSubstitution->setTransient(false);
	m_templateBinding_EReference_parameterSubstitution->setVolatile(false);
	m_templateBinding_EReference_parameterSubstitution->setChangeable(true);
	m_templateBinding_EReference_parameterSubstitution->setUnsettable(false);
	m_templateBinding_EReference_parameterSubstitution->setUnique(true);
	m_templateBinding_EReference_parameterSubstitution->setDerived(false);
	m_templateBinding_EReference_parameterSubstitution->setOrdered(false);
	m_templateBinding_EReference_parameterSubstitution->setContainment(true);
	m_templateBinding_EReference_parameterSubstitution->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateBinding_EReference_parameterSubstitution->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateParameterSubstitution_EReference_templateBinding();
		if (otherEnd != nullptr)
	    {
	   		m_templateBinding_EReference_parameterSubstitution->setEOpposite(otherEnd);
	    }
	}
	m_templateBinding_EReference_signature->setName("signature");
	m_templateBinding_EReference_signature->setEType(getTemplateSignature_EClass());
	m_templateBinding_EReference_signature->setLowerBound(1);
	m_templateBinding_EReference_signature->setUpperBound(1);
	m_templateBinding_EReference_signature->setTransient(false);
	m_templateBinding_EReference_signature->setVolatile(false);
	m_templateBinding_EReference_signature->setChangeable(true);
	m_templateBinding_EReference_signature->setUnsettable(false);
	m_templateBinding_EReference_signature->setUnique(true);
	m_templateBinding_EReference_signature->setDerived(false);
	m_templateBinding_EReference_signature->setOrdered(false);
	m_templateBinding_EReference_signature->setContainment(false);
	m_templateBinding_EReference_signature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateBinding_EReference_signature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateBinding_EReference_signature->setEOpposite(otherEnd);
	    }
	}
	
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setName("one_parameter_substitution");
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setUnique(true);
	m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateBinding_EOperation_one_parameter_substitution_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setName("parameter_substitution_formal");
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setUnique(true);
	m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateBinding_EOperation_parameter_substitution_formal_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTemplateParameterContent()
{
	m_templateParameter_EClass->setName("TemplateParameter");
	m_templateParameter_EClass->setAbstract(false);
	m_templateParameter_EClass->setInterface(false);
	
	
	m_templateParameter_EReference_default->setName("default");
	m_templateParameter_EReference_default->setEType(getParameterableElement_EClass());
	m_templateParameter_EReference_default->setLowerBound(0);
	m_templateParameter_EReference_default->setUpperBound(1);
	m_templateParameter_EReference_default->setTransient(false);
	m_templateParameter_EReference_default->setVolatile(false);
	m_templateParameter_EReference_default->setChangeable(true);
	m_templateParameter_EReference_default->setUnsettable(false);
	m_templateParameter_EReference_default->setUnique(true);
	m_templateParameter_EReference_default->setDerived(false);
	m_templateParameter_EReference_default->setOrdered(false);
	m_templateParameter_EReference_default->setContainment(false);
	m_templateParameter_EReference_default->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameter_EReference_default->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateParameter_EReference_default->setEOpposite(otherEnd);
	    }
	}
	m_templateParameter_EReference_ownedDefault->setName("ownedDefault");
	m_templateParameter_EReference_ownedDefault->setEType(getParameterableElement_EClass());
	m_templateParameter_EReference_ownedDefault->setLowerBound(0);
	m_templateParameter_EReference_ownedDefault->setUpperBound(1);
	m_templateParameter_EReference_ownedDefault->setTransient(false);
	m_templateParameter_EReference_ownedDefault->setVolatile(false);
	m_templateParameter_EReference_ownedDefault->setChangeable(true);
	m_templateParameter_EReference_ownedDefault->setUnsettable(false);
	m_templateParameter_EReference_ownedDefault->setUnique(true);
	m_templateParameter_EReference_ownedDefault->setDerived(false);
	m_templateParameter_EReference_ownedDefault->setOrdered(false);
	m_templateParameter_EReference_ownedDefault->setContainment(true);
	m_templateParameter_EReference_ownedDefault->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameter_EReference_ownedDefault->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateParameter_EReference_ownedDefault->setEOpposite(otherEnd);
	    }
	}
	m_templateParameter_EReference_ownedParameteredElement->setName("ownedParameteredElement");
	m_templateParameter_EReference_ownedParameteredElement->setEType(getParameterableElement_EClass());
	m_templateParameter_EReference_ownedParameteredElement->setLowerBound(0);
	m_templateParameter_EReference_ownedParameteredElement->setUpperBound(1);
	m_templateParameter_EReference_ownedParameteredElement->setTransient(false);
	m_templateParameter_EReference_ownedParameteredElement->setVolatile(false);
	m_templateParameter_EReference_ownedParameteredElement->setChangeable(true);
	m_templateParameter_EReference_ownedParameteredElement->setUnsettable(false);
	m_templateParameter_EReference_ownedParameteredElement->setUnique(true);
	m_templateParameter_EReference_ownedParameteredElement->setDerived(false);
	m_templateParameter_EReference_ownedParameteredElement->setOrdered(false);
	m_templateParameter_EReference_ownedParameteredElement->setContainment(true);
	m_templateParameter_EReference_ownedParameteredElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameter_EReference_ownedParameteredElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameterableElement_EReference_owningTemplateParameter();
		if (otherEnd != nullptr)
	    {
	   		m_templateParameter_EReference_ownedParameteredElement->setEOpposite(otherEnd);
	    }
	}
	m_templateParameter_EReference_parameteredElement->setName("parameteredElement");
	m_templateParameter_EReference_parameteredElement->setEType(getParameterableElement_EClass());
	m_templateParameter_EReference_parameteredElement->setLowerBound(1);
	m_templateParameter_EReference_parameteredElement->setUpperBound(1);
	m_templateParameter_EReference_parameteredElement->setTransient(false);
	m_templateParameter_EReference_parameteredElement->setVolatile(false);
	m_templateParameter_EReference_parameteredElement->setChangeable(true);
	m_templateParameter_EReference_parameteredElement->setUnsettable(false);
	m_templateParameter_EReference_parameteredElement->setUnique(true);
	m_templateParameter_EReference_parameteredElement->setDerived(false);
	m_templateParameter_EReference_parameteredElement->setOrdered(false);
	m_templateParameter_EReference_parameteredElement->setContainment(false);
	m_templateParameter_EReference_parameteredElement->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameter_EReference_parameteredElement->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getParameterableElement_EReference_templateParameter();
		if (otherEnd != nullptr)
	    {
	   		m_templateParameter_EReference_parameteredElement->setEOpposite(otherEnd);
	    }
	}
	m_templateParameter_EReference_signature->setName("signature");
	m_templateParameter_EReference_signature->setEType(getTemplateSignature_EClass());
	m_templateParameter_EReference_signature->setLowerBound(1);
	m_templateParameter_EReference_signature->setUpperBound(1);
	m_templateParameter_EReference_signature->setTransient(false);
	m_templateParameter_EReference_signature->setVolatile(false);
	m_templateParameter_EReference_signature->setChangeable(true);
	m_templateParameter_EReference_signature->setUnsettable(false);
	m_templateParameter_EReference_signature->setUnique(true);
	m_templateParameter_EReference_signature->setDerived(false);
	m_templateParameter_EReference_signature->setOrdered(false);
	m_templateParameter_EReference_signature->setContainment(false);
	m_templateParameter_EReference_signature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameter_EReference_signature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateSignature_EReference_ownedParameter();
		if (otherEnd != nullptr)
	    {
	   		m_templateParameter_EReference_signature->setEOpposite(otherEnd);
	    }
	}
	
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setName("must_be_compatible");
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setUnique(true);
	m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateParameter_EOperation_must_be_compatible_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTemplateParameterSubstitutionContent()
{
	m_templateParameterSubstitution_EClass->setName("TemplateParameterSubstitution");
	m_templateParameterSubstitution_EClass->setAbstract(false);
	m_templateParameterSubstitution_EClass->setInterface(false);
	
	
	m_templateParameterSubstitution_EReference_actual->setName("actual");
	m_templateParameterSubstitution_EReference_actual->setEType(getParameterableElement_EClass());
	m_templateParameterSubstitution_EReference_actual->setLowerBound(1);
	m_templateParameterSubstitution_EReference_actual->setUpperBound(1);
	m_templateParameterSubstitution_EReference_actual->setTransient(false);
	m_templateParameterSubstitution_EReference_actual->setVolatile(false);
	m_templateParameterSubstitution_EReference_actual->setChangeable(true);
	m_templateParameterSubstitution_EReference_actual->setUnsettable(false);
	m_templateParameterSubstitution_EReference_actual->setUnique(true);
	m_templateParameterSubstitution_EReference_actual->setDerived(false);
	m_templateParameterSubstitution_EReference_actual->setOrdered(false);
	m_templateParameterSubstitution_EReference_actual->setContainment(false);
	m_templateParameterSubstitution_EReference_actual->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameterSubstitution_EReference_actual->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateParameterSubstitution_EReference_actual->setEOpposite(otherEnd);
	    }
	}
	m_templateParameterSubstitution_EReference_formal->setName("formal");
	m_templateParameterSubstitution_EReference_formal->setEType(getTemplateParameter_EClass());
	m_templateParameterSubstitution_EReference_formal->setLowerBound(1);
	m_templateParameterSubstitution_EReference_formal->setUpperBound(1);
	m_templateParameterSubstitution_EReference_formal->setTransient(false);
	m_templateParameterSubstitution_EReference_formal->setVolatile(false);
	m_templateParameterSubstitution_EReference_formal->setChangeable(true);
	m_templateParameterSubstitution_EReference_formal->setUnsettable(false);
	m_templateParameterSubstitution_EReference_formal->setUnique(true);
	m_templateParameterSubstitution_EReference_formal->setDerived(false);
	m_templateParameterSubstitution_EReference_formal->setOrdered(false);
	m_templateParameterSubstitution_EReference_formal->setContainment(false);
	m_templateParameterSubstitution_EReference_formal->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameterSubstitution_EReference_formal->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateParameterSubstitution_EReference_formal->setEOpposite(otherEnd);
	    }
	}
	m_templateParameterSubstitution_EReference_ownedActual->setName("ownedActual");
	m_templateParameterSubstitution_EReference_ownedActual->setEType(getParameterableElement_EClass());
	m_templateParameterSubstitution_EReference_ownedActual->setLowerBound(0);
	m_templateParameterSubstitution_EReference_ownedActual->setUpperBound(1);
	m_templateParameterSubstitution_EReference_ownedActual->setTransient(false);
	m_templateParameterSubstitution_EReference_ownedActual->setVolatile(false);
	m_templateParameterSubstitution_EReference_ownedActual->setChangeable(true);
	m_templateParameterSubstitution_EReference_ownedActual->setUnsettable(false);
	m_templateParameterSubstitution_EReference_ownedActual->setUnique(true);
	m_templateParameterSubstitution_EReference_ownedActual->setDerived(false);
	m_templateParameterSubstitution_EReference_ownedActual->setOrdered(false);
	m_templateParameterSubstitution_EReference_ownedActual->setContainment(true);
	m_templateParameterSubstitution_EReference_ownedActual->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameterSubstitution_EReference_ownedActual->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateParameterSubstitution_EReference_ownedActual->setEOpposite(otherEnd);
	    }
	}
	m_templateParameterSubstitution_EReference_templateBinding->setName("templateBinding");
	m_templateParameterSubstitution_EReference_templateBinding->setEType(getTemplateBinding_EClass());
	m_templateParameterSubstitution_EReference_templateBinding->setLowerBound(1);
	m_templateParameterSubstitution_EReference_templateBinding->setUpperBound(1);
	m_templateParameterSubstitution_EReference_templateBinding->setTransient(false);
	m_templateParameterSubstitution_EReference_templateBinding->setVolatile(false);
	m_templateParameterSubstitution_EReference_templateBinding->setChangeable(true);
	m_templateParameterSubstitution_EReference_templateBinding->setUnsettable(false);
	m_templateParameterSubstitution_EReference_templateBinding->setUnique(true);
	m_templateParameterSubstitution_EReference_templateBinding->setDerived(false);
	m_templateParameterSubstitution_EReference_templateBinding->setOrdered(false);
	m_templateParameterSubstitution_EReference_templateBinding->setContainment(false);
	m_templateParameterSubstitution_EReference_templateBinding->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateParameterSubstitution_EReference_templateBinding->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateBinding_EReference_parameterSubstitution();
		if (otherEnd != nullptr)
	    {
	   		m_templateParameterSubstitution_EReference_templateBinding->setEOpposite(otherEnd);
	    }
	}
	
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setName("must_be_compatible");
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setUnique(true);
	m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateParameterSubstitution_EOperation_must_be_compatible_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTemplateSignatureContent()
{
	m_templateSignature_EClass->setName("TemplateSignature");
	m_templateSignature_EClass->setAbstract(false);
	m_templateSignature_EClass->setInterface(false);
	
	
	m_templateSignature_EReference_ownedParameter->setName("ownedParameter");
	m_templateSignature_EReference_ownedParameter->setEType(getTemplateParameter_EClass());
	m_templateSignature_EReference_ownedParameter->setLowerBound(0);
	m_templateSignature_EReference_ownedParameter->setUpperBound(-1);
	m_templateSignature_EReference_ownedParameter->setTransient(false);
	m_templateSignature_EReference_ownedParameter->setVolatile(false);
	m_templateSignature_EReference_ownedParameter->setChangeable(true);
	m_templateSignature_EReference_ownedParameter->setUnsettable(false);
	m_templateSignature_EReference_ownedParameter->setUnique(true);
	m_templateSignature_EReference_ownedParameter->setDerived(false);
	m_templateSignature_EReference_ownedParameter->setOrdered(true);
	m_templateSignature_EReference_ownedParameter->setContainment(true);
	m_templateSignature_EReference_ownedParameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateSignature_EReference_ownedParameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateParameter_EReference_signature();
		if (otherEnd != nullptr)
	    {
	   		m_templateSignature_EReference_ownedParameter->setEOpposite(otherEnd);
	    }
	}
	m_templateSignature_EReference_parameter->setName("parameter");
	m_templateSignature_EReference_parameter->setEType(getTemplateParameter_EClass());
	m_templateSignature_EReference_parameter->setLowerBound(1);
	m_templateSignature_EReference_parameter->setUpperBound(-1);
	m_templateSignature_EReference_parameter->setTransient(false);
	m_templateSignature_EReference_parameter->setVolatile(false);
	m_templateSignature_EReference_parameter->setChangeable(true);
	m_templateSignature_EReference_parameter->setUnsettable(false);
	m_templateSignature_EReference_parameter->setUnique(true);
	m_templateSignature_EReference_parameter->setDerived(false);
	m_templateSignature_EReference_parameter->setOrdered(true);
	m_templateSignature_EReference_parameter->setContainment(false);
	m_templateSignature_EReference_parameter->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateSignature_EReference_parameter->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_templateSignature_EReference_parameter->setEOpposite(otherEnd);
	    }
	}
	m_templateSignature_EReference_template->setName("template");
	m_templateSignature_EReference_template->setEType(getTemplateableElement_EClass());
	m_templateSignature_EReference_template->setLowerBound(1);
	m_templateSignature_EReference_template->setUpperBound(1);
	m_templateSignature_EReference_template->setTransient(false);
	m_templateSignature_EReference_template->setVolatile(false);
	m_templateSignature_EReference_template->setChangeable(true);
	m_templateSignature_EReference_template->setUnsettable(false);
	m_templateSignature_EReference_template->setUnique(true);
	m_templateSignature_EReference_template->setDerived(false);
	m_templateSignature_EReference_template->setOrdered(false);
	m_templateSignature_EReference_template->setContainment(false);
	m_templateSignature_EReference_template->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateSignature_EReference_template->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateableElement_EReference_ownedTemplateSignature();
		if (otherEnd != nullptr)
	    {
	   		m_templateSignature_EReference_template->setEOpposite(otherEnd);
	    }
	}
	
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setName("own_elements");
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setUnique(true);
	m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateSignature_EOperation_own_elements_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setName("unique_parameters");
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setLowerBound(0);
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setUpperBound(1);
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setUnique(true);
	m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_templateSignature_EOperation_unique_parameters_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTemplateableElementContent()
{
	m_templateableElement_EClass->setName("TemplateableElement");
	m_templateableElement_EClass->setAbstract(true);
	m_templateableElement_EClass->setInterface(false);
	
	
	m_templateableElement_EReference_ownedTemplateSignature->setName("ownedTemplateSignature");
	m_templateableElement_EReference_ownedTemplateSignature->setEType(getTemplateSignature_EClass());
	m_templateableElement_EReference_ownedTemplateSignature->setLowerBound(0);
	m_templateableElement_EReference_ownedTemplateSignature->setUpperBound(1);
	m_templateableElement_EReference_ownedTemplateSignature->setTransient(false);
	m_templateableElement_EReference_ownedTemplateSignature->setVolatile(false);
	m_templateableElement_EReference_ownedTemplateSignature->setChangeable(true);
	m_templateableElement_EReference_ownedTemplateSignature->setUnsettable(false);
	m_templateableElement_EReference_ownedTemplateSignature->setUnique(true);
	m_templateableElement_EReference_ownedTemplateSignature->setDerived(false);
	m_templateableElement_EReference_ownedTemplateSignature->setOrdered(false);
	m_templateableElement_EReference_ownedTemplateSignature->setContainment(true);
	m_templateableElement_EReference_ownedTemplateSignature->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateableElement_EReference_ownedTemplateSignature->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateSignature_EReference_template();
		if (otherEnd != nullptr)
	    {
	   		m_templateableElement_EReference_ownedTemplateSignature->setEOpposite(otherEnd);
	    }
	}
	m_templateableElement_EReference_templateBinding->setName("templateBinding");
	m_templateableElement_EReference_templateBinding->setEType(getTemplateBinding_EClass());
	m_templateableElement_EReference_templateBinding->setLowerBound(0);
	m_templateableElement_EReference_templateBinding->setUpperBound(-1);
	m_templateableElement_EReference_templateBinding->setTransient(false);
	m_templateableElement_EReference_templateBinding->setVolatile(false);
	m_templateableElement_EReference_templateBinding->setChangeable(true);
	m_templateableElement_EReference_templateBinding->setUnsettable(false);
	m_templateableElement_EReference_templateBinding->setUnique(true);
	m_templateableElement_EReference_templateBinding->setDerived(false);
	m_templateableElement_EReference_templateBinding->setOrdered(false);
	m_templateableElement_EReference_templateBinding->setContainment(true);
	m_templateableElement_EReference_templateBinding->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_templateableElement_EReference_templateBinding->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getTemplateBinding_EReference_boundElement();
		if (otherEnd != nullptr)
	    {
	   		m_templateableElement_EReference_templateBinding->setEOpposite(otherEnd);
	    }
	}
	
	m_templateableElement_EOperation_isTemplate->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_templateableElement_EOperation_isTemplate->setName("isTemplate");
	m_templateableElement_EOperation_isTemplate->setLowerBound(1);
	m_templateableElement_EOperation_isTemplate->setUpperBound(1);
	m_templateableElement_EOperation_isTemplate->setUnique(true);
	m_templateableElement_EOperation_isTemplate->setOrdered(false);
	
	
	m_templateableElement_EOperation_parameterableElements->setEType(getParameterableElement_EClass());
	m_templateableElement_EOperation_parameterableElements->setName("parameterableElements");
	m_templateableElement_EOperation_parameterableElements->setLowerBound(0);
	m_templateableElement_EOperation_parameterableElements->setUpperBound(-1);
	m_templateableElement_EOperation_parameterableElements->setUnique(true);
	m_templateableElement_EOperation_parameterableElements->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeTestIdentityActionContent()
{
	m_testIdentityAction_EClass->setName("TestIdentityAction");
	m_testIdentityAction_EClass->setAbstract(false);
	m_testIdentityAction_EClass->setInterface(false);
	
	
	m_testIdentityAction_EReference_first->setName("first");
	m_testIdentityAction_EReference_first->setEType(getInputPin_EClass());
	m_testIdentityAction_EReference_first->setLowerBound(1);
	m_testIdentityAction_EReference_first->setUpperBound(1);
	m_testIdentityAction_EReference_first->setTransient(false);
	m_testIdentityAction_EReference_first->setVolatile(false);
	m_testIdentityAction_EReference_first->setChangeable(true);
	m_testIdentityAction_EReference_first->setUnsettable(false);
	m_testIdentityAction_EReference_first->setUnique(true);
	m_testIdentityAction_EReference_first->setDerived(false);
	m_testIdentityAction_EReference_first->setOrdered(false);
	m_testIdentityAction_EReference_first->setContainment(true);
	m_testIdentityAction_EReference_first->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_testIdentityAction_EReference_first->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_testIdentityAction_EReference_first->setEOpposite(otherEnd);
	    }
	}
	m_testIdentityAction_EReference_result->setName("result");
	m_testIdentityAction_EReference_result->setEType(getOutputPin_EClass());
	m_testIdentityAction_EReference_result->setLowerBound(1);
	m_testIdentityAction_EReference_result->setUpperBound(1);
	m_testIdentityAction_EReference_result->setTransient(false);
	m_testIdentityAction_EReference_result->setVolatile(false);
	m_testIdentityAction_EReference_result->setChangeable(true);
	m_testIdentityAction_EReference_result->setUnsettable(false);
	m_testIdentityAction_EReference_result->setUnique(true);
	m_testIdentityAction_EReference_result->setDerived(false);
	m_testIdentityAction_EReference_result->setOrdered(false);
	m_testIdentityAction_EReference_result->setContainment(true);
	m_testIdentityAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_testIdentityAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_testIdentityAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_testIdentityAction_EReference_second->setName("second");
	m_testIdentityAction_EReference_second->setEType(getInputPin_EClass());
	m_testIdentityAction_EReference_second->setLowerBound(1);
	m_testIdentityAction_EReference_second->setUpperBound(1);
	m_testIdentityAction_EReference_second->setTransient(false);
	m_testIdentityAction_EReference_second->setVolatile(false);
	m_testIdentityAction_EReference_second->setChangeable(true);
	m_testIdentityAction_EReference_second->setUnsettable(false);
	m_testIdentityAction_EReference_second->setUnique(true);
	m_testIdentityAction_EReference_second->setDerived(false);
	m_testIdentityAction_EReference_second->setOrdered(false);
	m_testIdentityAction_EReference_second->setContainment(true);
	m_testIdentityAction_EReference_second->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_testIdentityAction_EReference_second->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_testIdentityAction_EReference_second->setEOpposite(otherEnd);
	    }
	}
	
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setName("no_type");
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setUnique(true);
	m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_no_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setName("result_is_boolean");
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setLowerBound(0);
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setUpperBound(1);
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setUnique(true);
	m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_testIdentityAction_EOperation_result_is_boolean_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTimeConstraintContent()
{
	m_timeConstraint_EClass->setName("TimeConstraint");
	m_timeConstraint_EClass->setAbstract(false);
	m_timeConstraint_EClass->setInterface(false);
	
	m_timeConstraint_EAttribute_firstEvent = getTimeConstraint_EAttribute_firstEvent();
	m_timeConstraint_EAttribute_firstEvent->setName("firstEvent");
	m_timeConstraint_EAttribute_firstEvent->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_timeConstraint_EAttribute_firstEvent->setLowerBound(0);
	m_timeConstraint_EAttribute_firstEvent->setUpperBound(1);
	m_timeConstraint_EAttribute_firstEvent->setTransient(false);
	m_timeConstraint_EAttribute_firstEvent->setVolatile(false);
	m_timeConstraint_EAttribute_firstEvent->setChangeable(true);
	m_timeConstraint_EAttribute_firstEvent->setUnsettable(false);
	m_timeConstraint_EAttribute_firstEvent->setUnique(true);
	m_timeConstraint_EAttribute_firstEvent->setDerived(false);
	m_timeConstraint_EAttribute_firstEvent->setOrdered(false);
	m_timeConstraint_EAttribute_firstEvent->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_timeConstraint_EAttribute_firstEvent->setDefaultValueLiteral(defaultValue);
		}
	}
	
	
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setName("has_one_constrainedElement");
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setLowerBound(0);
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setUpperBound(1);
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setUnique(true);
	m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeConstraint_EOperation_has_one_constrainedElement_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTimeEventContent()
{
	m_timeEvent_EClass->setName("TimeEvent");
	m_timeEvent_EClass->setAbstract(false);
	m_timeEvent_EClass->setInterface(false);
	
	m_timeEvent_EAttribute_isRelative = getTimeEvent_EAttribute_isRelative();
	m_timeEvent_EAttribute_isRelative->setName("isRelative");
	m_timeEvent_EAttribute_isRelative->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_timeEvent_EAttribute_isRelative->setLowerBound(1);
	m_timeEvent_EAttribute_isRelative->setUpperBound(1);
	m_timeEvent_EAttribute_isRelative->setTransient(false);
	m_timeEvent_EAttribute_isRelative->setVolatile(false);
	m_timeEvent_EAttribute_isRelative->setChangeable(true);
	m_timeEvent_EAttribute_isRelative->setUnsettable(false);
	m_timeEvent_EAttribute_isRelative->setUnique(true);
	m_timeEvent_EAttribute_isRelative->setDerived(false);
	m_timeEvent_EAttribute_isRelative->setOrdered(false);
	m_timeEvent_EAttribute_isRelative->setID(false);
	{
		std::string defaultValue = "false";
		if (!defaultValue.empty())
		{
		   m_timeEvent_EAttribute_isRelative->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_timeEvent_EReference_when->setName("when");
	m_timeEvent_EReference_when->setEType(getTimeExpression_EClass());
	m_timeEvent_EReference_when->setLowerBound(1);
	m_timeEvent_EReference_when->setUpperBound(1);
	m_timeEvent_EReference_when->setTransient(false);
	m_timeEvent_EReference_when->setVolatile(false);
	m_timeEvent_EReference_when->setChangeable(true);
	m_timeEvent_EReference_when->setUnsettable(false);
	m_timeEvent_EReference_when->setUnique(true);
	m_timeEvent_EReference_when->setDerived(false);
	m_timeEvent_EReference_when->setOrdered(false);
	m_timeEvent_EReference_when->setContainment(true);
	m_timeEvent_EReference_when->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_timeEvent_EReference_when->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_timeEvent_EReference_when->setEOpposite(otherEnd);
	    }
	}
	
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setName("when_non_negative");
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setLowerBound(0);
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setUpperBound(1);
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setUnique(true);
	m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeEvent_EOperation_when_non_negative_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTimeExpressionContent()
{
	m_timeExpression_EClass->setName("TimeExpression");
	m_timeExpression_EClass->setAbstract(false);
	m_timeExpression_EClass->setInterface(false);
	
	
	m_timeExpression_EReference_expr->setName("expr");
	m_timeExpression_EReference_expr->setEType(getValueSpecification_EClass());
	m_timeExpression_EReference_expr->setLowerBound(0);
	m_timeExpression_EReference_expr->setUpperBound(1);
	m_timeExpression_EReference_expr->setTransient(false);
	m_timeExpression_EReference_expr->setVolatile(false);
	m_timeExpression_EReference_expr->setChangeable(true);
	m_timeExpression_EReference_expr->setUnsettable(false);
	m_timeExpression_EReference_expr->setUnique(true);
	m_timeExpression_EReference_expr->setDerived(false);
	m_timeExpression_EReference_expr->setOrdered(false);
	m_timeExpression_EReference_expr->setContainment(true);
	m_timeExpression_EReference_expr->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_timeExpression_EReference_expr->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_timeExpression_EReference_expr->setEOpposite(otherEnd);
	    }
	}
	m_timeExpression_EReference_observation->setName("observation");
	m_timeExpression_EReference_observation->setEType(getObservation_EClass());
	m_timeExpression_EReference_observation->setLowerBound(0);
	m_timeExpression_EReference_observation->setUpperBound(-1);
	m_timeExpression_EReference_observation->setTransient(false);
	m_timeExpression_EReference_observation->setVolatile(false);
	m_timeExpression_EReference_observation->setChangeable(true);
	m_timeExpression_EReference_observation->setUnsettable(false);
	m_timeExpression_EReference_observation->setUnique(true);
	m_timeExpression_EReference_observation->setDerived(false);
	m_timeExpression_EReference_observation->setOrdered(false);
	m_timeExpression_EReference_observation->setContainment(false);
	m_timeExpression_EReference_observation->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_timeExpression_EReference_observation->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_timeExpression_EReference_observation->setEOpposite(otherEnd);
	    }
	}
	
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setName("no_expr_requires_observation");
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setLowerBound(0);
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setUpperBound(1);
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setUnique(true);
	m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_timeExpression_EOperation_no_expr_requires_observation_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTimeIntervalContent()
{
	m_timeInterval_EClass->setName("TimeInterval");
	m_timeInterval_EClass->setAbstract(false);
	m_timeInterval_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeTimeObservationContent()
{
	m_timeObservation_EClass->setName("TimeObservation");
	m_timeObservation_EClass->setAbstract(false);
	m_timeObservation_EClass->setInterface(false);
	
	m_timeObservation_EAttribute_firstEvent = getTimeObservation_EAttribute_firstEvent();
	m_timeObservation_EAttribute_firstEvent->setName("firstEvent");
	m_timeObservation_EAttribute_firstEvent->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_timeObservation_EAttribute_firstEvent->setLowerBound(1);
	m_timeObservation_EAttribute_firstEvent->setUpperBound(1);
	m_timeObservation_EAttribute_firstEvent->setTransient(false);
	m_timeObservation_EAttribute_firstEvent->setVolatile(false);
	m_timeObservation_EAttribute_firstEvent->setChangeable(true);
	m_timeObservation_EAttribute_firstEvent->setUnsettable(false);
	m_timeObservation_EAttribute_firstEvent->setUnique(true);
	m_timeObservation_EAttribute_firstEvent->setDerived(false);
	m_timeObservation_EAttribute_firstEvent->setOrdered(false);
	m_timeObservation_EAttribute_firstEvent->setID(false);
	{
		std::string defaultValue = "true";
		if (!defaultValue.empty())
		{
		   m_timeObservation_EAttribute_firstEvent->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_timeObservation_EReference_event->setName("event");
	m_timeObservation_EReference_event->setEType(getNamedElement_EClass());
	m_timeObservation_EReference_event->setLowerBound(1);
	m_timeObservation_EReference_event->setUpperBound(1);
	m_timeObservation_EReference_event->setTransient(false);
	m_timeObservation_EReference_event->setVolatile(false);
	m_timeObservation_EReference_event->setChangeable(true);
	m_timeObservation_EReference_event->setUnsettable(false);
	m_timeObservation_EReference_event->setUnique(true);
	m_timeObservation_EReference_event->setDerived(false);
	m_timeObservation_EReference_event->setOrdered(false);
	m_timeObservation_EReference_event->setContainment(false);
	m_timeObservation_EReference_event->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_timeObservation_EReference_event->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_timeObservation_EReference_event->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeTransitionContent()
{
	m_transition_EClass->setName("Transition");
	m_transition_EClass->setAbstract(false);
	m_transition_EClass->setInterface(false);
	
	m_transition_EAttribute_kind = getTransition_EAttribute_kind();
	m_transition_EAttribute_kind->setName("kind");
	m_transition_EAttribute_kind->setEType(getTransitionKind_EEnum());
	m_transition_EAttribute_kind->setLowerBound(1);
	m_transition_EAttribute_kind->setUpperBound(1);
	m_transition_EAttribute_kind->setTransient(false);
	m_transition_EAttribute_kind->setVolatile(false);
	m_transition_EAttribute_kind->setChangeable(true);
	m_transition_EAttribute_kind->setUnsettable(false);
	m_transition_EAttribute_kind->setUnique(true);
	m_transition_EAttribute_kind->setDerived(false);
	m_transition_EAttribute_kind->setOrdered(false);
	m_transition_EAttribute_kind->setID(false);
	{
		std::string defaultValue = "external";
		if (!defaultValue.empty())
		{
		   m_transition_EAttribute_kind->setDefaultValueLiteral(defaultValue);
		}
	}
	
	m_transition_EReference_container->setName("container");
	m_transition_EReference_container->setEType(getRegion_EClass());
	m_transition_EReference_container->setLowerBound(1);
	m_transition_EReference_container->setUpperBound(1);
	m_transition_EReference_container->setTransient(false);
	m_transition_EReference_container->setVolatile(false);
	m_transition_EReference_container->setChangeable(true);
	m_transition_EReference_container->setUnsettable(false);
	m_transition_EReference_container->setUnique(true);
	m_transition_EReference_container->setDerived(false);
	m_transition_EReference_container->setOrdered(false);
	m_transition_EReference_container->setContainment(false);
	m_transition_EReference_container->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_container->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getRegion_EReference_transition();
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_container->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_effect->setName("effect");
	m_transition_EReference_effect->setEType(getBehavior_EClass());
	m_transition_EReference_effect->setLowerBound(0);
	m_transition_EReference_effect->setUpperBound(1);
	m_transition_EReference_effect->setTransient(false);
	m_transition_EReference_effect->setVolatile(false);
	m_transition_EReference_effect->setChangeable(true);
	m_transition_EReference_effect->setUnsettable(false);
	m_transition_EReference_effect->setUnique(true);
	m_transition_EReference_effect->setDerived(false);
	m_transition_EReference_effect->setOrdered(false);
	m_transition_EReference_effect->setContainment(true);
	m_transition_EReference_effect->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_effect->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_effect->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_guard->setName("guard");
	m_transition_EReference_guard->setEType(getConstraint_EClass());
	m_transition_EReference_guard->setLowerBound(0);
	m_transition_EReference_guard->setUpperBound(1);
	m_transition_EReference_guard->setTransient(false);
	m_transition_EReference_guard->setVolatile(false);
	m_transition_EReference_guard->setChangeable(true);
	m_transition_EReference_guard->setUnsettable(false);
	m_transition_EReference_guard->setUnique(true);
	m_transition_EReference_guard->setDerived(false);
	m_transition_EReference_guard->setOrdered(false);
	m_transition_EReference_guard->setContainment(false);
	m_transition_EReference_guard->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_guard->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_guard->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_redefinedTransition->setName("redefinedTransition");
	m_transition_EReference_redefinedTransition->setEType(getTransition_EClass());
	m_transition_EReference_redefinedTransition->setLowerBound(0);
	m_transition_EReference_redefinedTransition->setUpperBound(1);
	m_transition_EReference_redefinedTransition->setTransient(false);
	m_transition_EReference_redefinedTransition->setVolatile(false);
	m_transition_EReference_redefinedTransition->setChangeable(true);
	m_transition_EReference_redefinedTransition->setUnsettable(false);
	m_transition_EReference_redefinedTransition->setUnique(true);
	m_transition_EReference_redefinedTransition->setDerived(false);
	m_transition_EReference_redefinedTransition->setOrdered(false);
	m_transition_EReference_redefinedTransition->setContainment(false);
	m_transition_EReference_redefinedTransition->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_redefinedTransition->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_redefinedTransition->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_source->setName("source");
	m_transition_EReference_source->setEType(getVertex_EClass());
	m_transition_EReference_source->setLowerBound(1);
	m_transition_EReference_source->setUpperBound(1);
	m_transition_EReference_source->setTransient(false);
	m_transition_EReference_source->setVolatile(false);
	m_transition_EReference_source->setChangeable(true);
	m_transition_EReference_source->setUnsettable(false);
	m_transition_EReference_source->setUnique(true);
	m_transition_EReference_source->setDerived(false);
	m_transition_EReference_source->setOrdered(false);
	m_transition_EReference_source->setContainment(false);
	m_transition_EReference_source->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_source->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_source->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_target->setName("target");
	m_transition_EReference_target->setEType(getVertex_EClass());
	m_transition_EReference_target->setLowerBound(1);
	m_transition_EReference_target->setUpperBound(1);
	m_transition_EReference_target->setTransient(false);
	m_transition_EReference_target->setVolatile(false);
	m_transition_EReference_target->setChangeable(true);
	m_transition_EReference_target->setUnsettable(false);
	m_transition_EReference_target->setUnique(true);
	m_transition_EReference_target->setDerived(false);
	m_transition_EReference_target->setOrdered(false);
	m_transition_EReference_target->setContainment(false);
	m_transition_EReference_target->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_target->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_target->setEOpposite(otherEnd);
	    }
	}
	m_transition_EReference_trigger->setName("trigger");
	m_transition_EReference_trigger->setEType(getTrigger_EClass());
	m_transition_EReference_trigger->setLowerBound(0);
	m_transition_EReference_trigger->setUpperBound(-1);
	m_transition_EReference_trigger->setTransient(false);
	m_transition_EReference_trigger->setVolatile(false);
	m_transition_EReference_trigger->setChangeable(true);
	m_transition_EReference_trigger->setUnsettable(false);
	m_transition_EReference_trigger->setUnique(true);
	m_transition_EReference_trigger->setDerived(false);
	m_transition_EReference_trigger->setOrdered(false);
	m_transition_EReference_trigger->setContainment(true);
	m_transition_EReference_trigger->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_transition_EReference_trigger->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_transition_EReference_trigger->setEOpposite(otherEnd);
	    }
	}
	
	m_transition_EOperation_containingStateMachine->setEType(getStateMachine_EClass());
	m_transition_EOperation_containingStateMachine->setName("containingStateMachine");
	m_transition_EOperation_containingStateMachine->setLowerBound(1);
	m_transition_EOperation_containingStateMachine->setUpperBound(1);
	m_transition_EOperation_containingStateMachine->setUnique(true);
	m_transition_EOperation_containingStateMachine->setOrdered(false);
	
	
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setName("fork_segment_guards");
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_fork_segment_guards_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setName("fork_segment_state");
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_fork_segment_state_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setName("initial_transition");
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_initial_transition_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_initial_transition_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_initial_transition_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setName("join_segment_guards");
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_join_segment_guards_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setName("join_segment_state");
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_join_segment_state_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setName("outgoing_pseudostates");
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_outgoing_pseudostates_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_redefinitionContext->setEType(getClassifier_EClass());
	m_transition_EOperation_redefinitionContext->setName("redefinitionContext");
	m_transition_EOperation_redefinitionContext->setLowerBound(1);
	m_transition_EOperation_redefinitionContext->setUpperBound(1);
	m_transition_EOperation_redefinitionContext->setUnique(true);
	m_transition_EOperation_redefinitionContext->setOrdered(false);
	
	
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setName("state_is_external");
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_state_is_external_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_external_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_external_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setName("state_is_internal");
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_internal_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setName("state_is_local");
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setLowerBound(0);
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setUpperBound(1);
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setUnique(true);
	m_transition_EOperation_state_is_local_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_local_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_transition_EOperation_state_is_local_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTriggerContent()
{
	m_trigger_EClass->setName("Trigger");
	m_trigger_EClass->setAbstract(false);
	m_trigger_EClass->setInterface(false);
	
	
	m_trigger_EReference_event->setName("event");
	m_trigger_EReference_event->setEType(getEvent_EClass());
	m_trigger_EReference_event->setLowerBound(1);
	m_trigger_EReference_event->setUpperBound(1);
	m_trigger_EReference_event->setTransient(false);
	m_trigger_EReference_event->setVolatile(false);
	m_trigger_EReference_event->setChangeable(true);
	m_trigger_EReference_event->setUnsettable(false);
	m_trigger_EReference_event->setUnique(true);
	m_trigger_EReference_event->setDerived(false);
	m_trigger_EReference_event->setOrdered(false);
	m_trigger_EReference_event->setContainment(false);
	m_trigger_EReference_event->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_trigger_EReference_event->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_trigger_EReference_event->setEOpposite(otherEnd);
	    }
	}
	m_trigger_EReference_port->setName("port");
	m_trigger_EReference_port->setEType(getPort_EClass());
	m_trigger_EReference_port->setLowerBound(0);
	m_trigger_EReference_port->setUpperBound(-1);
	m_trigger_EReference_port->setTransient(false);
	m_trigger_EReference_port->setVolatile(false);
	m_trigger_EReference_port->setChangeable(true);
	m_trigger_EReference_port->setUnsettable(false);
	m_trigger_EReference_port->setUnique(true);
	m_trigger_EReference_port->setDerived(false);
	m_trigger_EReference_port->setOrdered(false);
	m_trigger_EReference_port->setContainment(false);
	m_trigger_EReference_port->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_trigger_EReference_port->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_trigger_EReference_port->setEOpposite(otherEnd);
	    }
	}
	
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setName("trigger_with_ports");
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setLowerBound(0);
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setUpperBound(1);
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setUnique(true);
	m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_trigger_EOperation_trigger_with_ports_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeTypeContent()
{
	m_type_EClass->setName("Type");
	m_type_EClass->setAbstract(true);
	m_type_EClass->setInterface(false);
	
	
	m_type_EReference_package->setName("package");
	m_type_EReference_package->setEType(getPackage_EClass());
	m_type_EReference_package->setLowerBound(0);
	m_type_EReference_package->setUpperBound(1);
	m_type_EReference_package->setTransient(true);
	m_type_EReference_package->setVolatile(true);
	m_type_EReference_package->setChangeable(true);
	m_type_EReference_package->setUnsettable(false);
	m_type_EReference_package->setUnique(true);
	m_type_EReference_package->setDerived(true);
	m_type_EReference_package->setOrdered(false);
	m_type_EReference_package->setContainment(false);
	m_type_EReference_package->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_type_EReference_package->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getPackage_EReference_ownedType();
		if (otherEnd != nullptr)
	    {
	   		m_type_EReference_package->setEOpposite(otherEnd);
	    }
	}
	
	m_type_EOperation_conformsTo_Type->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_type_EOperation_conformsTo_Type->setName("conformsTo");
	m_type_EOperation_conformsTo_Type->setLowerBound(1);
	m_type_EOperation_conformsTo_Type->setUpperBound(1);
	m_type_EOperation_conformsTo_Type->setUnique(true);
	m_type_EOperation_conformsTo_Type->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_conformsTo_Type);
		parameter->setName("other");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setEType(getAssociation_EClass());
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setName("createAssociation");
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setLowerBound(1);
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setUpperBound(1);
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setUnique(true);
	m_type_EOperation_createAssociation_Boolean_UnlimitedNatural->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1IsNavigable");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1Aggregation");
		parameter->setEType(getAggregationKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1Name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1Lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1Upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end1Type");
		parameter->setEType(getType_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end2IsNavigable");
		parameter->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end2Aggregation");
		parameter->setEType(getAggregationKind_EEnum());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end2Name");
		parameter->setEType(types::TypesPackage::eInstance()->getString_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end2Lower");
		parameter->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_type_EOperation_createAssociation_Boolean_UnlimitedNatural);
		parameter->setName("end2Upper");
		parameter->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_type_EOperation_getAssociations->setEType(getAssociation_EClass());
	m_type_EOperation_getAssociations->setName("getAssociations");
	m_type_EOperation_getAssociations->setLowerBound(0);
	m_type_EOperation_getAssociations->setUpperBound(-1);
	m_type_EOperation_getAssociations->setUnique(true);
	m_type_EOperation_getAssociations->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeTypedElementContent()
{
	m_typedElement_EClass->setName("TypedElement");
	m_typedElement_EClass->setAbstract(true);
	m_typedElement_EClass->setInterface(false);
	
	
	m_typedElement_EReference_type->setName("type");
	m_typedElement_EReference_type->setEType(getType_EClass());
	m_typedElement_EReference_type->setLowerBound(0);
	m_typedElement_EReference_type->setUpperBound(1);
	m_typedElement_EReference_type->setTransient(false);
	m_typedElement_EReference_type->setVolatile(false);
	m_typedElement_EReference_type->setChangeable(true);
	m_typedElement_EReference_type->setUnsettable(false);
	m_typedElement_EReference_type->setUnique(true);
	m_typedElement_EReference_type->setDerived(false);
	m_typedElement_EReference_type->setOrdered(false);
	m_typedElement_EReference_type->setContainment(false);
	m_typedElement_EReference_type->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_typedElement_EReference_type->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_typedElement_EReference_type->setEOpposite(otherEnd);
	    }
	}
	
	
}

void UmlPackageImpl::initializeUnmarshallActionContent()
{
	m_unmarshallAction_EClass->setName("UnmarshallAction");
	m_unmarshallAction_EClass->setAbstract(false);
	m_unmarshallAction_EClass->setInterface(false);
	
	
	m_unmarshallAction_EReference_object->setName("object");
	m_unmarshallAction_EReference_object->setEType(getInputPin_EClass());
	m_unmarshallAction_EReference_object->setLowerBound(1);
	m_unmarshallAction_EReference_object->setUpperBound(1);
	m_unmarshallAction_EReference_object->setTransient(false);
	m_unmarshallAction_EReference_object->setVolatile(false);
	m_unmarshallAction_EReference_object->setChangeable(true);
	m_unmarshallAction_EReference_object->setUnsettable(false);
	m_unmarshallAction_EReference_object->setUnique(true);
	m_unmarshallAction_EReference_object->setDerived(false);
	m_unmarshallAction_EReference_object->setOrdered(false);
	m_unmarshallAction_EReference_object->setContainment(true);
	m_unmarshallAction_EReference_object->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_unmarshallAction_EReference_object->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_unmarshallAction_EReference_object->setEOpposite(otherEnd);
	    }
	}
	m_unmarshallAction_EReference_result->setName("result");
	m_unmarshallAction_EReference_result->setEType(getOutputPin_EClass());
	m_unmarshallAction_EReference_result->setLowerBound(1);
	m_unmarshallAction_EReference_result->setUpperBound(-1);
	m_unmarshallAction_EReference_result->setTransient(false);
	m_unmarshallAction_EReference_result->setVolatile(false);
	m_unmarshallAction_EReference_result->setChangeable(true);
	m_unmarshallAction_EReference_result->setUnsettable(false);
	m_unmarshallAction_EReference_result->setUnique(true);
	m_unmarshallAction_EReference_result->setDerived(false);
	m_unmarshallAction_EReference_result->setOrdered(true);
	m_unmarshallAction_EReference_result->setContainment(true);
	m_unmarshallAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_unmarshallAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_unmarshallAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_unmarshallAction_EReference_unmarshallType->setName("unmarshallType");
	m_unmarshallAction_EReference_unmarshallType->setEType(getClassifier_EClass());
	m_unmarshallAction_EReference_unmarshallType->setLowerBound(1);
	m_unmarshallAction_EReference_unmarshallType->setUpperBound(1);
	m_unmarshallAction_EReference_unmarshallType->setTransient(false);
	m_unmarshallAction_EReference_unmarshallType->setVolatile(false);
	m_unmarshallAction_EReference_unmarshallType->setChangeable(true);
	m_unmarshallAction_EReference_unmarshallType->setUnsettable(false);
	m_unmarshallAction_EReference_unmarshallType->setUnique(true);
	m_unmarshallAction_EReference_unmarshallType->setDerived(false);
	m_unmarshallAction_EReference_unmarshallType->setOrdered(false);
	m_unmarshallAction_EReference_unmarshallType->setContainment(false);
	m_unmarshallAction_EReference_unmarshallType->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_unmarshallAction_EReference_unmarshallType->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_unmarshallAction_EReference_unmarshallType->setEOpposite(otherEnd);
	    }
	}
	
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setName("multiplicity_of_object");
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setLowerBound(0);
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUpperBound(1);
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setUnique(true);
	m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_multiplicity_of_object_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setName("number_of_result");
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_number_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setName("object_type");
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setUnique(true);
	m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_object_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setName("structural_feature");
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setLowerBound(0);
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setUpperBound(1);
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setUnique(true);
	m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_structural_feature_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setName("type_ordering_and_multiplicity");
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_unmarshallAction_EOperation_type_ordering_and_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeUsageContent()
{
	m_usage_EClass->setName("Usage");
	m_usage_EClass->setAbstract(false);
	m_usage_EClass->setInterface(false);
	
	
	
	
}

void UmlPackageImpl::initializeUseCaseContent()
{
	m_useCase_EClass->setName("UseCase");
	m_useCase_EClass->setAbstract(false);
	m_useCase_EClass->setInterface(false);
	
	
	m_useCase_EReference_extend->setName("extend");
	m_useCase_EReference_extend->setEType(getExtend_EClass());
	m_useCase_EReference_extend->setLowerBound(0);
	m_useCase_EReference_extend->setUpperBound(-1);
	m_useCase_EReference_extend->setTransient(false);
	m_useCase_EReference_extend->setVolatile(false);
	m_useCase_EReference_extend->setChangeable(true);
	m_useCase_EReference_extend->setUnsettable(false);
	m_useCase_EReference_extend->setUnique(true);
	m_useCase_EReference_extend->setDerived(false);
	m_useCase_EReference_extend->setOrdered(false);
	m_useCase_EReference_extend->setContainment(true);
	m_useCase_EReference_extend->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_useCase_EReference_extend->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExtend_EReference_extension();
		if (otherEnd != nullptr)
	    {
	   		m_useCase_EReference_extend->setEOpposite(otherEnd);
	    }
	}
	m_useCase_EReference_extensionPoint->setName("extensionPoint");
	m_useCase_EReference_extensionPoint->setEType(getExtensionPoint_EClass());
	m_useCase_EReference_extensionPoint->setLowerBound(0);
	m_useCase_EReference_extensionPoint->setUpperBound(-1);
	m_useCase_EReference_extensionPoint->setTransient(false);
	m_useCase_EReference_extensionPoint->setVolatile(false);
	m_useCase_EReference_extensionPoint->setChangeable(true);
	m_useCase_EReference_extensionPoint->setUnsettable(false);
	m_useCase_EReference_extensionPoint->setUnique(true);
	m_useCase_EReference_extensionPoint->setDerived(false);
	m_useCase_EReference_extensionPoint->setOrdered(false);
	m_useCase_EReference_extensionPoint->setContainment(true);
	m_useCase_EReference_extensionPoint->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_useCase_EReference_extensionPoint->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getExtensionPoint_EReference_useCase();
		if (otherEnd != nullptr)
	    {
	   		m_useCase_EReference_extensionPoint->setEOpposite(otherEnd);
	    }
	}
	m_useCase_EReference_include->setName("include");
	m_useCase_EReference_include->setEType(getInclude_EClass());
	m_useCase_EReference_include->setLowerBound(0);
	m_useCase_EReference_include->setUpperBound(-1);
	m_useCase_EReference_include->setTransient(false);
	m_useCase_EReference_include->setVolatile(false);
	m_useCase_EReference_include->setChangeable(true);
	m_useCase_EReference_include->setUnsettable(false);
	m_useCase_EReference_include->setUnique(true);
	m_useCase_EReference_include->setDerived(false);
	m_useCase_EReference_include->setOrdered(false);
	m_useCase_EReference_include->setContainment(true);
	m_useCase_EReference_include->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_useCase_EReference_include->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getInclude_EReference_includingCase();
		if (otherEnd != nullptr)
	    {
	   		m_useCase_EReference_include->setEOpposite(otherEnd);
	    }
	}
	m_useCase_EReference_subject->setName("subject");
	m_useCase_EReference_subject->setEType(getClassifier_EClass());
	m_useCase_EReference_subject->setLowerBound(0);
	m_useCase_EReference_subject->setUpperBound(-1);
	m_useCase_EReference_subject->setTransient(false);
	m_useCase_EReference_subject->setVolatile(false);
	m_useCase_EReference_subject->setChangeable(true);
	m_useCase_EReference_subject->setUnsettable(false);
	m_useCase_EReference_subject->setUnique(true);
	m_useCase_EReference_subject->setDerived(false);
	m_useCase_EReference_subject->setOrdered(false);
	m_useCase_EReference_subject->setContainment(false);
	m_useCase_EReference_subject->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_useCase_EReference_subject->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getClassifier_EReference_useCase();
		if (otherEnd != nullptr)
	    {
	   		m_useCase_EReference_subject->setEOpposite(otherEnd);
	    }
	}
	
	m_useCase_EOperation_allIncludedUseCases->setEType(getUseCase_EClass());
	m_useCase_EOperation_allIncludedUseCases->setName("allIncludedUseCases");
	m_useCase_EOperation_allIncludedUseCases->setLowerBound(0);
	m_useCase_EOperation_allIncludedUseCases->setUpperBound(-1);
	m_useCase_EOperation_allIncludedUseCases->setUnique(true);
	m_useCase_EOperation_allIncludedUseCases->setOrdered(false);
	
	
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setName("binary_associations");
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setLowerBound(0);
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setUpperBound(1);
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setUnique(true);
	m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_binary_associations_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setName("cannot_include_self");
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setLowerBound(0);
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setUpperBound(1);
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setUnique(true);
	m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_cannot_include_self_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setName("must_have_name");
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setLowerBound(0);
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setUpperBound(1);
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setUnique(true);
	m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_must_have_name_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setName("no_association_to_use_case");
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setLowerBound(0);
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setUpperBound(1);
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setUnique(true);
	m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_useCase_EOperation_no_association_to_use_case_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeValuePinContent()
{
	m_valuePin_EClass->setName("ValuePin");
	m_valuePin_EClass->setAbstract(false);
	m_valuePin_EClass->setInterface(false);
	
	
	m_valuePin_EReference_value->setName("value");
	m_valuePin_EReference_value->setEType(getValueSpecification_EClass());
	m_valuePin_EReference_value->setLowerBound(1);
	m_valuePin_EReference_value->setUpperBound(1);
	m_valuePin_EReference_value->setTransient(false);
	m_valuePin_EReference_value->setVolatile(false);
	m_valuePin_EReference_value->setChangeable(true);
	m_valuePin_EReference_value->setUnsettable(false);
	m_valuePin_EReference_value->setUnique(true);
	m_valuePin_EReference_value->setDerived(false);
	m_valuePin_EReference_value->setOrdered(false);
	m_valuePin_EReference_value->setContainment(true);
	m_valuePin_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_valuePin_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_valuePin_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setName("compatible_type");
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setUnique(true);
	m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valuePin_EOperation_compatible_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setName("no_incoming_edges");
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setLowerBound(0);
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUpperBound(1);
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setUnique(true);
	m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valuePin_EOperation_no_incoming_edges_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeValueSpecificationContent()
{
	m_valueSpecification_EClass->setName("ValueSpecification");
	m_valueSpecification_EClass->setAbstract(true);
	m_valueSpecification_EClass->setInterface(false);
	
	
	m_valueSpecification_EReference_owningSlot->setName("owningSlot");
	m_valueSpecification_EReference_owningSlot->setEType(getSlot_EClass());
	m_valueSpecification_EReference_owningSlot->setLowerBound(0);
	m_valueSpecification_EReference_owningSlot->setUpperBound(1);
	m_valueSpecification_EReference_owningSlot->setTransient(false);
	m_valueSpecification_EReference_owningSlot->setVolatile(false);
	m_valueSpecification_EReference_owningSlot->setChangeable(true);
	m_valueSpecification_EReference_owningSlot->setUnsettable(false);
	m_valueSpecification_EReference_owningSlot->setUnique(true);
	m_valueSpecification_EReference_owningSlot->setDerived(false);
	m_valueSpecification_EReference_owningSlot->setOrdered(true);
	m_valueSpecification_EReference_owningSlot->setContainment(false);
	m_valueSpecification_EReference_owningSlot->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_valueSpecification_EReference_owningSlot->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getSlot_EReference_value();
		if (otherEnd != nullptr)
	    {
	   		m_valueSpecification_EReference_owningSlot->setEOpposite(otherEnd);
	    }
	}
	
	m_valueSpecification_EOperation_booleanValue->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_valueSpecification_EOperation_booleanValue->setName("booleanValue");
	m_valueSpecification_EOperation_booleanValue->setLowerBound(0);
	m_valueSpecification_EOperation_booleanValue->setUpperBound(1);
	m_valueSpecification_EOperation_booleanValue->setUnique(true);
	m_valueSpecification_EOperation_booleanValue->setOrdered(false);
	
	
	m_valueSpecification_EOperation_integerValue->setEType(types::TypesPackage::eInstance()->getInteger_EDataType());
	m_valueSpecification_EOperation_integerValue->setName("integerValue");
	m_valueSpecification_EOperation_integerValue->setLowerBound(0);
	m_valueSpecification_EOperation_integerValue->setUpperBound(1);
	m_valueSpecification_EOperation_integerValue->setUnique(true);
	m_valueSpecification_EOperation_integerValue->setOrdered(false);
	
	
	m_valueSpecification_EOperation_isComputable->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_valueSpecification_EOperation_isComputable->setName("isComputable");
	m_valueSpecification_EOperation_isComputable->setLowerBound(1);
	m_valueSpecification_EOperation_isComputable->setUpperBound(1);
	m_valueSpecification_EOperation_isComputable->setUnique(true);
	m_valueSpecification_EOperation_isComputable->setOrdered(false);
	
	
	m_valueSpecification_EOperation_isNull->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_valueSpecification_EOperation_isNull->setName("isNull");
	m_valueSpecification_EOperation_isNull->setLowerBound(1);
	m_valueSpecification_EOperation_isNull->setUpperBound(1);
	m_valueSpecification_EOperation_isNull->setUnique(true);
	m_valueSpecification_EOperation_isNull->setOrdered(false);
	
	
	m_valueSpecification_EOperation_realValue->setEType(types::TypesPackage::eInstance()->getReal_EDataType());
	m_valueSpecification_EOperation_realValue->setName("realValue");
	m_valueSpecification_EOperation_realValue->setLowerBound(0);
	m_valueSpecification_EOperation_realValue->setUpperBound(1);
	m_valueSpecification_EOperation_realValue->setUnique(true);
	m_valueSpecification_EOperation_realValue->setOrdered(false);
	
	
	m_valueSpecification_EOperation_stringValue->setEType(types::TypesPackage::eInstance()->getString_EDataType());
	m_valueSpecification_EOperation_stringValue->setName("stringValue");
	m_valueSpecification_EOperation_stringValue->setLowerBound(0);
	m_valueSpecification_EOperation_stringValue->setUpperBound(1);
	m_valueSpecification_EOperation_stringValue->setUnique(true);
	m_valueSpecification_EOperation_stringValue->setOrdered(false);
	
	
	m_valueSpecification_EOperation_unlimitedValue->setEType(types::TypesPackage::eInstance()->getUnlimitedNatural_EDataType());
	m_valueSpecification_EOperation_unlimitedValue->setName("unlimitedValue");
	m_valueSpecification_EOperation_unlimitedValue->setLowerBound(0);
	m_valueSpecification_EOperation_unlimitedValue->setUpperBound(1);
	m_valueSpecification_EOperation_unlimitedValue->setUnique(true);
	m_valueSpecification_EOperation_unlimitedValue->setOrdered(false);
	
	
	
}

void UmlPackageImpl::initializeValueSpecificationActionContent()
{
	m_valueSpecificationAction_EClass->setName("ValueSpecificationAction");
	m_valueSpecificationAction_EClass->setAbstract(false);
	m_valueSpecificationAction_EClass->setInterface(false);
	
	
	m_valueSpecificationAction_EReference_result->setName("result");
	m_valueSpecificationAction_EReference_result->setEType(getOutputPin_EClass());
	m_valueSpecificationAction_EReference_result->setLowerBound(1);
	m_valueSpecificationAction_EReference_result->setUpperBound(1);
	m_valueSpecificationAction_EReference_result->setTransient(false);
	m_valueSpecificationAction_EReference_result->setVolatile(false);
	m_valueSpecificationAction_EReference_result->setChangeable(true);
	m_valueSpecificationAction_EReference_result->setUnsettable(false);
	m_valueSpecificationAction_EReference_result->setUnique(true);
	m_valueSpecificationAction_EReference_result->setDerived(false);
	m_valueSpecificationAction_EReference_result->setOrdered(false);
	m_valueSpecificationAction_EReference_result->setContainment(true);
	m_valueSpecificationAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_valueSpecificationAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_valueSpecificationAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_valueSpecificationAction_EReference_value->setName("value");
	m_valueSpecificationAction_EReference_value->setEType(getValueSpecification_EClass());
	m_valueSpecificationAction_EReference_value->setLowerBound(1);
	m_valueSpecificationAction_EReference_value->setUpperBound(1);
	m_valueSpecificationAction_EReference_value->setTransient(false);
	m_valueSpecificationAction_EReference_value->setVolatile(false);
	m_valueSpecificationAction_EReference_value->setChangeable(true);
	m_valueSpecificationAction_EReference_value->setUnsettable(false);
	m_valueSpecificationAction_EReference_value->setUnique(true);
	m_valueSpecificationAction_EReference_value->setDerived(false);
	m_valueSpecificationAction_EReference_value->setOrdered(false);
	m_valueSpecificationAction_EReference_value->setContainment(true);
	m_valueSpecificationAction_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_valueSpecificationAction_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_valueSpecificationAction_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setName("compatible_type");
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setUnique(true);
	m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valueSpecificationAction_EOperation_compatible_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_valueSpecificationAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeVariableContent()
{
	m_variable_EClass->setName("Variable");
	m_variable_EClass->setAbstract(false);
	m_variable_EClass->setInterface(false);
	
	
	m_variable_EReference_activityScope->setName("activityScope");
	m_variable_EReference_activityScope->setEType(getActivity_EClass());
	m_variable_EReference_activityScope->setLowerBound(0);
	m_variable_EReference_activityScope->setUpperBound(1);
	m_variable_EReference_activityScope->setTransient(false);
	m_variable_EReference_activityScope->setVolatile(false);
	m_variable_EReference_activityScope->setChangeable(true);
	m_variable_EReference_activityScope->setUnsettable(false);
	m_variable_EReference_activityScope->setUnique(true);
	m_variable_EReference_activityScope->setDerived(false);
	m_variable_EReference_activityScope->setOrdered(false);
	m_variable_EReference_activityScope->setContainment(false);
	m_variable_EReference_activityScope->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_variable_EReference_activityScope->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getActivity_EReference_variable();
		if (otherEnd != nullptr)
	    {
	   		m_variable_EReference_activityScope->setEOpposite(otherEnd);
	    }
	}
	m_variable_EReference_scope->setName("scope");
	m_variable_EReference_scope->setEType(getStructuredActivityNode_EClass());
	m_variable_EReference_scope->setLowerBound(0);
	m_variable_EReference_scope->setUpperBound(1);
	m_variable_EReference_scope->setTransient(false);
	m_variable_EReference_scope->setVolatile(false);
	m_variable_EReference_scope->setChangeable(true);
	m_variable_EReference_scope->setUnsettable(false);
	m_variable_EReference_scope->setUnique(true);
	m_variable_EReference_scope->setDerived(false);
	m_variable_EReference_scope->setOrdered(false);
	m_variable_EReference_scope->setContainment(false);
	m_variable_EReference_scope->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_variable_EReference_scope->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getStructuredActivityNode_EReference_variable();
		if (otherEnd != nullptr)
	    {
	   		m_variable_EReference_scope->setEOpposite(otherEnd);
	    }
	}
	
	m_variable_EOperation_isAccessibleBy_Action->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_variable_EOperation_isAccessibleBy_Action->setName("isAccessibleBy");
	m_variable_EOperation_isAccessibleBy_Action->setLowerBound(1);
	m_variable_EOperation_isAccessibleBy_Action->setUpperBound(1);
	m_variable_EOperation_isAccessibleBy_Action->setUnique(true);
	m_variable_EOperation_isAccessibleBy_Action->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_variable_EOperation_isAccessibleBy_Action);
		parameter->setName("a");
		parameter->setEType(getAction_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeVariableActionContent()
{
	m_variableAction_EClass->setName("VariableAction");
	m_variableAction_EClass->setAbstract(true);
	m_variableAction_EClass->setInterface(false);
	
	
	m_variableAction_EReference_variable->setName("variable");
	m_variableAction_EReference_variable->setEType(getVariable_EClass());
	m_variableAction_EReference_variable->setLowerBound(1);
	m_variableAction_EReference_variable->setUpperBound(1);
	m_variableAction_EReference_variable->setTransient(false);
	m_variableAction_EReference_variable->setVolatile(false);
	m_variableAction_EReference_variable->setChangeable(true);
	m_variableAction_EReference_variable->setUnsettable(false);
	m_variableAction_EReference_variable->setUnique(true);
	m_variableAction_EReference_variable->setDerived(false);
	m_variableAction_EReference_variable->setOrdered(false);
	m_variableAction_EReference_variable->setContainment(false);
	m_variableAction_EReference_variable->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_variableAction_EReference_variable->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_variableAction_EReference_variable->setEOpposite(otherEnd);
	    }
	}
	
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setName("scope_of_variable");
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setLowerBound(0);
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setUpperBound(1);
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setUnique(true);
	m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_variableAction_EOperation_scope_of_variable_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeVertexContent()
{
	m_vertex_EClass->setName("Vertex");
	m_vertex_EClass->setAbstract(true);
	m_vertex_EClass->setInterface(false);
	
	
	m_vertex_EReference_container->setName("container");
	m_vertex_EReference_container->setEType(getRegion_EClass());
	m_vertex_EReference_container->setLowerBound(0);
	m_vertex_EReference_container->setUpperBound(1);
	m_vertex_EReference_container->setTransient(false);
	m_vertex_EReference_container->setVolatile(false);
	m_vertex_EReference_container->setChangeable(true);
	m_vertex_EReference_container->setUnsettable(false);
	m_vertex_EReference_container->setUnique(true);
	m_vertex_EReference_container->setDerived(false);
	m_vertex_EReference_container->setOrdered(false);
	m_vertex_EReference_container->setContainment(false);
	m_vertex_EReference_container->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_vertex_EReference_container->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = getRegion_EReference_subvertex();
		if (otherEnd != nullptr)
	    {
	   		m_vertex_EReference_container->setEOpposite(otherEnd);
	    }
	}
	m_vertex_EReference_incoming->setName("incoming");
	m_vertex_EReference_incoming->setEType(getTransition_EClass());
	m_vertex_EReference_incoming->setLowerBound(0);
	m_vertex_EReference_incoming->setUpperBound(-1);
	m_vertex_EReference_incoming->setTransient(true);
	m_vertex_EReference_incoming->setVolatile(true);
	m_vertex_EReference_incoming->setChangeable(false);
	m_vertex_EReference_incoming->setUnsettable(false);
	m_vertex_EReference_incoming->setUnique(true);
	m_vertex_EReference_incoming->setDerived(true);
	m_vertex_EReference_incoming->setOrdered(false);
	m_vertex_EReference_incoming->setContainment(false);
	m_vertex_EReference_incoming->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_vertex_EReference_incoming->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_vertex_EReference_incoming->setEOpposite(otherEnd);
	    }
	}
	m_vertex_EReference_outgoing->setName("outgoing");
	m_vertex_EReference_outgoing->setEType(getTransition_EClass());
	m_vertex_EReference_outgoing->setLowerBound(0);
	m_vertex_EReference_outgoing->setUpperBound(-1);
	m_vertex_EReference_outgoing->setTransient(true);
	m_vertex_EReference_outgoing->setVolatile(true);
	m_vertex_EReference_outgoing->setChangeable(false);
	m_vertex_EReference_outgoing->setUnsettable(false);
	m_vertex_EReference_outgoing->setUnique(true);
	m_vertex_EReference_outgoing->setDerived(true);
	m_vertex_EReference_outgoing->setOrdered(false);
	m_vertex_EReference_outgoing->setContainment(false);
	m_vertex_EReference_outgoing->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_vertex_EReference_outgoing->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_vertex_EReference_outgoing->setEOpposite(otherEnd);
	    }
	}
	
	m_vertex_EOperation_containingStateMachine->setEType(getStateMachine_EClass());
	m_vertex_EOperation_containingStateMachine->setName("containingStateMachine");
	m_vertex_EOperation_containingStateMachine->setLowerBound(1);
	m_vertex_EOperation_containingStateMachine->setUpperBound(1);
	m_vertex_EOperation_containingStateMachine->setUnique(true);
	m_vertex_EOperation_containingStateMachine->setOrdered(false);
	
	
	m_vertex_EOperation_getIncomings->setEType(getTransition_EClass());
	m_vertex_EOperation_getIncomings->setName("getIncomings");
	m_vertex_EOperation_getIncomings->setLowerBound(0);
	m_vertex_EOperation_getIncomings->setUpperBound(-1);
	m_vertex_EOperation_getIncomings->setUnique(true);
	m_vertex_EOperation_getIncomings->setOrdered(false);
	
	
	m_vertex_EOperation_getOutgoings->setEType(getTransition_EClass());
	m_vertex_EOperation_getOutgoings->setName("getOutgoings");
	m_vertex_EOperation_getOutgoings->setLowerBound(0);
	m_vertex_EOperation_getOutgoings->setUpperBound(-1);
	m_vertex_EOperation_getOutgoings->setUnique(true);
	m_vertex_EOperation_getOutgoings->setOrdered(false);
	
	
	m_vertex_EOperation_isContainedInRegion_Region->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_vertex_EOperation_isContainedInRegion_Region->setName("isContainedInRegion");
	m_vertex_EOperation_isContainedInRegion_Region->setLowerBound(1);
	m_vertex_EOperation_isContainedInRegion_Region->setUpperBound(1);
	m_vertex_EOperation_isContainedInRegion_Region->setUnique(true);
	m_vertex_EOperation_isContainedInRegion_Region->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_vertex_EOperation_isContainedInRegion_Region);
		parameter->setName("r");
		parameter->setEType(getRegion_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_vertex_EOperation_isContainedInState_State->setEType(types::TypesPackage::eInstance()->getBoolean_EDataType());
	m_vertex_EOperation_isContainedInState_State->setName("isContainedInState");
	m_vertex_EOperation_isContainedInState_State->setLowerBound(1);
	m_vertex_EOperation_isContainedInState_State->setUpperBound(1);
	m_vertex_EOperation_isContainedInState_State->setUnique(true);
	m_vertex_EOperation_isContainedInState_State->setOrdered(false);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_vertex_EOperation_isContainedInState_State);
		parameter->setName("s");
		parameter->setEType(getState_EClass());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeWriteLinkActionContent()
{
	m_writeLinkAction_EClass->setName("WriteLinkAction");
	m_writeLinkAction_EClass->setAbstract(true);
	m_writeLinkAction_EClass->setInterface(false);
	
	
	
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setName("allow_access");
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setUnique(true);
	m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeLinkAction_EOperation_allow_access_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeWriteStructuralFeatureActionContent()
{
	m_writeStructuralFeatureAction_EClass->setName("WriteStructuralFeatureAction");
	m_writeStructuralFeatureAction_EClass->setAbstract(true);
	m_writeStructuralFeatureAction_EClass->setInterface(false);
	
	
	m_writeStructuralFeatureAction_EReference_result->setName("result");
	m_writeStructuralFeatureAction_EReference_result->setEType(getOutputPin_EClass());
	m_writeStructuralFeatureAction_EReference_result->setLowerBound(0);
	m_writeStructuralFeatureAction_EReference_result->setUpperBound(1);
	m_writeStructuralFeatureAction_EReference_result->setTransient(false);
	m_writeStructuralFeatureAction_EReference_result->setVolatile(false);
	m_writeStructuralFeatureAction_EReference_result->setChangeable(true);
	m_writeStructuralFeatureAction_EReference_result->setUnsettable(false);
	m_writeStructuralFeatureAction_EReference_result->setUnique(true);
	m_writeStructuralFeatureAction_EReference_result->setDerived(false);
	m_writeStructuralFeatureAction_EReference_result->setOrdered(false);
	m_writeStructuralFeatureAction_EReference_result->setContainment(true);
	m_writeStructuralFeatureAction_EReference_result->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_writeStructuralFeatureAction_EReference_result->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_writeStructuralFeatureAction_EReference_result->setEOpposite(otherEnd);
	    }
	}
	m_writeStructuralFeatureAction_EReference_value->setName("value");
	m_writeStructuralFeatureAction_EReference_value->setEType(getInputPin_EClass());
	m_writeStructuralFeatureAction_EReference_value->setLowerBound(0);
	m_writeStructuralFeatureAction_EReference_value->setUpperBound(1);
	m_writeStructuralFeatureAction_EReference_value->setTransient(false);
	m_writeStructuralFeatureAction_EReference_value->setVolatile(false);
	m_writeStructuralFeatureAction_EReference_value->setChangeable(true);
	m_writeStructuralFeatureAction_EReference_value->setUnsettable(false);
	m_writeStructuralFeatureAction_EReference_value->setUnique(true);
	m_writeStructuralFeatureAction_EReference_value->setDerived(false);
	m_writeStructuralFeatureAction_EReference_value->setOrdered(false);
	m_writeStructuralFeatureAction_EReference_value->setContainment(true);
	m_writeStructuralFeatureAction_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_writeStructuralFeatureAction_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_writeStructuralFeatureAction_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setName("multiplicity_of_result");
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_multiplicity_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setName("multiplicity_of_value");
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setUnique(true);
	m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_multiplicity_of_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setName("type_of_result");
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setUnique(true);
	m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_type_of_result_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setName("type_of_value");
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setUnique(true);
	m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeStructuralFeatureAction_EOperation_type_of_value_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializeWriteVariableActionContent()
{
	m_writeVariableAction_EClass->setName("WriteVariableAction");
	m_writeVariableAction_EClass->setAbstract(true);
	m_writeVariableAction_EClass->setInterface(false);
	
	
	m_writeVariableAction_EReference_value->setName("value");
	m_writeVariableAction_EReference_value->setEType(getInputPin_EClass());
	m_writeVariableAction_EReference_value->setLowerBound(0);
	m_writeVariableAction_EReference_value->setUpperBound(1);
	m_writeVariableAction_EReference_value->setTransient(false);
	m_writeVariableAction_EReference_value->setVolatile(false);
	m_writeVariableAction_EReference_value->setChangeable(true);
	m_writeVariableAction_EReference_value->setUnsettable(false);
	m_writeVariableAction_EReference_value->setUnique(true);
	m_writeVariableAction_EReference_value->setDerived(false);
	m_writeVariableAction_EReference_value->setOrdered(false);
	m_writeVariableAction_EReference_value->setContainment(true);
	m_writeVariableAction_EReference_value->setResolveProxies(true);
	{
		std::string defaultValue = "";
		if (!defaultValue.empty())
		{
			m_writeVariableAction_EReference_value->setDefaultValueLiteral(defaultValue);
		}
		std::shared_ptr<ecore::EReference>  otherEnd = nullptr;
		if (otherEnd != nullptr)
	    {
	   		m_writeVariableAction_EReference_value->setEOpposite(otherEnd);
	    }
	}
	
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setName("multiplicity");
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setUnique(true);
	m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeVariableAction_EOperation_multiplicity_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setEType(ecore::EcorePackage::eInstance()->getEBoolean_EDataType());
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setName("value_type");
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setLowerBound(0);
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setUpperBound(1);
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setUnique(true);
	m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap->setOrdered(true);
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap);
		parameter->setName("diagnostics");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEDiagnosticChain_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	{
		std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter_in_EOperation(m_writeVariableAction_EOperation_value_type_EDiagnosticChain_EMap);
		parameter->setName("context");
		parameter->setEType(ecore::EcorePackage::eInstance()->getEMap_EDataType());
		parameter->setLowerBound(0);
		parameter->setUpperBound(1);
		parameter->setUnique(true);
		parameter->setOrdered(true);
	}
	
	
}

void UmlPackageImpl::initializePackageEDataTypes()
{
	m_aggregationKind_EEnum->setName("AggregationKind");
	m_callConcurrencyKind_EEnum->setName("CallConcurrencyKind");
	m_connectorKind_EEnum->setName("ConnectorKind");
	m_expansionKind_EEnum->setName("ExpansionKind");
	m_interactionOperatorKind_EEnum->setName("InteractionOperatorKind");
	m_messageKind_EEnum->setName("MessageKind");
	m_messageSort_EEnum->setName("MessageSort");
	m_objectNodeOrderingKind_EEnum->setName("ObjectNodeOrderingKind");
	m_parameterDirectionKind_EEnum->setName("ParameterDirectionKind");
	m_parameterEffectKind_EEnum->setName("ParameterEffectKind");
	m_pseudostateKind_EEnum->setName("PseudostateKind");
	m_transitionKind_EEnum->setName("TransitionKind");
	m_visibilityKind_EEnum->setName("VisibilityKind");
	
}
