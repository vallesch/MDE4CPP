//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_COMMONBEHAVIOR_EVENTTRIGGEREDEXECUTION_HPP
#define PSSM_SEMANTICS_COMMONBEHAVIOR_EVENTTRIGGEREDEXECUTION_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSSM
{
	class PSSMFactory;
}

//Forward Declaration for used types
namespace uml 
{
	class Classifier;
}

namespace fUML 
{
	class EventOccurrence;
}

namespace fUML 
{
	class Execution;
}

namespace fUML 
{
	class FeatureValue;
}

namespace fUML 
{
	class Locus;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class ObjectActivation;
}

namespace fUML 
{
	class ParameterValue;
}

namespace fUML 
{
	class Value;
}

// base class includes
#include "fUML/Execution.hpp"

// enum includes


//*********************************
namespace PSSM::Semantics::CommonBehavior 
{
	/*!
	 */
	class EventTriggeredExecution:virtual public fUML::Execution
	{
		public:
 			EventTriggeredExecution(const EventTriggeredExecution &) {}
			EventTriggeredExecution& operator=(EventTriggeredExecution const&) = delete;

		protected:
			EventTriggeredExecution(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~EventTriggeredExecution() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Value> copy() = 0;
			
			/*!
			 Execute the behavior given by the type of this execution. 
			The parameterValues for any input (in or in-out) parameters of the behavior should be set before the execution.
			The parameteValues for any output (in-out, out or return) parameters of the behavior will be set by the execution.
			 */ 
			virtual void execute() = 0;
			
			/*!
			 */ 
			virtual void finalize() = 0;
			
			/*!
			 */ 
			virtual void initialize() = 0;
			
			/*!
			 Create a new execution with no behavior or parameterValues.
			 */ 
			virtual std::shared_ptr<fUML::Value> new_() = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::EventOccurrence > getTriggeringEventOccurrence() const = 0;
			
			/*!
			 */
			virtual void setTriggeringEventOccurrence(std::shared_ptr<fUML::EventOccurrence> _triggeringEventOccurrence_triggeringEventOccurrence) = 0;
			/*!
			 */
			virtual std::shared_ptr<fUML::EventOccurrence > getWrappedExecution() const = 0;
			
			/*!
			 */
			virtual void setWrappedExecution(std::shared_ptr<fUML::EventOccurrence> _wrappedExecution_wrappedExecution) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<fUML::EventOccurrence > m_triggeringEventOccurrence;
			/*!
			 */
			std::shared_ptr<fUML::EventOccurrence > m_wrappedExecution;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: PSSM_SEMANTICS_COMMONBEHAVIOR_EVENTTRIGGEREDEXECUTION_HPP */
