//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITOR_HPP
#define PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITOR_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag;


class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSSM
{
	class PSSMFactory;
}

//Forward Declaration for used types
namespace uml 
{
	class Behavior;
}

namespace fUML 
{
	class EventOccurrence;
}

namespace fUML 
{
	class Execution;
}

namespace fUML 
{
	class Locus;
}

namespace uml 
{
	class NamedElement;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class SemanticVisitor;
}

namespace uml 
{
	class Trigger;
}

// base class includes

// enum includes

#include "ecore/EObject.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	/*!
	 */
	class StateMachineSemanticVisitor : virtual public ecore::EObject 

	{
		public:
 			StateMachineSemanticVisitor(const StateMachineSemanticVisitor &) {}
			StateMachineSemanticVisitor& operator=(StateMachineSemanticVisitor const&) = delete;

		protected:
			StateMachineSemanticVisitor(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~StateMachineSemanticVisitor() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void activate() = 0;
			
			/*!
			 */ 
			virtual void activateTransitions() = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::SemanticVisitor> > getContextChain() = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Object> getExecutionContext() = 0;
			
			/*!
			 */ 
			virtual Any getExecutionFor(std::shared_ptr<uml::Behavior>  behavior,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Locus> getExecutionLocus() = 0;
			
			
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Execution> getStateMachineExecution() = 0;
			
			/*!
			 */ 
			virtual bool isVisitorFor(std::shared_ptr<uml::NamedElement>  node) = 0;
			
			/*!
			 */ 
			virtual bool match(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence,std::shared_ptr<Bag<uml::Trigger> >  triggers) = 0;
			
			
			
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<uml::NamedElement > getNode() const = 0;
			
			/*!
			 */
			virtual void setNode(std::shared_ptr<uml::NamedElement> _node_node) = 0;
			/*!
			 */
			virtual std::shared_ptr<fUML::SemanticVisitor > getParent() const = 0;
			
			/*!
			 */
			virtual void setParent(std::shared_ptr<fUML::SemanticVisitor> _parent_parent) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<uml::NamedElement > m_node;
			/*!
			 */
			std::shared_ptr<fUML::SemanticVisitor > m_parent;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITOR_HPP */
