//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATION_HPP
#define PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATION_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSSM
{
	class PSSMFactory;
}

//Forward Declaration for used types
namespace fUML 
{
	class EventOccurrence;
}

namespace uml 
{
	class NamedElement;
}

namespace PSSM::Semantics::StateMachines 
{
	class RegionActivation;
}

namespace fUML 
{
	class SemanticVisitor;
}

namespace PSSM::Semantics::StateMachines 
{
	class StateMachineSemanticVisitor;
}

namespace PSSM::Semantics::StateMachines 
{
	class VertexActivation;
}

// base class includes
#include "PSSM/Semantics/StateMachines/StateMachineSemanticVisitor.hpp"

// enum includes
#include "PSSM/Semantics/StateMachines/TransitionMetadata.hpp"


//*********************************
namespace PSSM::Semantics::StateMachines 
{
	/*!
	 */
	class TransitionActivation:virtual public StateMachineSemanticVisitor
	{
		public:
 			TransitionActivation(const TransitionActivation &) {}
			TransitionActivation& operator=(TransitionActivation const&) = delete;

		protected:
			TransitionActivation(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~TransitionActivation() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool canFireOn(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual bool canPropagateExecution(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual void enterTarget(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual bool evaluateGuard(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual void exitSource(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual void fire(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getLeastCommonAncestor() = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getSourceActivation() = 0;
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getTargetActivation() = 0;
			
			/*!
			 */ 
			virtual bool hasTrigger(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			/*!
			 */ 
			virtual bool isGuarded() = 0;
			
			/*!
			 */ 
			virtual bool isReached() = 0;
			
			/*!
			 */ 
			virtual bool isTraversed(bool staticCheck) = 0;
			
			/*!
			 */ 
			virtual bool isTriggered(bool staticCheck) = 0;
			
			/*!
			 */ 
			virtual void setSourceActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>  _) = 0;
			
			
			
			/*!
			 */ 
			virtual void setTargetActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>  _) = 0;
			
			/*!
			 */ 
			virtual void tryExecuteEffect(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual TransitionMetadata getAnalyticalStatus() const = 0;
			
			/*!
			 */ 
			virtual void setAnalyticalStatus (TransitionMetadata _analyticalStatus)= 0; 
			
			/*!
			 */ 
			virtual bool getLastPropagation() const = 0;
			
			/*!
			 */ 
			virtual void setLastPropagation (bool _lastPropagation)= 0; 
			
			/*!
			 */ 
			virtual TransitionMetadata getStatus() const = 0;
			
			/*!
			 */ 
			virtual void setStatus (TransitionMetadata _status)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::EventOccurrence > getLastTriggeringEventOccurrence() const = 0;
			
			/*!
			 */
			virtual void setLastTriggeringEventOccurrence(std::shared_ptr<fUML::EventOccurrence> _lastTriggeringEventOccurrence_lastTriggeringEventOccurrence) = 0;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation > getLeastCommonAncestor() const = 0;
			
			/*!
			 */
			virtual void setLeastCommonAncestor(std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> _leastCommonAncestor_leastCommonAncestor) = 0;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > getSourceVertexActivation() const = 0;
			
			/*!
			 */
			virtual void setSourceVertexActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _sourceVertexActivation_sourceVertexActivation) = 0;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > getTargetVertexActivation() const = 0;
			
			/*!
			 */
			virtual void setTargetVertexActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _targetVertexActivation_targetVertexActivation) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			TransitionMetadata m_analyticalStatus = TransitionMetadata::NONE;
			/*!
			 */ 
			bool m_lastPropagation = false;
			/*!
			 */ 
			TransitionMetadata m_status = TransitionMetadata::NONE;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<fUML::EventOccurrence > m_lastTriggeringEventOccurrence;
			/*!
			 */
			std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation > m_leastCommonAncestor;
			/*!
			 */
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > m_sourceVertexActivation;
			/*!
			 */
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > m_targetVertexActivation;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATION_HPP */
