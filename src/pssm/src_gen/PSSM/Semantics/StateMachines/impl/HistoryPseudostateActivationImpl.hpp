//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_HISTORYPSEUDOSTATEACTIVATIONHISTORYPSEUDOSTATEACTIVATIONIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_HISTORYPSEUDOSTATEACTIVATIONHISTORYPSEUDOSTATEACTIVATIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../HistoryPseudostateActivation.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "PSSM/Semantics/StateMachines/impl/PseudostateActivationImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class HistoryPseudostateActivationImpl :virtual public PseudostateActivationImpl, virtual public HistoryPseudostateActivation 
	{
		public: 
			HistoryPseudostateActivationImpl(const HistoryPseudostateActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			HistoryPseudostateActivationImpl& operator=(HistoryPseudostateActivationImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			HistoryPseudostateActivationImpl();
			virtual std::shared_ptr<HistoryPseudostateActivation> getThisHistoryPseudostateActivationPtr() const;
			virtual void setThisHistoryPseudostateActivationPtr(std::weak_ptr<HistoryPseudostateActivation> thisHistoryPseudostateActivationPtr);



		public:
			//destructor
			virtual ~HistoryPseudostateActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool hasDefaultTransition() ;
			
			/*!
			 */ 
			virtual void restore(std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation>  stateActivation,std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void restore(std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>  regionActivation,std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<HistoryPseudostateActivation> m_thisHistoryPseudostateActivationPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_HISTORYPSEUDOSTATEACTIVATIONHISTORYPSEUDOSTATEACTIVATIONIMPL_HPP */
