//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATIONTRANSITIONACTIVATIONIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATIONTRANSITIONACTIVATIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../TransitionActivation.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "PSSM/Semantics/StateMachines/impl/StateMachineSemanticVisitorImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class TransitionActivationImpl :virtual public StateMachineSemanticVisitorImpl, virtual public TransitionActivation 
	{
		public: 
			TransitionActivationImpl(const TransitionActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			TransitionActivationImpl& operator=(TransitionActivationImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			TransitionActivationImpl();
			virtual std::shared_ptr<TransitionActivation> getThisTransitionActivationPtr() const;
			virtual void setThisTransitionActivationPtr(std::weak_ptr<TransitionActivation> thisTransitionActivationPtr);



		public:
			//destructor
			virtual ~TransitionActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool canFireOn(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual bool canPropagateExecution(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void enterTarget(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual bool evaluateGuard(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void exitSource(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void fire(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getLeastCommonAncestor() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getSourceActivation() ;
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getTargetActivation() ;
			
			/*!
			 */ 
			virtual bool hasTrigger(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual bool isGuarded() ;
			
			/*!
			 */ 
			virtual bool isReached() ;
			
			/*!
			 */ 
			virtual bool isTraversed(bool staticCheck) ;
			
			/*!
			 */ 
			virtual bool isTriggered(bool staticCheck) ;
			
			/*!
			 */ 
			virtual void setSourceActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>  _) ;
			
			
			
			/*!
			 */ 
			virtual void setTargetActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>  _) ;
			
			/*!
			 */ 
			virtual void tryExecuteEffect(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual TransitionMetadata getAnalyticalStatus() const ;
			
			/*!
			 */ 
			virtual void setAnalyticalStatus (TransitionMetadata _analyticalStatus); 
			
			/*!
			 */ 
			virtual bool getLastPropagation() const ;
			
			/*!
			 */ 
			virtual void setLastPropagation (bool _lastPropagation); 
			
			/*!
			 */ 
			virtual TransitionMetadata getStatus() const ;
			
			/*!
			 */ 
			virtual void setStatus (TransitionMetadata _status); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::EventOccurrence > getLastTriggeringEventOccurrence() const ;
			
			/*!
			 */
			virtual void setLastTriggeringEventOccurrence(std::shared_ptr<fUML::EventOccurrence> _lastTriggeringEventOccurrence_lastTriggeringEventOccurrence) ;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation > getLeastCommonAncestor() const ;
			
			/*!
			 */
			virtual void setLeastCommonAncestor(std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> _leastCommonAncestor_leastCommonAncestor) ;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > getSourceVertexActivation() const ;
			
			/*!
			 */
			virtual void setSourceVertexActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _sourceVertexActivation_sourceVertexActivation) ;
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation > getTargetVertexActivation() const ;
			
			/*!
			 */
			virtual void setTargetVertexActivation(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _targetVertexActivation_targetVertexActivation) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<TransitionActivation> m_thisTransitionActivationPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_TRANSITIONACTIVATIONTRANSITIONACTIVATIONIMPL_HPP */
