//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATIONVERTEXACTIVATIONIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATIONVERTEXACTIVATIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../VertexActivation.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "PSSM/Semantics/StateMachines/impl/StateMachineSemanticVisitorImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class VertexActivationImpl :virtual public StateMachineSemanticVisitorImpl, virtual public VertexActivation 
	{
		public: 
			VertexActivationImpl(const VertexActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			VertexActivationImpl& operator=(VertexActivationImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			VertexActivationImpl();
			virtual std::shared_ptr<VertexActivation> getThisVertexActivationPtr() const;
			virtual void setThisVertexActivationPtr(std::weak_ptr<VertexActivation> thisVertexActivationPtr);



		public:
			//destructor
			virtual ~VertexActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void addIncomingTransition(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  transitionActivation) ;
			
			/*!
			 */ 
			virtual void addOutgoingTransition(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  transitionActivation) ;
			
			/*!
			 */ 
			virtual bool canPropagateExecution(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence,std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>  leastCommonAncestor) ;
			
			/*!
			 */ 
			virtual void enter(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence,std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>  leastCommonAncestor) ;
			
			/*!
			 */ 
			virtual void exit(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  exitingTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence,std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>  leastCommonAncestor) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation> > getAscendingHierarchy() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation> > getIncomingTransitions() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getLeastCommonAncestor(std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>  vertexActivation) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation> > getOutgoingTransitions() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getOwningRegionActivation() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getParentVertexActivation() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getRegionActivation(std::shared_ptr<fUML::SemanticVisitor>  semanticVisitor) ;
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getVertexActivation(std::shared_ptr<uml::Vertex>  vertex) ;
			
			/*!
			 */ 
			virtual bool isActive() ;
			
			/*!
			 */ 
			virtual bool isEnterable(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,bool staticCheck) ;
			
			/*!
			 */ 
			virtual bool isExitable(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  exitingTransition,bool staticCheck) ;
			
			
			
			/*!
			 */ 
			virtual void tagIncomingTransition(TransitionMetadata status,bool staticCheck) ;
			
			/*!
			 */ 
			virtual void tagOutgoingTransition(TransitionMetadata status,bool staticCheck) ;
			
			/*!
			 */ 
			virtual void terminate() ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual StateMetadata getStatus() const ;
			
			/*!
			 */ 
			virtual void setStatus (StateMetadata _status); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> getIncomingTransitionActivations() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> getOutgoingTransitionActivations() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<VertexActivation> m_thisVertexActivationPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATIONVERTEXACTIVATIONIMPL_HPP */
