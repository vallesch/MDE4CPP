//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATIONSTATEACTIVATIONIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATIONSTATEACTIVATIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../StateActivation.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "PSSM/Semantics/StateMachines/impl/VertexActivationImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class StateActivationImpl :virtual public VertexActivationImpl, virtual public StateActivation 
	{
		public: 
			StateActivationImpl(const StateActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			StateActivationImpl& operator=(StateActivationImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			StateActivationImpl();
			virtual std::shared_ptr<StateActivation> getThisStateActivationPtr() const;
			virtual void setThisStateActivationPtr(std::weak_ptr<StateActivation> thisStateActivationPtr);



		public:
			//destructor
			virtual ~StateActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool canDefer(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void defer(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void enterRegions(std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>  enteringTransition,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation> > getConnectionPointActivation() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation> getConnectionPointActivation(std::shared_ptr<uml::Vertex>  vertex) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<uml::Behavior> getDoActivity() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<uml::Behavior> getEntry() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<uml::Behavior> getExit() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation> > getFireableTransitions(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation> > getRegionActivation() ;
			
			/*!
			 */ 
			virtual bool hasCompleted() ;
			
			/*!
			 */ 
			virtual void notifyCompletion() ;
			
			/*!
			 */ 
			virtual void releaseDeferredEvents() ;
			
			/*!
			 */ 
			virtual void tryExecuteEntry(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void tryExecuteExit(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual void tryInvokeDoActivity(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool getIsDoActivityCompleted() const ;
			
			/*!
			 */ 
			virtual void setIsDoActivityCompleted (bool _isDoActivityCompleted); 
			
			/*!
			 */ 
			virtual bool getIsEntryCompleted() const ;
			
			/*!
			 */ 
			virtual void setIsEntryCompleted (bool _isEntryCompleted); 
			
			/*!
			 */ 
			virtual bool getIsExitCompleted() const ;
			
			/*!
			 */ 
			virtual void setIsExitCompleted (bool _isExitCompleted); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>> getConnectionPointActivations() const ;
			
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject > getDoActivityContextObject() const ;
			
			/*!
			 */
			virtual void setDoActivityContextObject(std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> _doActivityContextObject_doActivityContextObject) ;
			/*!
			 */
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> getRegionActivations() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<StateActivation> m_thisStateActivationPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATIONSTATEACTIVATIONIMPL_HPP */
