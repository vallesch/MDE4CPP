//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_STATEMACHINEEXECUTIONSTATEMACHINEEXECUTIONIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_STATEMACHINEEXECUTIONSTATEMACHINEEXECUTIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../StateMachineExecution.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "fUML/impl/ExecutionImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class StateMachineExecutionImpl :virtual public fUML::ExecutionImpl, virtual public StateMachineExecution 
	{
		public: 
			StateMachineExecutionImpl(const StateMachineExecutionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			StateMachineExecutionImpl& operator=(StateMachineExecutionImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			StateMachineExecutionImpl();
			virtual std::shared_ptr<StateMachineExecution> getThisStateMachineExecutionPtr() const;
			virtual void setThisStateMachineExecutionPtr(std::weak_ptr<StateMachineExecution> thisStateMachineExecutionPtr);



		public:
			//destructor
			virtual ~StateMachineExecutionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Execute the behavior given by the type of this execution. 
			The parameterValues for any input (in or in-out) parameters of the behavior should be set before the execution.
			The parameteValues for any output (in-out, out or return) parameters of the behavior will be set by the execution.
			 */ 
			virtual void execute() ;
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation> > getRegionActivation() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getVertexActivation(std::shared_ptr<uml::Vertex>  vertex) ;
			
			/*!
			 */ 
			virtual void initRegions() ;
			
			/*!
			 Create a new execution with no behavior or parameterValues.
			 */ 
			virtual std::shared_ptr<fUML::Value> new_() ;
			
			/*!
			 */ 
			virtual void startBehavior(std::shared_ptr<uml::Class>  classifier,std::shared_ptr<Bag<fUML::ParameterValue> >  inputs) ;
			
			/*!
			 */ 
			virtual void terminate() ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration > getConfiguration() const ;
			
			/*!
			 */
			virtual void setConfiguration(std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration> _configuration_configuration) ;
			/*!
			 */
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> getRegionActivations() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<StateMachineExecution> m_thisStateMachineExecutionPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_STATEMACHINEEXECUTIONSTATEMACHINEEXECUTIONIMPL_HPP */
