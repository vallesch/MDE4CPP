//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITORSTATEMACHINESEMANTICVISITORIMPL_HPP
#define PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITORSTATEMACHINESEMANTICVISITORIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../StateMachineSemanticVisitor.hpp"

#include "PSSM/impl/PSSMFactoryImpl.hpp"
#include "fUML/impl/SemanticVisitorImpl.hpp"

//*********************************
namespace PSSM::Semantics::StateMachines 
{
	class StateMachineSemanticVisitorImpl :virtual public fUML::SemanticVisitorImpl, virtual public StateMachineSemanticVisitor 
	{
		public: 
			StateMachineSemanticVisitorImpl(const StateMachineSemanticVisitorImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			StateMachineSemanticVisitorImpl& operator=(StateMachineSemanticVisitorImpl const&) = delete;

		protected:
			friend class PSSM::PSSMFactoryImpl;
			StateMachineSemanticVisitorImpl();
			virtual std::shared_ptr<StateMachineSemanticVisitor> getThisStateMachineSemanticVisitorPtr() const;
			virtual void setThisStateMachineSemanticVisitorPtr(std::weak_ptr<StateMachineSemanticVisitor> thisStateMachineSemanticVisitorPtr);



		public:
			//destructor
			virtual ~StateMachineSemanticVisitorImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void activate() ;
			
			/*!
			 */ 
			virtual void activateTransitions() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::SemanticVisitor> > getContextChain() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Object> getExecutionContext() ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Execution> getExecutionFor(std::shared_ptr<uml::Behavior>  behavior,std::shared_ptr<fUML::EventOccurrence>  eventOccurrence) ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Locus> getExecutionLocus() ;
			
			
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Execution> getStateMachineExecution() ;
			
			/*!
			 */ 
			virtual bool isVisitorFor(std::shared_ptr<uml::NamedElement>  node) ;
			
			/*!
			 */ 
			virtual bool match(std::shared_ptr<fUML::EventOccurrence>  eventOccurrence,std::shared_ptr<Bag<uml::Trigger> >  triggers) ;
			
			
			
			
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<uml::NamedElement > getNode() const ;
			
			/*!
			 */
			virtual void setNode(std::shared_ptr<uml::NamedElement> _node_node) ;
			/*!
			 */
			virtual std::shared_ptr<fUML::SemanticVisitor > getParent() const ;
			
			/*!
			 */
			virtual void setParent(std::shared_ptr<fUML::SemanticVisitor> _parent_parent) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<PSSM::PSSMFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<StateMachineSemanticVisitor> m_thisStateMachineSemanticVisitorPtr;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_STATEMACHINESEMANTICVISITORSTATEMACHINESEMANTICVISITORIMPL_HPP */
