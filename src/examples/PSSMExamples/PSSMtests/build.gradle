plugins {
  id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.5"
}

task compilePSSMExample(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'Examples'
	description 'compile Ecore example'
	
	projectFolder = file('.' + File.separator + 'src' + File.separator + 'PSSMtests')
	
	inputs.files(fileTree('.') {
        exclude 'src/PSSMExample/.cmake/**'
    })
	if(!file('.' + File.separator + 'src' + File.separator + 'PSSMExample' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'PSSMExample.exe')
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'PSSMExample.exe')
	
	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('buildEcore', true)
	dependsOn ecore
	inputs.files(ecore.outputs)

	// dependency to model 'types'
	def types = getRootProject().getTasksByName('buildTypes', true)
	dependsOn types
	inputs.files(types.outputs)
	
	// dependency to model 'pssm'
	def uml = getRootProject().getTasksByName('compilePSSM', true)
	dependsOn uml
	inputs.files(uml.outputs)

	// dependency to model 'umlReflection'
	def umlReflection = getRootProject().getTasksByName('buildUmlReflection', true)
	dependsOn umlReflection
	inputs.files(umlReflection.outputs)
}

task clean {
	doLast {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + 'PSSMExample' + File.separator + '.cmake')
		if(cmakeFolder.exists()) {
			delete cmakeFolder.absolutePath
			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}